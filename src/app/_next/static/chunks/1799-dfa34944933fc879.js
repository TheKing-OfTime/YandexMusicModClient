(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
    [1799],
    {
        4115: (e) => {
            e.exports = {
                root: "PostAlbums_root__u2a1q",
                content: "PostAlbums_content__uMSez",
            };
        },
        5663: (e, t, a) => {
            "use strict";
            a.d(t, { P: () => i });
            let i = (e) => {
                if ("number" == typeof e && !Number.isNaN(e)) return e;
                if ("string" == typeof e) {
                    let t = Number.parseInt(e, 10);
                    if (!Number.isNaN(t)) return t;
                }
            };
        },
        7091: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { SavedOfferInitializer: () => l });
            var i = a(97531),
                r = a(66268),
                s = a(79169);
            let l = (0, i.PA)(() => {
                let {
                        paymentWidgetModal: {
                            modal: e,
                            setTarget: t,
                            setTariffOfferName: a,
                            setServiceSessionId: i,
                            setIsSilent: l,
                            setOffersBatchId: n,
                            setOffersPositionIds: o,
                        },
                        user: d,
                    } = (0, s.Pjs)(),
                    { hasFreeUserAccess: u } = (0, s.XCI)(),
                    c = (0, s.NFA)(),
                    g = (0, r.useMemo)(() => c.get(s.vHc), [c]);
                (0, r.useLayoutEffect)(() => {
                    if (!d.isAuthorized || !u || null === g) return;
                    let r = g.get(s.cYZ.Offer);
                    if (null === r) return;
                    let {
                        target: c,
                        serviceSessionId: h,
                        tariffOfferName: m,
                        isSilent: y,
                        offersBatchId: p,
                        offersPositionIds: v,
                    } = r;
                    g.remove(s.cYZ.Offer),
                        t(c),
                        l(y),
                        i(h),
                        n(p),
                        o(v),
                        m && a(m),
                        e.open();
                }, [u, g, e, a, t, i, l, n, o, d.isAuthorized]);
            });
        },
        8038: (e) => {
            e.exports = {
                root: "FeedConcerts_root__W7OGN",
                header: "FeedConcerts_header__Ht1xd",
                container: "FeedConcerts_container__CONvW",
                column: "FeedConcerts_column__FpMgx",
                row: "FeedConcerts_row__HEdtn",
            };
        },
        8957: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { SettingsInitializer: () => n });
            var i = a(97531),
                r = a(66268),
                s = a(49444),
                l = a(79169);
            let n = (0, i.PA)((e) => {
                let { browserInfo: t } = e,
                    a = (0, s.j)(),
                    { settings: i } = (0, l.Pjs)(),
                    n = (0, l.uoh)();
                i.setBrowserInfo(t),
                    n && i.setPlatform(n),
                    (0, r.useLayoutEffect)(() => {
                        i.initializeLiteVersionMode();
                    }, []),
                    (0, r.useEffect)(() => {
                        i.liteVersionMode &&
                            a.count(i.liteVersionMode, "liteVersionMode");
                    }, [a, i.liteVersionMode]);
            });
        },
        9332: (e, t, a) => {
            "use strict";
            a.r(t),
                a.d(t, {
                    LayoutProvider: () => v,
                    setClientSideLayout: () => p,
                });
            var i = a(33008),
                r = a(13201),
                s = a(97531),
                l = a(66268),
                n = a(73827),
                o = a(44612);
            let d = {
                Chrome: 105,
                ChromeMobile: 105,
                Edge: 105,
                Firefox: 104,
                MobileFirefox: 104,
                Opera: 90,
                OperaMobile: 80,
                Safari: 16,
                MobileSafari: 16,
                UCBrowser: 15,
                MSIE: 12,
                YandexBrowser: 23,
            };
            var u = a(85896),
                c = a(18740),
                g = a(59938),
                h = a.n(g);
            let m = (e) => {
                let { message: t, closeToast: a } = e;
                return (0, i.jsx)(c.$W, {
                    className: (0, u.$)(h().root, h().important),
                    message: t,
                    closeToast: a,
                });
            };
            var y = a(79169);
            let p = (e) => {
                    {
                        document.body.classList.remove("desktop"),
                            e.setLayout((0, y.Svc)(window.innerWidth)),
                            e.setIsLandscape(
                                window.matchMedia("(orientation: landscape)")
                                    .matches,
                            );
                        let t = window.screen.availHeight || window.innerHeight;
                        e.setIsMobileLandscapeHeight(t < 450);
                    }
                },
                v = (0, s.PA)((e) => {
                    let { children: t } = e,
                        { formatMessage: a } = (0, n.A)(),
                        { notify: s } = (0, y.lkh)(),
                        { settings: u } = (0, y.Pjs)(),
                        [c, g] = (0, o.d)(),
                        [h, v] = (0, o.d)(),
                        [S, P] = (0, o.d)(),
                        [E, b] = (0, o.d)(),
                        [f, I] = (0, o.d)(),
                        [k, _] = (0, o.d)(),
                        [T, C] = (0, o.d)(),
                        [D, A] = (0, o.d)(),
                        [L, N] = (0, o.d)();
                    u.layout;
                    let R = (0, l.useMemo)(
                        () =>
                            (0, r.A)(() => {
                                p(u);
                            }, 100),
                        [u],
                    );
                    (0, l.useEffect)(() => {
                        (function (e) {
                            if (
                                !(null == e ? void 0 : e.isBrowser) ||
                                !e.name ||
                                !e.version
                            )
                                return !1;
                            let t = d[e.name];
                            if (!t) return !1;
                            let a = parseFloat(e.version);
                            return !Number.isNaN(a) && a < t;
                        })(u.browserInfo) &&
                            s(
                                (0, i.jsx)(m, {
                                    message: a({
                                        id: "warning-messages.update-your-browser",
                                    }),
                                }),
                                { containerId: y.uQT.IMPORTANT, single: !0 },
                            );
                    }, [a, s, u.browserInfo]),
                        (0, l.useLayoutEffect)(() => {
                            p(u);
                        }, [u]),
                        (0, l.useEffect)(
                            () => (
                                window.addEventListener("resize", R),
                                () => {
                                    window.removeEventListener("resize", R);
                                }
                            ),
                            [R],
                        );
                    let w = (0, l.useMemo)(
                        () => ({
                            defaultLayoutRef: c,
                            contentRef: h,
                            contentRootRef: S,
                            contentScrollRef: E,
                            sideBannerRef: k,
                            playlistStickyFiltersRef: T,
                            playlistStaticFiltersRef: D,
                            compositePlayerBarRef: f,
                            paywallRef: L,
                            setContentRef: v,
                            setDefaultLayoutRef: g,
                            setContentRootRef: P,
                            setContentScrollRef: b,
                            setSideBannerRef: _,
                            setPlaylistStickyFiltersRef: C,
                            setPlaylistStaticFiltersRef: A,
                            setCompositePlayerBarRef: I,
                            setPaywallRef: N,
                        }),
                        [c, h, S, E, k, T, D, f, L, g, v, P, b, _, C, A, I, N],
                    );
                    return (0, i.jsx)(y.MQO.Provider, {
                        value: w,
                        children: t,
                    });
                });
        },
        11463: (e, t, a) => {
            "use strict";
            a.d(t, { KidsEditorialAlbumsPage: () => E });
            var i = a(33008),
                r = a(85896),
                s = a(97531),
                l = a(17846),
                n = a(66268),
                o = a(73827),
                d = a(18064),
                u = a(42213),
                c = a(42314),
                g = a(77868),
                h = a(83888),
                m = a(52732),
                y = a(64143),
                p = a(79169),
                v = a(18740),
                S = a(24147),
                P = a.n(S);
            let E = (0, s.PA)((e) => {
                var t, a, s;
                let { id: S } = e,
                    {
                        kids: { kidsEditorialAlbumSubpage: E },
                        settings: { isMobile: b },
                    } = (0, p.Pjs)(),
                    f = (0, p.W6M)(),
                    { contentScrollRef: I, setContentScrollRef: k } = (0,
                    p.gKY)(),
                    { formatMessage: _ } = (0, o.A)(),
                    T = (0, u.c)((e) => {
                        E.getAlbums({ page: e, pageSize: 20 });
                    });
                E.isNotFound && (0, l.notFound)(),
                    (0, n.useEffect)(
                        () => () => {
                            E.reset();
                        },
                        [E],
                    );
                let C = (0, c.L)(() => ({
                    Footer: () =>
                        (0, i.jsx)(v.A, {
                            children: (0, i.jsx)(v.wi, {
                                className: P().footer,
                            }),
                        }),
                }));
                if (
                    ((0, p.Jzs)(E.isResolved),
                    E.isNeededToLoad &&
                        (0, n.use)(E.getData({ id: S, page: 0, pageSize: 20 })),
                    E.isSomethingWrong)
                )
                    return (0, i.jsx)(h.w, {});
                let D = E.isLoading
                    ? 20
                    : null !=
                        (a =
                            null == E || null == (t = E.albums)
                                ? void 0
                                : t.length)
                      ? a
                      : 0;
                return (0, i.jsx)(p.nVz, {
                    pageId: p._Q$.KIDS_EDITORIAL_ALBUMS,
                    children: (0, i.jsx)(y.hO, {
                        scrollElement: I,
                        outerTitle: E.title,
                        children: (0, i.jsxs)("div", {
                            className: P().root,
                            ...(0, d.Am)(d.Xk.kids.KIDS_EDITORIAL_ALBUMS),
                            children: [
                                (0, i.jsx)(v.Y9, {
                                    variant: v.Vw.TEXT,
                                    withForwardControl: !1,
                                    withBackwardControl: f.canBack,
                                    children: (0, i.jsx)(g.Heading, {
                                        variant: "h2",
                                        weight: "bold",
                                        size: "xl",
                                        lineClamp: 1,
                                        children: E.title,
                                    }),
                                }),
                                (0, i.jsx)(v.$$, {
                                    context: {
                                        listAriaLabel: _(
                                            { id: "mixes.albums-list" },
                                            { genreName: E.title || "" },
                                        ),
                                    },
                                    className: (0, r.$)(
                                        P().scrollContainer,
                                        P().important,
                                    ),
                                    customComponents: C,
                                    itemContentCallback: (e) => {
                                        var t, a;
                                        let r =
                                                null == E ||
                                                null == (a = E.albums) ||
                                                null == (t = a[e])
                                                    ? void 0
                                                    : t.data,
                                            s = _(
                                                {
                                                    id: "loading-messages.entity-is-loading",
                                                },
                                                {
                                                    entityName: _({
                                                        id: "entity-names.album",
                                                    }),
                                                },
                                            );
                                        return r
                                            ? (0, i.jsx)(
                                                  m.aX,
                                                  {
                                                      withLikesCount: !0,
                                                      album: r,
                                                      contentLinesCount: 3,
                                                  },
                                                  r.id,
                                              )
                                            : (0, i.jsx)(v.Vt, {
                                                  isActive: !0,
                                                  "aria-label": s,
                                              });
                                    },
                                    initialItemCount: D,
                                    totalCount: D,
                                    onGetDataByPage: T,
                                    pageSize: 20,
                                    totalRequests:
                                        null != (s = E.requests) ? s : 0,
                                    listClassName: P().content,
                                    itemClassName: P().item,
                                    handleRef: k,
                                    isMobileLayout: b,
                                    useWindowScroll: b,
                                }),
                            ],
                        }),
                    }),
                });
            });
        },
        11856: (e) => {
            e.exports = {
                root: "MyMusicDownloadedTracksPageEmpty_root__LAXpY",
                icon: "MyMusicDownloadedTracksPageEmpty_icon__PDhk2",
                title: "MyMusicDownloadedTracksPageEmpty_title__g2w5R",
                text: "MyMusicDownloadedTracksPageEmpty_text__8RJFg",
            };
        },
        12627: (e) => {
            e.exports = {
                root: "PlaylistPersonalDummyPage_root__tGxHG",
                cover: "PlaylistPersonalDummyPage_cover__XcCD1",
                title: "PlaylistPersonalDummyPage_title__ZSf9O",
                important: "PlaylistPersonalDummyPage_important__uEHGe",
                text: "PlaylistPersonalDummyPage_text__ci30d",
            };
        },
        14795: (e, t, a) => {
            "use strict";
            a.d(t, {
                dx: () => d,
                l$: () => w.AlbumPage,
                MH: () => R,
                Wh: () => O,
            }),
                a(86916);
            var i,
                r,
                s = a(41028),
                l = a(79169),
                n = a(59615);
            let o = s.gK.model("Cpa", {
                    clid: s.gK.string,
                    artistId: s.gK.number,
                }),
                d = s.gK
                    .compose(
                        s.gK.model("AlbumCpa", {
                            albumId: s.gK.maybeNull(s.gK.number),
                            cpa: s.gK.maybeNull(o),
                        }),
                        n.pl,
                    )
                    .views((e) => ({
                        isPlusCPAEnabled(t) {
                            let {
                                    pageAlbumId: a,
                                    albumId: i,
                                    isNonMusic: r,
                                } = t,
                                {
                                    experiments: l,
                                    user: { isAuthorized: n },
                                } = (0, s.Zn)(e);
                            return !1;
                        },
                        isPlusCPAPlayerBarEnabled(t, a) {
                            let {
                                experiments: i,
                                user: { hasPlus: r },
                            } = (0, s.Zn)(e);
                            return !1;
                        },
                        isPlusCPABannerEnabled(t) {
                            var a;
                            let {
                                    pageAlbumId: i,
                                    albumId: r,
                                    isNonMusic: l,
                                } = t,
                                {
                                    experiments: n,
                                    settings: o,
                                    user: { hasPlus: d },
                                } = (0, s.Zn)(e);
                            return null == (a = o.browserInfo) || a.isTouch, !1;
                        },
                        isHidePlusModalEnabled(t, a) {
                            var i;
                            let {
                                experiments: r,
                                settings: l,
                                user: { hasPlus: n },
                            } = (0, s.Zn)(e);
                            return null == (i = l.browserInfo) || i.isTouch, !1;
                        },
                    }))
                    .actions((e) => ({
                        getCpa: (0, s.L3)(function* (t) {
                            let { albumId: a, preloadedCpa: i } = t,
                                { experiments: r, user: l } = (0, s.Zn)(e);
                        }),
                        reset() {
                            (e.albumId = null), e.destroyItems([e.cpa]);
                        },
                    }));
            var u = a(61979),
                c = a(72315),
                g = a(93435),
                h = a(15479),
                m = a(6247);
            ((i || (i = {})).RECENT_ALBUMS = "recent-albums"),
                (function (e) {
                    (e[(e.DAY = 1)] = "DAY"),
                        (e[(e.WEEK = 7)] = "WEEK"),
                        (e[(e.MONTH = 30)] = "MONTH");
                })(r || (r = {}));
            var y = a(85897),
                p = a(12853),
                v = a(52732),
                S = a(53706),
                P = a(2865),
                E = a(44078),
                b = a(95592);
            let f = (e) =>
                    (0, s.wg)({
                        type: b.rU.TEXT,
                        data: null != e ? e : null,
                        loadingState: l.GuX.RESOLVE,
                    }),
                I = (e) => {
                    var t;
                    let { data: a, ...i } = e;
                    return (0, s.wg)({
                        type:
                            null != (t = null == a ? void 0 : a.type)
                                ? t
                                : m.S.TRACK,
                        data: null != a ? a : null,
                        ...i,
                    });
                },
                k = (e) => "".concat(e, "-text"),
                _ = (e) => String(e),
                T = (e) =>
                    (0, s.wg)({
                        id: e.id,
                        type: e.type,
                        title: e.title,
                        albums: e.albums.map(v.pp),
                    }),
                C = (e) => !!(e && "position" in e),
                D = s.gK
                    .compose(
                        s.gK.model("AlbumDonations", {
                            items: s.gK.maybeNull(s.gK.array(S.eG)),
                        }),
                        n.pl,
                        n.XT,
                    )
                    .actions((e) => ({
                        reset() {
                            (e.loadingState = l.GuX.IDLE),
                                e.destroyItems([e.items]);
                        },
                    })),
                A = s.gK.model("LabelItem", {
                    id: s.gK.number,
                    name: s.gK.string,
                }),
                L = s.gK
                    .compose(
                        s.gK.model("RelatedAlbumsPage", {
                            items: s.gK.array(v.JC),
                        }),
                        n.pl,
                        n.XT,
                    )
                    .actions((e) => ({
                        reset() {
                            (e.loadingState = l.GuX.IDLE),
                                e.destroyItems([e.items]);
                        },
                    })),
                N = s.gK
                    .compose(
                        s.gK.model("RelatedContent", {
                            items: s.gK.maybeNull(s.gK.array(p.N3)),
                        }),
                        n.pl,
                        n.XT,
                    )
                    .actions((e) => ({
                        reset() {
                            (e.loadingState = l.GuX.IDLE),
                                e.destroyItems([e.items]);
                        },
                    })),
                R = s.gK
                    .compose(
                        s.gK.model("AlbumPage", {
                            id: s.gK.maybeNull(s.gK.number),
                            meta: s.gK.maybeNull(v.JC),
                            items: s.gK.array(p.PX),
                            indexItems: s.gK.map(s.gK.array(s.gK.number)),
                            errorStatusCode: s.gK.maybeNull(s.gK.number),
                            deprecationTargetAlbumId: s.gK.maybeNull(
                                s.gK.number,
                            ),
                            latestGenreAlbums: s.gK.maybe(L),
                            otherArtistAlbums: s.gK.maybe(L),
                            otherAlbumVersions: s.gK.maybe(s.gK.array(v.JC)),
                            labels: s.gK.maybeNull(s.gK.array(A)),
                            description: s.gK.maybe(s.gK.string),
                            donations: s.gK.maybe(D),
                            relatedContent: s.gK.maybe(N),
                            allTracksUnfinished: s.gK.boolean,
                        }),
                        n.Ec,
                        n.pl,
                        n.XT,
                    )
                    .views((e) => {
                        let t = {
                            get isOtherArtistAlbumsAvailable() {
                                var a, i, r, n, o;
                                return !!(
                                    !(null == (a = e.meta)
                                        ? void 0
                                        : a.isNonMusic) &&
                                    (null == (r = e.meta) ||
                                    null == (i = r.artists)
                                        ? void 0
                                        : i.length) === 1 &&
                                    !(null == (o = e.meta) ||
                                    null == (n = o.artists[0])
                                        ? void 0
                                        : n.various)
                                );
                            },
                            get isLatestGenreAlbumsAvailable() {
                                var d, c;
                                return !!(
                                    !(null == (d = e.meta)
                                        ? void 0
                                        : d.isNonMusic) &&
                                    (null == (c = e.meta) ? void 0 : c.genre)
                                );
                            },
                            get isNotFound() {
                                return (
                                    e.isRejected &&
                                    (e.errorStatusCode === u.X1.NOT_FOUND ||
                                        e.errorStatusCode === u.X1.BAD_REQUEST)
                                );
                            },
                            get isCacheNotFound() {
                                return (
                                    e.isRejected && e.errorStatusCode === y.FX
                                );
                            },
                            get hasDonations() {
                                var g;
                                return !!(
                                    (null == (g = e.donations)
                                        ? void 0
                                        : g.isResolved) &&
                                    e.donations &&
                                    e.donations.items &&
                                    e.donations.items.length > 0
                                );
                            },
                            get hasOtherAlbumVersions() {
                                return !!(
                                    e.isNeededToLoad ||
                                    e.loadingState === l.GuX.PENDING ||
                                    (e.otherAlbumVersions &&
                                        e.otherAlbumVersions.length > 0)
                                );
                            },
                            get hasLatestGenreAlbums() {
                                var h, m;
                                let a =
                                    e.latestGenreAlbums &&
                                    e.latestGenreAlbums.items &&
                                    e.latestGenreAlbums.items.length > 0;
                                return !!(
                                    t.isLatestGenreAlbumsAvailable &&
                                    ((null == (h = e.latestGenreAlbums)
                                        ? void 0
                                        : h.isNeededToLoad) ||
                                        (null == (m = e.latestGenreAlbums)
                                            ? void 0
                                            : m.isLoading) ||
                                        a)
                                );
                            },
                            get hasOtherArtistAlbums() {
                                var p, v;
                                let a =
                                    e.otherArtistAlbums &&
                                    e.otherArtistAlbums.items &&
                                    e.otherArtistAlbums.items.length > 0;
                                return !!(
                                    t.isOtherArtistAlbumsAvailable &&
                                    ((null == (p = e.otherArtistAlbums)
                                        ? void 0
                                        : p.isNeededToLoad) ||
                                        (null == (v = e.otherArtistAlbums)
                                            ? void 0
                                            : v.isLoading) ||
                                        a)
                                );
                            },
                            get isLoading() {
                                return (
                                    e.isNeededToLoad ||
                                    e.loadingState === l.GuX.PENDING
                                );
                            },
                            get isLatestGenreAlbumsLoading() {
                                var S, P;
                                return !!(
                                    (null == (S = e.latestGenreAlbums)
                                        ? void 0
                                        : S.isNeededToLoad) ||
                                    (null == (P = e.latestGenreAlbums)
                                        ? void 0
                                        : P.isLoading)
                                );
                            },
                            get isOtherArtistAlbumsLoading() {
                                var E, f;
                                return !!(
                                    (null == (E = e.otherArtistAlbums)
                                        ? void 0
                                        : E.isNeededToLoad) ||
                                    (null == (f = e.otherArtistAlbums)
                                        ? void 0
                                        : f.isLoading)
                                );
                            },
                            get isRelatedContentLoading() {
                                var I, k;
                                return !!(
                                    (null == (I = e.relatedContent)
                                        ? void 0
                                        : I.isNeededToLoad) ||
                                    (null == (k = e.relatedContent)
                                        ? void 0
                                        : k.isLoading)
                                );
                            },
                            get contextMeta() {
                                var _, T, C, D, A, L, N, R, w;
                                return {
                                    id: e.meta.id,
                                    title:
                                        null == (_ = e.meta) ? void 0 : _.title,
                                    coverUri:
                                        null == (T = e.meta)
                                            ? void 0
                                            : T.coverUri,
                                    type:
                                        null == (C = e.meta) ? void 0 : C.type,
                                    year:
                                        null == (D = e.meta) ? void 0 : D.year,
                                    version:
                                        null == (A = e.meta)
                                            ? void 0
                                            : A.version,
                                    genre:
                                        null == (L = e.meta) ? void 0 : L.genre,
                                    likesCount:
                                        null == (N = e.meta)
                                            ? void 0
                                            : N.likesCount,
                                    averageColor:
                                        null == (R = e.meta)
                                            ? void 0
                                            : R.averageColor,
                                    available:
                                        null == (w = e.meta)
                                            ? void 0
                                            : w.isAvailable,
                                };
                            },
                            get tracks() {
                                return e.items.filter(
                                    (e) => e.type !== b.rU.TEXT,
                                );
                            },
                            get lastEpisodes() {
                                return t.tracks.slice(0, 5);
                            },
                            get lastEpisodesTrackIds() {
                                return t.lastEpisodes.map((e) => e.id);
                            },
                            get hasLabel() {
                                return !!(e.labels && e.labels.length);
                            },
                            get shouldShowLabel() {
                                let { experiments: a } = (0, s.Zn)(e);
                                return (
                                    t.hasLabel &&
                                    a.checkExperiment(
                                        l.zal.WebNextLabelPage,
                                        "on",
                                    )
                                );
                            },
                            labelUrl(e) {
                                let { href: t } = (0, l.uvd)(
                                    "/label/:labelId",
                                    { params: { labelId: e } },
                                );
                                return t;
                            },
                        };
                        return t;
                    })
                    .actions((e) => {
                        let t = {
                            makeFlatVolumeItems: (t) => {
                                let a = 0;
                                t.volumes.forEach((i) => {
                                    t.volumes.length > 1 &&
                                        i[0] &&
                                        (e.items.push(f()),
                                        e.indexItems.set(k(i[0].id), [
                                            e.items.length - 1,
                                        ])),
                                        i.forEach((t) => {
                                            e.items.push(
                                                I({
                                                    id: t.id,
                                                    loadingState: l.GuX.IDLE,
                                                    positionInContext: a,
                                                }),
                                            );
                                            let i = e.indexItems.get(
                                                String(t.id),
                                            );
                                            e.indexItems.set(
                                                _(t.id),
                                                i
                                                    ? [...i, e.items.length - 1]
                                                    : [e.items.length - 1],
                                            ),
                                                a++;
                                        });
                                });
                            },
                            updateVolumeItemsState: (t, a) => {
                                t.forEach((t) => {
                                    let i = e.indexItems.get(String(t));
                                    null == i ||
                                        i.forEach((i) => {
                                            let r = e.items[i];
                                            C(r) &&
                                                (e.items[i] = I({
                                                    id: t,
                                                    loadingState: a,
                                                    positionInContext:
                                                        r.positionInContext,
                                                    hasEverFinished:
                                                        r.hasEverFinished,
                                                }));
                                        });
                                });
                            },
                            insertDataToVolumeItems: (t) => {
                                t.forEach((t, a) => {
                                    let i = e.indexItems.get(_(t.id));
                                    null == i ||
                                        i.forEach((i) => {
                                            var r, s, n, o, d;
                                            let u = e.items[0],
                                                c = e.items[i],
                                                g = e.items[i - 1];
                                            if (!C(c)) return;
                                            let h =
                                                    C(u) && u.id === c.id
                                                        ? 1
                                                        : null ==
                                                                (n =
                                                                    t.albums) ||
                                                            null ==
                                                                (s = n[0]) ||
                                                            null ==
                                                                (r =
                                                                    s.trackPosition)
                                                          ? void 0
                                                          : r.index,
                                                m =
                                                    null == c
                                                        ? void 0
                                                        : c.positionInContext,
                                                y =
                                                    C(g) &&
                                                    (null == g
                                                        ? void 0
                                                        : g.position)
                                                        ? g.position + 1
                                                        : h,
                                                p = (0, E.vU)(t, {
                                                    hasEverFinished:
                                                        null == c
                                                            ? void 0
                                                            : c.hasEverFinished,
                                                });
                                            if (p.isRemoved) {
                                                e.items[i] = I({
                                                    id: t.id,
                                                    loadingState: l.GuX.REJECT,
                                                    positionInContext: m,
                                                    position: C(g)
                                                        ? g.position
                                                        : a,
                                                });
                                                return;
                                            }
                                            e.items[i] = I({
                                                id: t.id,
                                                loadingState: l.GuX.RESOLVE,
                                                positionInContext: m,
                                                data: p,
                                                position:
                                                    (null == g
                                                        ? void 0
                                                        : g.type) === b.rU.TEXT
                                                        ? 1
                                                        : y,
                                                isBest:
                                                    null == (d = e.meta) ||
                                                    null ==
                                                        (o = d.bestAlbumTracks)
                                                        ? void 0
                                                        : o.includes(
                                                              Number(t.id),
                                                          ),
                                                hasEverFinished:
                                                    null == c
                                                        ? void 0
                                                        : c.hasEverFinished,
                                            });
                                        });
                                    let r = e.indexItems.get(k(t.id));
                                    null == r ||
                                        r.forEach((a) => {
                                            var i, r, s;
                                            e.items[a] = f(
                                                null == (s = t.albums) ||
                                                    null == (r = s[0]) ||
                                                    null ==
                                                        (i = r.trackPosition)
                                                    ? void 0
                                                    : i.volume,
                                            );
                                        });
                                });
                            },
                            afterCreate() {
                                e.getDescriptionTexts();
                            },
                            setAlbumUnfinished: () => {
                                var a;
                                t.markUnfinished({ albumId: e.id || 0 }),
                                    null == (a = e.meta) ||
                                        a.updateFinished(!1);
                            },
                            setAllTracksUnfinished: (t) => {
                                e.allTracksUnfinished = t;
                            },
                            checkAllAlbumTrackFinished: () => {
                                var a, i;
                                e.items
                                    .filter((e) => {
                                        let { type: t, data: a } = e;
                                        return a && t !== b.rU.TEXT;
                                    })
                                    .every((e) => {
                                        var t;
                                        let { data: a } = e;
                                        return null == a ||
                                            null == (t = a.streamProgress)
                                            ? void 0
                                            : t.hasEverFinished;
                                    }) &&
                                    ((null == (a = e.meta)
                                        ? void 0
                                        : a.listeningFinished) ||
                                        (t.markFinished({
                                            albumId: Number(e.id),
                                        }),
                                        null == (i = e.meta) ||
                                            i.updateFinished(!0)));
                            },
                            markTracksFinished: (t) => {
                                let { withoutTracks: a = [] } = t;
                                e.items.forEach((e) => {
                                    if (e.type === b.rU.TEXT) return;
                                    let { data: t } = e;
                                    if (!(t && a.includes(t.id)))
                                        if (t) {
                                            var i;
                                            null == (i = t.streamProgress) ||
                                                i.updateEverFinished(!0);
                                        } else e.updateEverFinished(!0);
                                });
                            },
                            markFinished: (0, s.L3)(function* (t) {
                                let {
                                    streamsResource: a,
                                    modelActionsLogger: i,
                                } = (0, s._$)(e);
                                try {
                                    return yield a.markAlbumFinished(t);
                                } catch (e) {
                                    return i.error(e), c.T.ERROR;
                                }
                            }),
                            markUnfinished: (0, s.L3)(function* (t) {
                                let {
                                    streamsResource: a,
                                    modelActionsLogger: i,
                                } = (0, s._$)(e);
                                try {
                                    return yield a.markAlbumUnfinished(t);
                                } catch (e) {
                                    return i.error(e), c.T.ERROR;
                                }
                            }),
                            setListeningFinishedStatus: (0, s.L3)(function* () {
                                var a;
                                return (
                                    null == (a = e.meta)
                                        ? void 0
                                        : a.listeningFinished
                                )
                                    ? (t.setAllTracksUnfinished(!0),
                                      yield t.markUnfinished({
                                          albumId: Number(e.id),
                                      }))
                                    : yield t.markFinished({
                                          albumId: Number(e.id),
                                      });
                            }),
                            getLatestGenreAlbums: (0, s.L3)(function* (t) {
                                let { topResource: a, modelActionsLogger: i } =
                                    (0, s._$)(e);
                                if (
                                    e.latestGenreAlbums &&
                                    !e.latestGenreAlbums.isLoading
                                )
                                    try {
                                        e.latestGenreAlbums.loadingState =
                                            l.GuX.PENDING;
                                        let i = yield a.getTopByGenre(t);
                                        (e.latestGenreAlbums.items = (0, s.wg)(
                                            i.albums.map(v.pp),
                                        )),
                                            (e.latestGenreAlbums.loadingState =
                                                l.GuX.RESOLVE);
                                    } catch (t) {
                                        i.error(t),
                                            (e.latestGenreAlbums.loadingState =
                                                l.GuX.REJECT);
                                    }
                            }),
                            getOtherArtistAlbums: (0, s.L3)(function* (t, a) {
                                let {
                                    artistsResource: i,
                                    modelActionsLogger: r,
                                } = (0, s._$)(e);
                                if (
                                    e.otherArtistAlbums &&
                                    !e.otherArtistAlbums.isLoading
                                )
                                    try {
                                        if (!t.artistId) {
                                            e.otherArtistAlbums.loadingState =
                                                l.GuX.REJECT;
                                            return;
                                        }
                                        e.otherArtistAlbums.loadingState =
                                            l.GuX.PENDING;
                                        let r = yield i.getSafeDirectAlbums({
                                            ...t,
                                            artistId: t.artistId,
                                        });
                                        (e.otherArtistAlbums.items = (0, s.wg)(
                                            r.albums
                                                .filter(
                                                    (e) =>
                                                        String(e.id) !==
                                                        String(a),
                                                )
                                                .map(v.pp),
                                        )),
                                            (e.otherArtistAlbums.loadingState =
                                                l.GuX.RESOLVE);
                                    } catch (t) {
                                        r.error(t),
                                            (e.otherArtistAlbums.loadingState =
                                                l.GuX.REJECT);
                                    }
                            }),
                            getTracks: (0, s.L3)(function* (a) {
                                let { trackIds: i } = a,
                                    {
                                        tracksResource: r,
                                        modelActionsLogger: n,
                                    } = (0, s._$)(e);
                                try {
                                    var o;
                                    let a;
                                    if (!(null == (o = e.meta) ? void 0 : o.id))
                                        return;
                                    t.updateVolumeItemsState(i, l.GuX.PENDING);
                                    let s = yield r.getTracksMeta({
                                        trackIds:
                                            ((a = e.meta.id),
                                            i.map((e) =>
                                                "".concat(e, ":").concat(a),
                                            )),
                                        withProgress: !0,
                                    });
                                    t.insertDataToVolumeItems(s);
                                } catch (e) {
                                    n.error(e),
                                        t.updateVolumeItemsState(
                                            i,
                                            l.GuX.REJECT,
                                        );
                                }
                            }),
                            getDonations: (0, s.L3)(function* (t) {
                                let { albumId: a } = t,
                                    { experiments: i } = (0, s.Zn)(e),
                                    {
                                        donationResource: r,
                                        modelActionsLogger: n,
                                    } = (0, s._$)(e);
                                if (
                                    i.checkExperiment(
                                        l.zal.WebNextAlbumDonationButton,
                                        "on",
                                    ) &&
                                    e.donations &&
                                    !e.donations.isLoading
                                )
                                    try {
                                        e.donations.loadingState =
                                            l.GuX.PENDING;
                                        let { donations: t } =
                                            yield r.getAlbumDonations({
                                                albumId: a,
                                            });
                                        t &&
                                            (e.donations.items = (0, s.wg)(
                                                t.map((e) => {
                                                    var t;
                                                    let { data: a } = e;
                                                    return (0, S.GT)({
                                                        url: a.tipUrl,
                                                        goal:
                                                            null == (t = a.goal)
                                                                ? void 0
                                                                : t.title,
                                                        artist: a.artist,
                                                    });
                                                }),
                                            )),
                                            (e.donations.loadingState =
                                                l.GuX.RESOLVE);
                                    } catch (t) {
                                        n.error(t),
                                            (e.donations.loadingState =
                                                l.GuX.REJECT);
                                    }
                            }),
                            getData: (0, s.L3)(function* (a) {
                                let {
                                        albumId: n,
                                        resumeStream: o,
                                        preloadedAlbum: d,
                                        withLatestGenreAlbumsRequest: c = !0,
                                        withOtherArtistAlbumsRequest: y = !0,
                                        sonataState: p,
                                    } = a,
                                    {
                                        albumResource: S,
                                        modelActionsLogger: E,
                                    } = (0, s._$)(e),
                                    { disclaimer: b } = (0, s.Zn)(e);
                                if (
                                    ((e.id = n),
                                    e.loadingState !== l.GuX.PENDING)
                                )
                                    try {
                                        var f, I, k, _, T, C;
                                        let a, E;
                                        e.loadingState = l.GuX.PENDING;
                                        let D = d;
                                        if (
                                            (D ||
                                                (D =
                                                    yield S.getAlbumWithTracksIds(
                                                        {
                                                            albumId: n,
                                                            resumeStream: o,
                                                        },
                                                    )),
                                            (null == D ? void 0 : D.error) ===
                                                "not-found")
                                        ) {
                                            (e.errorStatusCode =
                                                u.X1.NOT_FOUND),
                                                (e.loadingState = l.GuX.REJECT),
                                                e.otherArtistAlbums &&
                                                    (e.otherArtistAlbums.loadingState =
                                                        l.GuX.REJECT),
                                                e.latestGenreAlbums &&
                                                    (e.latestGenreAlbums.loadingState =
                                                        l.GuX.REJECT);
                                            return;
                                        }
                                        if (
                                            null == (f = D.deprecation)
                                                ? void 0
                                                : f.targetAlbumId
                                        ) {
                                            (e.deprecationTargetAlbumId =
                                                D.deprecation.targetAlbumId),
                                                (e.loadingState =
                                                    l.GuX.RESOLVE);
                                            return;
                                        }
                                        let A = (
                                                null != (k = D.disclaimers)
                                                    ? k
                                                    : []
                                            ).includes(g.M.MODAL),
                                            L =
                                                null ==
                                                (I = (0, l.bRW)(
                                                    null != (_ = D.disclaimers)
                                                        ? _
                                                        : [],
                                                    g.M.MODAL,
                                                ))
                                                    ? void 0
                                                    : I[0];
                                        A &&
                                            (yield b.getDisclaimerData({
                                                entityId: n,
                                                entityType:
                                                    D.type === h._.PODCAST
                                                        ? l.nPY.PODCAST
                                                        : l.nPY.ALBUM,
                                                disclaimerId:
                                                    null == L ? void 0 : L.id,
                                            })),
                                            p.setUnloadedEntitiesData(
                                                D.volumes
                                                    .flat()
                                                    .map((e) =>
                                                        (0, P.li)(e.id),
                                                    ),
                                            ),
                                            (e.meta = (0, v.pp)(D)),
                                            (e.labels = (0, s.wg)(D.labels)),
                                            (e.contentWarning = (0, s.wg)(
                                                D.contentWarning,
                                            )),
                                            (e.description = (0, s.wg)(
                                                D.description,
                                            )),
                                            D.duplicates &&
                                                D.duplicates.length > 0 &&
                                                (e.otherAlbumVersions = (0,
                                                s.wg)(
                                                    null == (T = D.duplicates)
                                                        ? void 0
                                                        : T.map(v.pp),
                                                )),
                                            t.makeFlatVolumeItems(D);
                                        let N = [];
                                        for (let t = 0; t < 10; t++) {
                                            let a = e.items[t];
                                            (null == a ? void 0 : a.type) ===
                                                m.S.TRACK &&
                                                N.push(String(a.id));
                                        }
                                        yield t.getTracks({ trackIds: N }),
                                            e.isLatestGenreAlbumsAvailable &&
                                                c &&
                                                (a = t.getLatestGenreAlbums({
                                                    category: i.RECENT_ALBUMS,
                                                    period: r.WEEK,
                                                    pageSize: 8,
                                                    genre: D.genre,
                                                })),
                                            e.isOtherArtistAlbumsAvailable &&
                                                y &&
                                                (E = t.getOtherArtistAlbums(
                                                    {
                                                        artistId: String(
                                                            null ==
                                                                (C =
                                                                    D
                                                                        .artists[0])
                                                                ? void 0
                                                                : C.id,
                                                        ),
                                                        limit: 8,
                                                    },
                                                    n,
                                                )),
                                            yield Promise.allSettled([a, E]),
                                            e.loadingState !== l.GuX.IDLE &&
                                                (e.loadingState =
                                                    l.GuX.RESOLVE);
                                    } catch (t) {
                                        E.error(t),
                                            t instanceof u.GX &&
                                                (e.errorStatusCode =
                                                    t.statusCode),
                                            e.loadingState !== l.GuX.IDLE &&
                                                ((e.loadingState =
                                                    l.GuX.REJECT),
                                                e.otherArtistAlbums &&
                                                    (e.otherArtistAlbums.loadingState =
                                                        l.GuX.REJECT),
                                                e.latestGenreAlbums &&
                                                    (e.latestGenreAlbums.loadingState =
                                                        l.GuX.REJECT));
                                    }
                            }),
                            loadLastEpisodes() {
                                t.getTracks({
                                    trackIds: e.lastEpisodesTrackIds,
                                });
                            },
                            getRelatedContent: (0, s.L3)(function* () {
                                let {
                                    albumResource: t,
                                    modelActionsLogger: a,
                                } = (0, s._$)(e);
                                if (
                                    e.relatedContent &&
                                    !e.relatedContent.isLoading
                                )
                                    try {
                                        var i, r;
                                        if (
                                            !(null == (i = e.meta)
                                                ? void 0
                                                : i.id)
                                        )
                                            return;
                                        e.relatedContent.loadingState =
                                            l.GuX.PENDING;
                                        let a = yield t.getRelatedContent({
                                            albumId: e.meta.id,
                                        });
                                        (e.relatedContent.items = (0, s.wg)(
                                            null == (r = a.blocks)
                                                ? void 0
                                                : r.map(T),
                                        )),
                                            (e.relatedContent.loadingState =
                                                l.GuX.RESOLVE);
                                    } catch (t) {
                                        a.error(t),
                                            (e.relatedContent.loadingState =
                                                l.GuX.REJECT);
                                    }
                            }),
                            reset(t) {
                                var a, i, r, n;
                                let { albumCPA: o } = (0, s.Zn)(e);
                                o.reset(),
                                    t.resetUnloadedEntitiesData(),
                                    (e.id = null),
                                    (e.errorStatusCode = null),
                                    (e.deprecationTargetAlbumId = null),
                                    e.indexItems.clear(),
                                    (e.loadingState = l.GuX.IDLE),
                                    (e.description = ""),
                                    (e.allTracksUnfinished = !1),
                                    null == (a = e.latestGenreAlbums) ||
                                        a.reset(),
                                    null == (i = e.otherArtistAlbums) ||
                                        i.reset(),
                                    null == (r = e.relatedContent) || r.reset(),
                                    null == (n = e.donations) || n.reset(),
                                    e.destroyItems([
                                        e.meta,
                                        e.items,
                                        e.otherAlbumVersions,
                                        e.labels,
                                    ]);
                            },
                        };
                        return t;
                    });
            a(99683);
            var w = a(82358);
            a(47954), a(33801);
            let x = s.gK
                    .compose(
                        s.gK.model("PromoCampaign", {
                            isActive: s.gK.boolean,
                            artistId: s.gK.maybeNull(s.gK.number),
                        }),
                        n.XT,
                    )
                    .views((e) => ({
                        get isPromoCampaignActive() {
                            return e.isResolved && e.isActive;
                        },
                        get isPromoCampaignInactive() {
                            return (
                                e.isRejected || (e.isResolved && !e.isActive)
                            );
                        },
                    }))
                    .actions((e) => ({
                        getData: (0, s.L3)(function* (t) {
                            let { isActive: a, albumId: i, campaignId: r } = t,
                                { promoResource: n, modelActionsLogger: o } =
                                    (0, s._$)(e);
                            if (!e.isLoading)
                                try {
                                    if (
                                        ((e.loadingState = l.GuX.PENDING),
                                        "boolean" == typeof a)
                                    )
                                        if (r) {
                                            let t = yield n.getPromoAlbumInfo({
                                                albumId: i,
                                                campaignId: r,
                                            });
                                            (e.isActive = t.active),
                                                (e.artistId =
                                                    t.artistId || null);
                                        } else e.isActive = a;
                                    else {
                                        let t = yield n.getPromoAlbumInfo({
                                            albumId: i,
                                            campaignId: r,
                                        });
                                        (e.isActive = t.active),
                                            (e.artistId = t.artistId || null);
                                    }
                                    e.loadingState = l.GuX.RESOLVE;
                                } catch (t) {
                                    o.error(t), (e.loadingState = l.GuX.REJECT);
                                }
                        }),
                    })),
                O = R.props({
                    promoCampaign: x,
                    state: P.QQ,
                    donations: s.gK.optional(D, { loadingState: l.GuX.IDLE }),
                })
                    .actions((e) => {
                        let t = {
                            getArtistDonations: (0, s.L3)(function* (t) {
                                let { artistId: a } = t,
                                    { experiments: i } = (0, s.Zn)(e),
                                    {
                                        artistsResource: r,
                                        modelActionsLogger: n,
                                    } = (0, s._$)(e);
                                if (
                                    i.checkExperiment(
                                        l.zal.WebNextAlbumDonationButton,
                                        "on",
                                    ) &&
                                    e.donations &&
                                    !e.donations.isLoading
                                )
                                    try {
                                        e.donations.loadingState =
                                            l.GuX.PENDING;
                                        let { donations: t } =
                                            yield r.getDonation({
                                                artistId: a,
                                            });
                                        t && t.length > 0
                                            ? (e.donations.items = (0, s.wg)(
                                                  t.map((e) => {
                                                      var t;
                                                      let { data: a } = e;
                                                      return (0, S.GT)({
                                                          url: a.tipUrl,
                                                          goal:
                                                              null ==
                                                              (t = a.goal)
                                                                  ? void 0
                                                                  : t.title,
                                                          artist: a.artist,
                                                      });
                                                  }),
                                              ))
                                            : (e.donations.items = (0, s.wg)(
                                                  [],
                                              )),
                                            (e.donations.loadingState =
                                                l.GuX.RESOLVE);
                                    } catch (t) {
                                        n.error(t),
                                            (e.donations.loadingState =
                                                l.GuX.REJECT);
                                    }
                            }),
                            getDataByCampaign: (0, s.L3)(function* (a) {
                                let {
                                    albumId: i,
                                    preloadedAlbum: r,
                                    preloadedCpa: l,
                                    isActive: n,
                                    campaignId: o,
                                } = a;
                                if (
                                    (yield e.promoCampaign.getData({
                                        albumId: i,
                                        isActive: n,
                                        campaignId: o,
                                    }),
                                    e.promoCampaign.isPromoCampaignActive)
                                ) {
                                    let { albumCPA: a } = (0, s.Zn)(e),
                                        n = [
                                            e.getData({
                                                albumId: i,
                                                resumeStream: !1,
                                                preloadedAlbum: r,
                                                withLatestGenreAlbumsRequest:
                                                    !1,
                                                withOtherArtistAlbumsRequest:
                                                    !1,
                                                sonataState: e.state,
                                            }),
                                            a.getCpa({
                                                albumId: i,
                                                preloadedCpa: l,
                                            }),
                                        ];
                                    if (e.promoCampaign.artistId) {
                                        let a = t.getArtistDonations({
                                            artistId: e.promoCampaign.artistId,
                                        });
                                        n.push(a);
                                    }
                                    yield Promise.allSettled(n);
                                }
                            }),
                            sendLikeFeedback: (0, s.L3)(function* (t) {
                                let {
                                    promoResource: a,
                                    modelActionsLogger: i,
                                } = (0, s._$)(e);
                                try {
                                    yield a.sendFeedback(t);
                                } catch (e) {
                                    i.error(e);
                                }
                            }),
                        };
                        return t;
                    })
                    .named("PromoLandingAlbumPage");
        },
        15734: (e, t, a) => {
            "use strict";
            a.d(t, { DesktopPaywallInitializer: () => n });
            var i = a(97531),
                r = a(66268),
                s = a(73437),
                l = a(79169);
            let n = (0, i.PA)(() => {
                let { desktopPaywall: e, user: t } = (0, l.Pjs)(),
                    { isFreemium: a } = (0, l.XCI)(),
                    { shouldShowFamilyInvite: i } = (0, s.hj)();
                (0, r.useEffect)(() => {
                    if ((!t.isAuthorized || a) && !i)
                        return (
                            e.shouldShowOnEnter && e.showPaywall(),
                            e.startCrackdownTimeout(),
                            () => {
                                e.clearCrackdownTimeout();
                            }
                        );
                }, [e, a, i, t.isAuthorized]);
            });
        },
        16967: (e, t, a) => {
            "use strict";
            a.d(t, { CrackdownInitializer: () => n });
            var i = a(97531),
                r = a(79169),
                s = a(5663),
                l = a(85554);
            let n = (0, i.PA)(() => {
                var e;
                let {
                        user: t,
                        modals: { crackdownModal: a },
                        settings: { isMobile: i },
                        experiments: n,
                        sonataState: o,
                        desktopPaywall: d,
                    } = (0, r.Pjs)(),
                    { isFreemium: u } = (0, r.XCI)(),
                    c = t.isAuthorized && u && !i,
                    g =
                        null ==
                        (e = n.getExperiment(r.zal.WebNextCrackdownInterval))
                            ? void 0
                            : e.value.interval;
                (0, l.W)({
                    isEnabled: c,
                    intervalMs: (0, s.P)(g),
                    modal: a,
                    sonataState: o,
                    isPaywallOpen: d.isPaywallOpen,
                });
            });
        },
        17353: (e, t, a) => {
            "use strict";
            a.d(t, { KidsCategoryPage: () => f });
            var i = a(33008),
                r = a(85896),
                s = a(97531),
                l = a(17846),
                n = a(66268),
                o = a(18064),
                d = a(57747),
                u = a(77868),
                c = a(12898),
                g = a(83888),
                h = a(64143),
                m = a(79169),
                y = a(18740),
                p = a(26729),
                v = a.n(p),
                S = a(42314),
                P = a(66342),
                E = a.n(P);
            let b = (0, s.PA)(() => {
                    let { experiments: e } = (0, m.Pjs)(),
                        t = e.checkExperiment(
                            m.zal.WebNextWaveAgentExperiment,
                            "on",
                        ),
                        a = (0, S.L)(() =>
                            t
                                ? (0, i.jsx)(y.OY, {
                                      isShimmerVisible: !0,
                                      isShimmerActive: !0,
                                      isShimmerCentered: !0,
                                  })
                                : (0, i.jsx)(c.Rj, { isActive: !0, length: 4 }),
                        );
                    return (0, i.jsxs)("div", {
                        className: E().root,
                        children: [
                            (0, i.jsx)("div", { children: a }),
                            (0, i.jsx)(y.OY, {
                                isShimmerVisible: !0,
                                isShimmerActive: !0,
                            }),
                            (0, i.jsx)(y.OY, {
                                isShimmerVisible: !0,
                                isShimmerActive: !0,
                            }),
                        ],
                    });
                }),
                f = (0, s.PA)((e) => {
                    let { categoryId: t } = e,
                        { kids: a } = (0, m.Pjs)(),
                        { contentScrollRef: s, setContentScrollRef: p } = (0,
                        m.gKY)(),
                        S = (0, m.W6M)();
                    (0, n.useEffect)(
                        () => () => a.landing.reset(),
                        [a.landing],
                    ),
                        (0, m.Jzs)(a.landing.isResolved),
                        a.landing.isLoadedAndEmpty && (0, l.notFound)();
                    let P = (0, c._9)(a.landing),
                        E = (0, n.useMemo)(
                            () =>
                                a.landing.isLoading || a.landing.isNeededToLoad
                                    ? (0, i.jsx)(b, {})
                                    : (0, i.jsx)(c.EA, {
                                          landing: a.landing,
                                          errorComponent: (0, i.jsx)(g.w, {
                                              className: v().error,
                                              withBackwardControl: !1,
                                          }),
                                      }),
                            [a.landing.loadingState, a.landing],
                        );
                    return (
                        a.landing.isNeededToLoad &&
                            (0, n.use)(
                                a.landing.getChildrenSkeleton({
                                    categoryId: t,
                                }),
                            ),
                        (0, i.jsx)(m.nVz, {
                            pageId: m._Q$.KIDS_CATEGORY,
                            children: (0, i.jsxs)(h.hO, {
                                scrollElement: s,
                                outerTitle: a.landing.title,
                                children: [
                                    (0, i.jsx)(y.Y9, {
                                        variant: y.Vw.TEXT,
                                        withForwardControl: !1,
                                        withBackwardControl: S.canBack,
                                        children: (0, i.jsx)("div", {
                                            className: v().header,
                                            children: (0, i.jsx)(u.Heading, {
                                                variant: "h1",
                                                weight: "bold",
                                                size: "xl",
                                                children: a.landing.title,
                                            }),
                                        }),
                                    }),
                                    (0, i.jsxs)(d.N, {
                                        className: v().root,
                                        containerClassName: v().content,
                                        ref: p,
                                        ...(0, o.Am)(
                                            o.Xk.kids.KIDS_CATEGORY_PAGE,
                                        ),
                                        children: [
                                            (0, i.jsx)("div", {
                                                className: (0, r.$)(
                                                    v().landing,
                                                    {
                                                        [v()
                                                            .landing_onlyWizard]:
                                                            P,
                                                    },
                                                ),
                                                children: E,
                                            }),
                                            (0, i.jsx)(y.A, {
                                                children: (0, i.jsx)(y.wi, {
                                                    className: v().footer,
                                                }),
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                        })
                    );
                });
        },
        17660: (e, t, a) => {
            "use strict";
            a.d(t, {
                jM: () => v.KidsCategoryPage,
                u3: () => S.KidsEditorialAlbumsPage,
                bU: () => P.KidsEditorialPlaylistsPage,
                GY: () => p,
            });
            var i = a(79169),
                r = a(41028),
                s = a(61979),
                l = a(52732),
                n = a(95592),
                o = a(59615);
            let d = r.gK.model("KidsEditorialAlbumItem", {
                    id: r.gK.number,
                    data: r.gK.maybeNull(l.JC),
                }),
                u = r.gK
                    .compose(
                        r.gK.model("KidsEditorialAlbumPage", {
                            errorStatusCode: r.gK.maybe(r.gK.number),
                            title: r.gK.maybeNull(r.gK.string),
                            pager: r.gK.maybeNull(o.jd),
                            albums: r.gK.maybeNull(r.gK.array(d)),
                            alreadyRequestedPages: r.gK.map(r.gK.number),
                            requests: r.gK.maybeNull(r.gK.number),
                        }),
                        o.XT,
                    )
                    .views((e) => {
                        let t = {
                            get isLoading() {
                                return (
                                    e.isNeededToLoad ||
                                    e.loadingState === i.GuX.PENDING
                                );
                            },
                            get isNotFound() {
                                let t =
                                    e.errorStatusCode === s.X1.NOT_FOUND ||
                                    e.errorStatusCode === s.X1.BAD_REQUEST;
                                return e.isRejected && t;
                            },
                            get isSomethingWrong() {
                                return e.isRejected && !t.isNotFound;
                            },
                        };
                        return t;
                    })
                    .actions((e) => {
                        let t = {
                            getAlbums: (0, r.L3)(function* (t) {
                                var a, l, o;
                                let { page: d = 0, pageSize: u = 20 } = t,
                                    {
                                        albumResource: c,
                                        modelActionsLogger: g,
                                    } = (0, r._$)(e);
                                if (
                                    (null == (a = e.albums)
                                        ? void 0
                                        : a.length) &&
                                    !e.alreadyRequestedPages.has("".concat(d))
                                ) {
                                    e.alreadyRequestedPages.set(
                                        "".concat(d),
                                        d,
                                    );
                                    try {
                                        let t = d * u,
                                            a = e.albums
                                                .slice(t, t + u)
                                                .map((e) => e.id),
                                            i = yield c.getAlbums({
                                                albumIds: a,
                                            });
                                        e.requests =
                                            (null != (o = e.requests) ? o : 0) +
                                            1;
                                        let s = {
                                                page: d,
                                                perPage: u,
                                                total:
                                                    null == (l = e.albums)
                                                        ? void 0
                                                        : l.length,
                                            },
                                            g = i.map(n.e7),
                                            h = d * u,
                                            m = 0;
                                        for (let t = h; t < h + u; t++) {
                                            let a = e.albums[t];
                                            g[m] &&
                                                a &&
                                                (a.data = (0, r.wg)(g[m])),
                                                m++;
                                        }
                                        e.pager = s;
                                    } catch (t) {
                                        g.error(t),
                                            t instanceof s.GX &&
                                                (t.statusCode ===
                                                    s.X1.NOT_FOUND ||
                                                    t.statusCode ===
                                                        s.X1.BAD_REQUEST) &&
                                                (e.errorStatusCode =
                                                    s.X1.NOT_FOUND),
                                            e.loadingState !== i.GuX.IDLE &&
                                                (e.loadingState = i.GuX.REJECT);
                                    }
                                }
                            }),
                            getData: (0, r.L3)(function* (a) {
                                let {
                                        id: l,
                                        page: n = 0,
                                        pageSize: o = 20,
                                    } = a,
                                    {
                                        childrenLandingResource: d,
                                        modelActionsLogger: u,
                                    } = (0, r._$)(e);
                                if (e.loadingState !== i.GuX.PENDING)
                                    try {
                                        e.loadingState = i.GuX.PENDING;
                                        let a = yield d.getEditorialAlbum({
                                            id: l,
                                        });
                                        (e.title = a.title),
                                            a.entities &&
                                                a.entities.length > 0 &&
                                                (e.albums = (0, r.wg)(
                                                    a.entities.map((e) =>
                                                        (0, r.wg)({ id: e }),
                                                    ),
                                                )),
                                            e.loadingState !== i.GuX.IDLE &&
                                                (e.loadingState =
                                                    i.GuX.RESOLVE),
                                            yield t.getAlbums({
                                                page: n,
                                                pageSize: o,
                                            });
                                    } catch (t) {
                                        u.error(t),
                                            t instanceof s.GX &&
                                                (t.statusCode ===
                                                    s.X1.NOT_FOUND ||
                                                    t.statusCode ===
                                                        s.X1.BAD_REQUEST) &&
                                                (e.errorStatusCode =
                                                    s.X1.NOT_FOUND),
                                            e.loadingState !== i.GuX.IDLE &&
                                                (e.loadingState = i.GuX.REJECT);
                                    }
                            }),
                            reset() {
                                (e.loadingState = i.GuX.IDLE),
                                    e.alreadyRequestedPages.clear(),
                                    (e.title = null),
                                    (e.albums = null),
                                    (e.requests = null),
                                    (e.pager = null);
                            },
                        };
                        return t;
                    });
            var c = a(45242),
                g = a(25911);
            let h = r.gK.model("KidsEditorialPlaylistItem", {
                    uid: r.gK.number,
                    kind: r.gK.number,
                    data: r.gK.maybeNull(c.IP),
                }),
                m = r.gK
                    .compose(
                        r.gK.model("KidsEditorialPlaylistPage", {
                            errorStatusCode: r.gK.maybe(r.gK.number),
                            title: r.gK.maybeNull(r.gK.string),
                            pager: r.gK.maybeNull(o.jd),
                            playlists: r.gK.maybeNull(r.gK.array(h)),
                            alreadyRequestedPages: r.gK.map(r.gK.number),
                            requests: r.gK.maybeNull(r.gK.number),
                        }),
                        o.XT,
                    )
                    .views((e) => {
                        let t = {
                            get isLoading() {
                                return (
                                    e.isNeededToLoad ||
                                    e.loadingState === i.GuX.PENDING
                                );
                            },
                            get isNotFound() {
                                let t =
                                    e.errorStatusCode === s.X1.NOT_FOUND ||
                                    e.errorStatusCode === s.X1.BAD_REQUEST;
                                return e.isRejected && t;
                            },
                            get isSomethingWrong() {
                                return e.isRejected && !t.isNotFound;
                            },
                        };
                        return t;
                    })
                    .actions((e) => {
                        let t = {
                            getPlaylists: (0, r.L3)(function* (t) {
                                var a, l, n;
                                let { page: o = 0, pageSize: d = 20 } = t,
                                    {
                                        playlistsResource: u,
                                        modelActionsLogger: c,
                                    } = (0, r._$)(e);
                                if (
                                    (null == (a = e.playlists)
                                        ? void 0
                                        : a.length) &&
                                    !e.alreadyRequestedPages.has("".concat(o))
                                ) {
                                    e.alreadyRequestedPages.set(
                                        "".concat(o),
                                        o,
                                    );
                                    try {
                                        let t = o * d,
                                            a = e.playlists.slice(t, t + d),
                                            i = yield u.getPlaylists({
                                                playlistIds: a.map((e) =>
                                                    ""
                                                        .concat(e.uid, ":")
                                                        .concat(e.kind),
                                                ),
                                                resumeStream: !1,
                                            });
                                        e.requests =
                                            (null != (n = e.requests) ? n : 0) +
                                            1;
                                        let s = {
                                                page: o,
                                                perPage: d,
                                                total:
                                                    null == (l = e.playlists)
                                                        ? void 0
                                                        : l.length,
                                            },
                                            c = i.playlists.map(g.jX),
                                            h = o * d,
                                            m = 0;
                                        for (let t = h; t < h + d; t++) {
                                            let a = e.playlists[t];
                                            c[m] &&
                                                a &&
                                                (a.data = (0, r.wg)(c[m])),
                                                m++;
                                        }
                                        e.pager = s;
                                    } catch (t) {
                                        c.error(t),
                                            t instanceof s.GX &&
                                                (t.statusCode ===
                                                    s.X1.NOT_FOUND ||
                                                    t.statusCode ===
                                                        s.X1.BAD_REQUEST) &&
                                                (e.errorStatusCode =
                                                    s.X1.NOT_FOUND),
                                            e.loadingState !== i.GuX.IDLE &&
                                                (e.loadingState = i.GuX.REJECT);
                                    }
                                }
                            }),
                            getData: (0, r.L3)(function* (a) {
                                let {
                                        id: l,
                                        page: n = 0,
                                        pageSize: o = 20,
                                    } = a,
                                    {
                                        childrenLandingResource: d,
                                        modelActionsLogger: u,
                                    } = (0, r._$)(e);
                                if (e.loadingState !== i.GuX.PENDING)
                                    try {
                                        e.loadingState = i.GuX.PENDING;
                                        let a = yield d.getEditorialPlaylist({
                                            id: l,
                                        });
                                        (e.title = a.title),
                                            a.entities &&
                                                a.entities.length > 0 &&
                                                (e.playlists = (0, r.wg)(
                                                    a.entities.map((e) =>
                                                        (0, r.wg)({
                                                            uid: e.uid,
                                                            kind: e.kind,
                                                        }),
                                                    ),
                                                )),
                                            e.loadingState !== i.GuX.IDLE &&
                                                (e.loadingState =
                                                    i.GuX.RESOLVE),
                                            yield t.getPlaylists({
                                                page: n,
                                                pageSize: o,
                                            });
                                    } catch (t) {
                                        u.error(t),
                                            t instanceof s.GX &&
                                                (t.statusCode ===
                                                    s.X1.NOT_FOUND ||
                                                    t.statusCode ===
                                                        s.X1.BAD_REQUEST) &&
                                                (e.errorStatusCode =
                                                    s.X1.NOT_FOUND),
                                            e.loadingState !== i.GuX.IDLE &&
                                                (e.loadingState = i.GuX.REJECT);
                                    }
                            }),
                            reset() {
                                (e.loadingState = i.GuX.IDLE),
                                    e.alreadyRequestedPages.clear(),
                                    (e.title = null),
                                    (e.playlists = null),
                                    (e.requests = null),
                                    (e.pager = null);
                            },
                        };
                        return t;
                    });
            var y = a(12898);
            let p = r.gK.model("KidsPage", {
                landing: y.Ju,
                kidsEditorialPlaylistSubpage: m,
                kidsEditorialAlbumSubpage: u,
            });
            var v = a(17353),
                S = a(11463),
                P = a(90157);
            a(84031), a(29601);
        },
        18998: (e) => {
            e.exports = {
                root: "ConcertPage_root__pqTvU",
                averageColorBackground:
                    "ConcertPage_averageColorBackground__wj67a",
                header: "ConcertPage_header__FxHk1",
                container: "ConcertPage_container__ca9h4",
                footer: "ConcertPage_footer____Dnb",
                skeleton: "ConcertPage_skeleton__8aWkf",
                error: "ConcertPage_error__gcEp_",
            };
        },
        21934: (e, t, a) => {
            "use strict";
            a.d(t, { PromoLandingShortcutsProvider: () => d });
            var i = a(33008),
                r = a(97531),
                s = a(66268),
                l = a(79169),
                n = a(87145);
            let o = null,
                d = (0, r.PA)((e) => {
                    let { children: t } = e,
                        {
                            promolanding: { state: a },
                        } = (0, l.Pjs)(),
                        r = (0, s.useMemo)(
                            () => (o || (o = new l.G8o(new l.z$B())), o),
                            [],
                        );
                    return (
                        (0, n.E)({
                            controller: r,
                            sonataState: a,
                            playbackId: l.V_r.PROMO_LANDING,
                            groupId: l.Mo.PROMO_LANDING,
                        }),
                        (0, s.useEffect)(
                            () => (
                                null == r || r.listen(),
                                () => {
                                    null == r || r.stopListening();
                                }
                            ),
                            [r],
                        ),
                        (0, i.jsx)(l.Pic.Provider, { value: r, children: t })
                    );
                });
        },
        22745: (e, t, a) => {
            "use strict";
            a.d(t, { PromoLandingCrackdownInitializer: () => n });
            var i = a(97531),
                r = a(79169),
                s = a(5663),
                l = a(85554);
            let n = (0, i.PA)(() => {
                var e;
                let {
                        modals: {
                            crackdownModal: t,
                            promoLandingBuySubscriptionModal: a,
                        },
                        settings: { isMobile: i },
                        experiments: n,
                        promolanding: { state: o },
                    } = (0, r.Pjs)(),
                    { isFreemium: d } = (0, r.XCI)(),
                    u = d && n.checkExperiment(r.zal.WebNextPromoLanding, "on"),
                    c =
                        null ==
                        (e = n.getExperiment(
                            r.zal.WebNextPromoLandingCrackdownInterval,
                        ))
                            ? void 0
                            : e.value.interval;
                (0, l.W)({
                    isEnabled: u,
                    intervalMs: (0, s.P)(c),
                    modal: i ? a : t,
                    playbackId: r.V_r.PROMO_LANDING,
                    sonataState: o,
                });
            });
        },
        23031: (e, t, a) => {
            "use strict";
            a.d(t, { G4: () => n.Genre, Gc: () => l, kc: () => r });
            var i = a(41028);
            let r = (e) => ({
                    tag: e.tag,
                    title: e.title,
                    subGenres: (0, i.wg)(
                        (e.leaves || []).map((e) => ({
                            tag: e.tag,
                            title: e.title,
                        })),
                    ),
                }),
                s = i.gK.model("GenreListItemSubGenreModel", {
                    tag: i.gK.string,
                    title: i.gK.string,
                }),
                l = i.gK.model("GenreListItemModel", {
                    tag: i.gK.string,
                    title: i.gK.string,
                    subGenres: i.gK.array(s),
                });
            var n = a(23663);
        },
        23663: (e, t, a) => {
            "use strict";
            a.d(t, { Genre: () => d });
            var i = a(33008),
                r = a(97531),
                s = a(77868),
                l = a(18740),
                n = a(83673),
                o = a.n(n);
            let d = (0, r.PA)((e) => {
                let { tag: t, title: a, subGenres: r } = e;
                return (0, i.jsxs)("div", {
                    className: o().root,
                    children: [
                        (0, i.jsx)(l.N_, {
                            className: o().link,
                            href: "/genre/".concat(t),
                            children: (0, i.jsx)(s.Heading, {
                                variant: "h2",
                                size: "m",
                                lineClamp: 1,
                                className: o().linkTitle,
                                children: a,
                            }),
                        }),
                        r.length > 0 &&
                            (0, i.jsx)("div", {
                                className: o().list,
                                children: r.map((e) =>
                                    (0, i.jsx)(
                                        "div",
                                        {
                                            className: o().item,
                                            children: (0, i.jsx)(l.N_, {
                                                className: o().link,
                                                href: "/genre/".concat(e.tag),
                                                children: (0, i.jsx)(
                                                    s.Caption,
                                                    {
                                                        variant: "span",
                                                        size: "l",
                                                        lineClamp: 1,
                                                        className:
                                                            o().linkTitle,
                                                        children: e.title,
                                                    },
                                                ),
                                            }),
                                        },
                                        e.tag,
                                    ),
                                ),
                            }),
                    ],
                });
            });
        },
        23724: (e) => {
            e.exports = {
                root: "PostShimmer_root__MlLkY",
                top: "PostShimmer_top__ySpmZ",
                bottom: "PostShimmer_bottom__ajW_P",
            };
        },
        24147: (e) => {
            e.exports = {
                root: "KidsEditorialAlbumsPage_root__7rHF8",
                scrollContainer:
                    "KidsEditorialAlbumsPage_scrollContainer__nQVlt",
                important: "KidsEditorialAlbumsPage_important__hmmxn",
                footer: "KidsEditorialAlbumsPage_footer__6rwU1",
                item: "KidsEditorialAlbumsPage_item__Wc243",
                content: "KidsEditorialAlbumsPage_content__u3zcW",
            };
        },
        25757: (e, t, a) => {
            "use strict";
            a.d(t, { FamilyInviteInitializer: () => n });
            var i = a(97531),
                r = a(66268),
                s = a(73437),
                l = a(79169);
            let n = (0, i.PA)(() => {
                let e = (0, s.hj)(),
                    {
                        user: t,
                        familyInvite: { start: a },
                    } = (0, l.Pjs)();
                (0, r.useEffect)(() => {
                    e.shouldShowFamilyInvite &&
                        e.inviteId &&
                        (t.isAuthorized && e.clear(), a(e.inviteId));
                }, [t.isAuthorized, e, a]);
            });
        },
        26729: (e) => {
            e.exports = {
                root: "KidsCategoryPage_root__bk7_R",
                content: "KidsCategoryPage_content__LN0NB",
                header: "KidsCategoryPage_header__Agys3",
                landing: "KidsCategoryPage_landing__aSDYw",
                landing_onlyWizard:
                    "KidsCategoryPage_landing_onlyWizard__3EC9N",
                footer: "KidsCategoryPage_footer__BQhqi",
                error: "KidsCategoryPage_error__tSXF7",
            };
        },
        27742: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { HistoryProvider: () => d });
            var i = a(33008),
                r = a(17846),
                s = a(66268),
                l = a(42213),
                n = a(79169);
            let o = null,
                d = (e) => {
                    let { children: t } = e,
                        a = (0, n.NFA)(),
                        d = (0, r.useRouter)(),
                        u = (0, r.usePathname)(),
                        c = (0, r.useSearchParams)(),
                        [g, h] = (0, s.useState)(!1),
                        [m, y] = (0, s.useState)(!1),
                        [p, v] = (0, s.useState)(null),
                        S = (0, s.useRef)(0),
                        P = (0, s.useRef)(null),
                        E = (0, s.useMemo)(() => {
                            if (o) return o;
                            let e = a.get(n.vHc);
                            return (o = new n.fiH(e));
                        }, [a]),
                        b = (0, l.c)(() => {
                            E && (h(E.canBack), y(E.canForward), v(E.state));
                        }),
                        f = (0, l.c)((e) => {
                            E && (E.replaceState(e), d.replace(e.href));
                        }),
                        I = (0, l.c)((e) => {
                            E && (E.pushState(e), b());
                        }),
                        k = (0, l.c)(() => {
                            E && (E.back(), b(), d.back());
                        }),
                        _ = (0, l.c)(() => {
                            E && (E.forward(), b(), d.forward());
                        });
                    (0, s.useEffect)(() => {
                        var e;
                        let t = [u, c.toString()].join("?");
                        (!(null == E ? void 0 : E.state) ||
                            (null == E || null == (e = E.state)
                                ? void 0
                                : e.isLocationNotEqual(t))) &&
                            I({ href: t });
                    }, [E, u, c, I]);
                    {
                        let e = (0, n.Cvn)(u, c);
                        e !== P.current &&
                            ((P.current = e), (S.current = S.current + 1));
                    }
                    return (0, i.jsx)(n.Q0U.Provider, {
                        value: {
                            pushState: I,
                            replaceState: f,
                            canForward: m,
                            canBack: g,
                            back: k,
                            forward: _,
                            state: p,
                            length: S.current,
                        },
                        children: t,
                    });
                };
        },
        28430: (e) => {
            e.exports = {
                root: "MyMusicDownloadedTracksPage_root__hZZwz",
                important: "MyMusicDownloadedTracksPage_important__QP_t0",
                pageContainer:
                    "MyMusicDownloadedTracksPage_pageContainer__qu3hF",
                footer: "MyMusicDownloadedTracksPage_footer__KI5OP",
                content: "MyMusicDownloadedTracksPage_content__Iz1WY",
                trackShimmer: "MyMusicDownloadedTracksPage_trackShimmer__MZgW3",
            };
        },
        29601: (e, t, a) => {
            "use strict";
            a.d(t, { KidsPage: () => E });
            var i = a(33008),
                r = a(85896),
                s = a(97531),
                l = a(66268),
                n = a(73827),
                o = a(96560),
                d = a(18064),
                u = a(43836),
                c = a(57747),
                g = a(77868),
                h = a(12898),
                m = a(83888),
                y = a(64143),
                p = a(79169),
                v = a(18740),
                S = a(91173),
                P = a.n(S);
            let E = (0, s.PA)(() => {
                let { kids: e, user: t } = (0, p.Pjs)(),
                    { formatMessage: a } = (0, n.A)(),
                    { contentScrollRef: s, setContentScrollRef: S } = (0,
                    p.gKY)();
                (0, l.useEffect)(() => () => e.landing.reset(), [e.landing]),
                    (0, p.Jzs)(e.landing.isResolved);
                let E = (0, h._9)(e.landing);
                return (
                    e.landing.isNeededToLoad &&
                        (0, l.use)(
                            e.landing.getSkeleton(
                                {
                                    id: u.p.KIDS,
                                    showWizard: t.settings.showWizard,
                                },
                                { preloadBlocksCount: 2 },
                            ),
                        ),
                    (0, i.jsx)(p.nVz, {
                        pageId: p._Q$.KIDS,
                        children: (0, i.jsxs)(y.hO, {
                            scrollElement: s,
                            outerTitle: a({ id: "kids.for-kids" }),
                            children: [
                                (0, i.jsx)(v.Y9, {
                                    variant: v.Vw.TEXT,
                                    showControls: !1,
                                    children: (0, i.jsx)("div", {
                                        className: P().header,
                                        children: (0, i.jsx)(g.Heading, {
                                            variant: "h1",
                                            weight: "bold",
                                            size: "xl",
                                            children: (0, i.jsx)(o.A, {
                                                id: "kids.for-kids",
                                            }),
                                        }),
                                    }),
                                }),
                                (0, i.jsxs)(c.N, {
                                    className: P().root,
                                    containerClassName: P().content,
                                    ref: S,
                                    ...(0, d.Am)(d.Xk.kids.KIDS_PAGE),
                                    children: [
                                        (0, i.jsx)("div", {
                                            className: (0, r.$)(P().landing, {
                                                [P().landing_onlyWizard]: E,
                                            }),
                                            children: (0, i.jsx)(h.EA, {
                                                landing: e.landing,
                                                errorComponent: (0, i.jsx)(
                                                    m.w,
                                                    {
                                                        className: P().error,
                                                        withBackwardControl: !1,
                                                    },
                                                ),
                                            }),
                                        }),
                                        (0, i.jsx)(v.A, {
                                            children: (0, i.jsx)(v.wi, {
                                                className: P().footer,
                                            }),
                                        }),
                                    ],
                                }),
                            ],
                        }),
                    })
                );
            });
        },
        31610: (e) => {
            e.exports = { root: "MyMusicDownloadedTracksInfo_root__yIYHx" };
        },
        33727: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { ContainerProvider: () => u });
            var i = a(33008),
                r = a(66268),
                s = a(79169),
                l = a(18740);
            let n = null,
                o = async (e) => {
                    let {
                            userAgent: t,
                            hostTld: a,
                            forwardedForY: i,
                            changeLanguageToken: r,
                            tracestate: l,
                            traceparent: n,
                            icookie: o,
                            serverDetectedLocale: d,
                            env: u,
                            browserName: c,
                            browserVersion: g,
                            executionContextStore: h,
                        } = e,
                        m = await (0, s.MyF)({
                            userAgent: t,
                            tld: a,
                            forwardedForY: i,
                            changeLanguageToken: r,
                            tracestate: l,
                            traceparent: n,
                            icookie: o,
                            serverDetectedLocale: d,
                            env: u,
                            browserName: c,
                            browserVersion: g,
                            executionContextStore: h,
                        });
                    return await m.get(s.Xc9).loadDictionary(), m;
                },
                d = (e) => {
                    let { children: t, containerLoader: a } = e;
                    return (
                        n || (n = (0, r.use)(a)),
                        (0, i.jsx)(s.Bz0.Provider, { value: n, children: t })
                    );
                },
                u = (e) => {
                    let {
                            children: t,
                            hostTld: a,
                            env: s,
                            forwardedForY: n,
                            tracestate: u,
                            traceparent: c,
                            icookie: g,
                            changeLanguageToken: h,
                            serverDetectedLocale: m,
                            userAgent: y,
                            browserName: p,
                            browserVersion: v,
                            executionContextStore: S,
                        } = e,
                        P = o({
                            userAgent: y,
                            hostTld: a,
                            forwardedForY: n,
                            changeLanguageToken: h,
                            tracestate: u,
                            traceparent: c,
                            icookie: g,
                            serverDetectedLocale: m,
                            env: s,
                            browserName: p,
                            browserVersion: v,
                            executionContextStore: S,
                        });
                    return (0, i.jsx)(r.Suspense, {
                        fallback: (0, i.jsx)(l.JR, {}),
                        children: (0, i.jsx)(d, {
                            containerLoader: P,
                            children: t,
                        }),
                    });
                };
        },
        35050: (e) => {
            e.exports = {
                root: "TagPage_root__EWN9A",
                scrollContainer: "TagPage_scrollContainer__lvG_1",
                important: "TagPage_important__Jq37E",
                content: "TagPage_content__rUC_l",
                footer: "TagPage_footer__W0mZr",
                item: "TagPage_item__X_lW7",
            };
        },
        36442: (e) => {
            e.exports = {
                root: "MyMusicDownloadedTracksPageHeader_root__2vfuc",
                container: "MyMusicDownloadedTracksPageHeader_container__hQ_wt",
                title: "MyMusicDownloadedTracksPageHeader_title__Ncn5X",
                stickyTitle:
                    "MyMusicDownloadedTracksPageHeader_stickyTitle__Efl0U",
                playButton:
                    "MyMusicDownloadedTracksPageHeader_playButton__seWgC",
                stickyPlayButton:
                    "MyMusicDownloadedTracksPageHeader_stickyPlayButton__JVicd",
                titleContainer:
                    "MyMusicDownloadedTracksPageHeader_titleContainer__rLAkS",
                staticHeader:
                    "MyMusicDownloadedTracksPageHeader_staticHeader__LSVC8",
                important: "MyMusicDownloadedTracksPageHeader_important__JIubq",
                stickyHeader:
                    "MyMusicDownloadedTracksPageHeader_stickyHeader__MuQh4",
            };
        },
        36800: (e, t, a) => {
            "use strict";
            a.d(t, { EX: () => h.PostPage, VQ: () => g });
            var i = a(41028),
                r = a(61979),
                s = a(60411),
                l = a(52732),
                n = a(45242),
                o = a(70879),
                d = a(25911),
                u = a(79169),
                c = a(59615);
            let g = i.gK
                .compose(
                    i.gK.model("PostPage", {
                        errorStatusCode: i.gK.maybe(i.gK.number),
                        title: i.gK.maybeNull(i.gK.string),
                        promotionType: i.gK.maybeNull(
                            i.gK.enumeration(Object.values(s.Q)),
                        ),
                        artists: i.gK.maybe(i.gK.array(o.PK)),
                        albums: i.gK.maybe(i.gK.array(l.JC)),
                        playlists: i.gK.maybe(i.gK.array(n.IP)),
                    }),
                    c.XT,
                )
                .views((e) => {
                    let t = {
                        get isLoading() {
                            return (
                                e.isNeededToLoad ||
                                e.loadingState === u.GuX.PENDING
                            );
                        },
                        get isNotFound() {
                            let t =
                                e.errorStatusCode === r.X1.NOT_FOUND ||
                                e.errorStatusCode === r.X1.BAD_REQUEST;
                            return e.isRejected && t;
                        },
                        get isSomethingWrong() {
                            return e.isRejected && !t.isNotFound;
                        },
                    };
                    return t;
                })
                .actions((e) => ({
                    getData: (0, i.L3)(function* (t) {
                        let { promoId: a } = t,
                            { feedResource: s, modelActionsLogger: n } = (0,
                            i._$)(e);
                        if (e.loadingState !== u.GuX.PENDING)
                            try {
                                e.loadingState = u.GuX.PENDING;
                                let t = yield s.getPromotionsById({
                                    promoId: a,
                                });
                                (e.title = t.title),
                                    (e.promotionType = t.promotionType),
                                    t.artists &&
                                        t.artists.length > 0 &&
                                        (e.artists = (0, i.wg)(
                                            t.artists.map(o.dM),
                                        )),
                                    t.albums &&
                                        t.albums.length > 0 &&
                                        (e.albums = (0, i.wg)(
                                            t.albums.map(l.pp),
                                        )),
                                    t.playlists &&
                                        t.playlists.length > 0 &&
                                        (e.playlists = (0, i.wg)(
                                            t.playlists.map((e) => {
                                                let { playlist: t } = e;
                                                return (0, d.jX)(t);
                                            }),
                                        )),
                                    e.loadingState !== u.GuX.IDLE &&
                                        (e.loadingState = u.GuX.RESOLVE);
                            } catch (t) {
                                n.error(t),
                                    t instanceof r.GX &&
                                        (t.statusCode === r.X1.NOT_FOUND ||
                                            t.statusCode ===
                                                r.X1.BAD_REQUEST) &&
                                        (e.errorStatusCode = r.X1.NOT_FOUND),
                                    e.loadingState !== u.GuX.IDLE &&
                                        (e.loadingState = u.GuX.REJECT);
                            }
                    }),
                    reset() {
                        (e.loadingState = u.GuX.IDLE),
                            (e.title = null),
                            (e.artists = (0, i.wg)([])),
                            (e.albums = (0, i.wg)([]));
                    },
                }));
            a(75926);
            var h = a(69686);
        },
        38261: (e, t, a) => {
            "use strict";
            a.d(t, { u: () => i });
            var i = (function (e) {
                return (
                    (e.FILE_TOO_LARGE = "FILE_TOO_LARGE"),
                    (e.TOO_MANY_FILES = "TOO_MANY_FILES"),
                    (e.UNKNOWN_ERROR = "UNKNOWN_ERROR"),
                    (e.SUCCESS = "SUCCESS"),
                    e
                );
            })({});
        },
        38298: (e, t, a) => {
            "use strict";
            a.d(t, { ServiceWorkerInitialiazer: () => s });
            var i = a(66268),
                r = a(79169);
            let s = () => {
                let e = (0, r.NFA)().get(r.Zft);
                (0, i.useEffect)(() => {
                    "serviceWorker" in navigator &&
                        navigator.serviceWorker.addEventListener(
                            "message",
                            (t) => {
                                var a, i, r, s, l;
                                if (
                                    (null == (a = t.data) ? void 0 : a.type) ===
                                    "PUT_RSC_WORKER_ERROR_MESSAGE_TYPE"
                                ) {
                                    let a = new URL(
                                        null == (r = t.data) ||
                                        null == (i = r.payload)
                                            ? void 0
                                            : i.url,
                                    );
                                    e.error(
                                        "[RSC worker] Error getting url "
                                            .concat(a.origin, " ")
                                            .concat(a.pathname)
                                            .concat(a.search, ", reason: ")
                                            .concat(
                                                null == (l = t.data) ||
                                                    null == (s = l.payload)
                                                    ? void 0
                                                    : s.error,
                                            ),
                                    );
                                }
                            },
                        );
                }, [e]);
            };
        },
        39959: (e, t, a) => {
            "use strict";
            a.d(t, { MyMusicDownloadedTracksPage: () => R });
            var i = a(33008),
                r = a(85896),
                s = a(97531),
                l = a(66268),
                n = a(73827),
                o = a(18064),
                d = a(48509),
                u = a(42213),
                c = a(47416),
                g = a(83888),
                h = a(64143),
                m = a(44078),
                y = a(79169),
                p = a(18740),
                v = a(28430),
                S = a.n(v),
                P = a(96560),
                E = a(78016),
                b = a(77868),
                f = a(31610),
                I = a.n(f);
            let k = (0, s.PA)(() => {
                var e;
                let {
                        myMusic: { downloadedTracks: t },
                    } = (0, y.Pjs)(),
                    a = (0, i.jsx)(b.Caption, {
                        variant: "span",
                        size: "s",
                        weight: "medium",
                        "aria-hidden": !0,
                        children: "•",
                    }),
                    r = [];
                (null == (e = t.tracks) ? void 0 : e.length) &&
                    r.push(
                        (0, i.jsx)(b.Caption, {
                            variant: "span",
                            size: "s",
                            weight: "medium",
                            lineClamp: 1,
                            children: (0, i.jsx)(P.A, {
                                id: "entity-names.tracks-count",
                                values: { value: t.tracks.length },
                            }),
                        }),
                    );
                let s = Math.floor(t.tracksDurationInMinutes / 60),
                    n = Math.floor(t.tracksDurationInMinutes % 60);
                return (
                    (s || n) &&
                        (r.push(a),
                        r.push(
                            (0, i.jsx)(b.Caption, {
                                variant: "span",
                                size: "s",
                                weight: "medium",
                                children: (0, i.jsx)(P.A, {
                                    id: "time.hours-minutes",
                                    values: { hours: s, minutes: n },
                                }),
                            }),
                        )),
                    (0, i.jsx)("div", {
                        className: I().root,
                        children: r.map((e, t) =>
                            (0, l.cloneElement)(e, { key: t }),
                        ),
                    })
                );
            });
            var _ = a(36442),
                T = a.n(_);
            let C = (0, s.PA)(() => {
                let { isScrolling: e } = (0, l.useContext)(p.B9),
                    t = (0, y.W6M)(),
                    {
                        myMusic: { downloadedTracks: a },
                        settings: { isMobile: r },
                        slam: s,
                    } = (0, y.Pjs)(),
                    { from: n } = (0, y.fyy)({
                        pageId: y._Q$.OWN_TRACKS,
                        blockId: y.UfI.TRACK_LIST,
                    }),
                    o = (0, y.PT7)(),
                    c = (0, y.brA)(),
                    { isPlaying: g, togglePlay: h } = (0, y.Dx4)({
                        playContextParams: {
                            contextData: {
                                type: d.K.Various,
                                meta: { id: y._Q$.DOWNLOADS_TRACKS },
                                from: n,
                            },
                            entitiesData: a.entitiesData,
                            loadContextMeta: !1,
                        },
                    }),
                    m = (0, u.c)(() => {
                        o() || (h(), c(!g));
                    });
                return (0, i.jsx)("header", {
                    className: T().root,
                    "aria-hidden": e,
                    children: (0, i.jsxs)("div", {
                        className: T().container,
                        children: [
                            !s.isOfflineModeEnabled &&
                                t.canBack &&
                                (0, i.jsx)(p.Lh, {
                                    withForwardControl: !1,
                                    withBackwardControl: t.canBack,
                                    shouldFocusOnMount: !e,
                                    buttonSize: "xxs",
                                }),
                            (0, i.jsxs)("div", {
                                className: T().titleContainer,
                                children: [
                                    (0, i.jsx)(b.Heading, {
                                        variant: "h1",
                                        weight: "bold",
                                        size: "xs",
                                        lineClamp: 1,
                                        className: T().title,
                                        children: (0, i.jsx)(P.A, {
                                            id: "offline.downloaded-tracks",
                                        }),
                                    }),
                                    (0, i.jsx)(k, {}),
                                ],
                            }),
                            !a.isEmpty &&
                                (0, i.jsx)(p.DM, {
                                    withRipple: !0,
                                    buttonVariant: "default",
                                    radius: "xxxl",
                                    size: "s",
                                    color: "primary",
                                    iconSize: "xxs",
                                    isPlaying: g,
                                    onClick: m,
                                    className: T().playButton,
                                    ariaHidden: e,
                                    tabIndex: e ? -1 : 0,
                                    children:
                                        !r &&
                                        (0, i.jsx)(P.A, {
                                            id: "player-actions.listen",
                                        }),
                                }),
                        ],
                    }),
                });
            });
            var D = a(11856),
                A = a.n(D);
            let L = (0, s.PA)(() =>
                    (0, i.jsxs)(i.Fragment, {
                        children: [
                            (0, i.jsx)(C, {}),
                            (0, i.jsxs)("div", {
                                className: A().root,
                                children: [
                                    (0, i.jsx)(E.Icon, {
                                        className: A().icon,
                                        size: "l",
                                        variant: "download",
                                    }),
                                    (0, i.jsx)(b.Heading, {
                                        className: A().title,
                                        variant: "div",
                                        size: "xs",
                                        children: (0, i.jsx)(P.A, {
                                            id: "offline.downloaded-empty",
                                        }),
                                    }),
                                    (0, i.jsx)(b.Caption, {
                                        className: A().text,
                                        variant: "span",
                                        type: "controls",
                                        size: "l",
                                        weight: "normal",
                                        children: (0, i.jsx)(P.A, {
                                            id: "offline.download-for-offline",
                                        }),
                                    }),
                                ],
                            }),
                        ],
                    }),
                ),
                N = (0, s.PA)(() => {
                    let { isScrolling: e } = (0, l.useContext)(p.B9),
                        t = (0, y.W6M)(),
                        {
                            myMusic: { downloadedTracks: a },
                            settings: { isMobile: s },
                            slam: n,
                        } = (0, y.Pjs)(),
                        { from: o } = (0, y.fyy)({
                            pageId: y._Q$.OWN_TRACKS,
                            blockId: y.UfI.TRACK_LIST,
                        }),
                        c = (0, y.brA)(),
                        g = (0, y.PT7)(),
                        { isPlaying: h, togglePlay: m } = (0, y.Dx4)({
                            playContextParams: {
                                contextData: {
                                    type: d.K.Various,
                                    meta: { id: y._Q$.DOWNLOADS_TRACKS },
                                    from: o,
                                },
                                entitiesData: a.entitiesData,
                                loadContextMeta: !1,
                            },
                        }),
                        v = (0, u.c)(() => {
                            g() || (m(), c(!h));
                        });
                    return (0, i.jsx)(p.Y9, {
                        variant: p.Vw.COMPOSITE,
                        "aria-hidden": !e,
                        stickyChild: (0, i.jsxs)("div", {
                            className: T().container,
                            children: [
                                !n.isOfflineModeEnabled &&
                                    t.canBack &&
                                    (0, i.jsx)(p.Lh, {
                                        withForwardControl: !1,
                                        withBackwardControl: t.canBack,
                                        shouldFocusOnMount: !1,
                                        buttonSize: "xxs",
                                    }),
                                (0, i.jsx)(b.Heading, {
                                    variant: "h1",
                                    weight: "bold",
                                    size: "xs",
                                    lineClamp: 1,
                                    className: T().stickyTitle,
                                    children: (0, i.jsx)(P.A, {
                                        id: "offline.downloaded-tracks",
                                    }),
                                }),
                                !a.isEmpty &&
                                    (0, i.jsx)(p.DM, {
                                        withRipple: !0,
                                        buttonVariant: "default",
                                        radius: "xxxl",
                                        size: "s",
                                        color: "primary",
                                        iconSize: "xxs",
                                        isPlaying: h,
                                        onClick: v,
                                        className: (0, r.$)(T().playButton, {
                                            [T().stickyPlayButton]: !s,
                                        }),
                                        ariaHidden: !e,
                                        tabIndex: e ? 0 : -1,
                                        children:
                                            !s &&
                                            (0, i.jsx)(P.A, {
                                                id: "player-actions.listen",
                                            }),
                                    }),
                            ],
                        }),
                        stickyClassName: (0, r.$)(
                            T().stickyHeader,
                            T().important,
                        ),
                        staticClassName: (0, r.$)(
                            T().staticHeader,
                            T().important,
                        ),
                    });
                }),
                R = (0, s.PA)(() => {
                    var e;
                    let t = (0, y.jRO)(),
                        { contentScrollRef: a, setContentScrollRef: s } = (0,
                        y.gKY)(),
                        { formatMessage: v } = (0, n.A)(),
                        {
                            myMusic: { downloadedTracks: P },
                        } = (0, y.Pjs)(),
                        { from: E } = (0, y.fyy)({
                            pageId: y._Q$.OWN_TRACKS,
                            blockId: y.UfI.TRACK_LIST,
                        }),
                        b = (0, y.wZZ)(),
                        f = (0, u.c)(() => {
                            t.tracksController && P.getData(t.tracksController);
                        });
                    (0, c.L)(f),
                        (0, l.useEffect)(() => {
                            P.isNeededToLoad && f();
                        }, [P.isNeededToLoad, f]),
                        (0, l.useEffect)(
                            () => () => {
                                P.reset();
                            },
                            [P],
                        ),
                        (0, y.Jzs)(P.isResolved);
                    let I = (0, l.useMemo)(
                        () => ({
                            Header: () => (0, i.jsx)(C, {}),
                            Footer: () =>
                                (0, i.jsx)(p.A, {
                                    children: (0, i.jsx)(p.wi, {
                                        className: S().footer,
                                    }),
                                }),
                        }),
                        [],
                    );
                    if (P.loadingState === y.GuX.REJECT)
                        return (0, i.jsx)(g.w, {});
                    if (P.isEmpty) return (0, i.jsx)(L, {});
                    let k = (null == (e = P.items) ? void 0 : e.length) || 10;
                    return (0, i.jsx)(y.nVz, {
                        pageId: y._Q$.DOWNLOADS_TRACKS,
                        children: (0, i.jsx)(h.hO, {
                            scrollElement: a,
                            children: (0, i.jsxs)("div", {
                                className: S().pageContainer,
                                children: [
                                    (0, i.jsx)(N, {}),
                                    (0, i.jsx)(p.$$, {
                                        context: {
                                            listAriaLabel: v({
                                                id: "offline.downloaded-track-list",
                                            }),
                                        },
                                        className: (0, r.$)(
                                            S().root,
                                            S().important,
                                        ),
                                        listClassName: S().content,
                                        customComponents: I,
                                        totalCount: k,
                                        itemContentCallback: (e) => {
                                            var t;
                                            let a =
                                                null == (t = P.items)
                                                    ? void 0
                                                    : t[e];
                                            return a
                                                ? (0, i.jsx)(
                                                      m.Kt,
                                                      {
                                                          track: a,
                                                          playContextParams: b(
                                                              a.id,
                                                              {
                                                                  contextData: {
                                                                      type: d.K
                                                                          .Various,
                                                                      meta: {
                                                                          id: y
                                                                              ._Q$
                                                                              .DOWNLOADS_TRACKS,
                                                                      },
                                                                      from: E,
                                                                  },
                                                                  entitiesData:
                                                                      P.entitiesData,
                                                                  queueParams: {
                                                                      index: e,
                                                                      entityId:
                                                                          a.id,
                                                                  },
                                                                  loadContextMeta:
                                                                      !1,
                                                              },
                                                          ),
                                                      },
                                                      a.id,
                                                  )
                                                : (0, i.jsx)(p.DS, {
                                                      isActive: !0,
                                                      className:
                                                          S().trackShimmer,
                                                      variant: y.Xjt.PLAYLIST,
                                                  });
                                        },
                                        debounceDurationInMs: 300,
                                        initialItemCount: k,
                                        handleRef: s,
                                        shouldTriggerRangeChangedOn: [k],
                                        testId: o.Xk.myMusic
                                            .MY_MUSIC_DOWNLOADED_TRACKS_PAGE,
                                    }),
                                ],
                            }),
                        }),
                    });
                });
        },
        40013: (e) => {
            e.exports = {
                root: "PostPlaylists_root__3tea0",
                content: "PostPlaylists_content__2fXI5",
            };
        },
        40311: (e) => {
            e.exports = { icon: "ConcertNotFoundPage_icon__9yJIB" };
        },
        43459: (e, t, a) => {
            "use strict";
            a.d(t, { l: () => r });
            var i = a(75305);
            function r(e) {
                return (null == e ? void 0 : e.data.type) === i.R.SmartPreview;
            }
        },
        44958: (e, t, a) => {
            "use strict";
            a.d(t, { km: () => y, h4: () => V, cw: () => u, k_: () => q });
            var i = a(79169),
                r = a(41028),
                s = a(12898),
                l = a(51551),
                n = a(59615);
            let o = (e, t, a) => (-1 === a ? e.slice(t) : e.slice(t, t + a)),
                d = r.gK
                    .compose(
                        r.gK.model("ConcertsPageConfig", {
                            topOffset: r.gK.optional(r.gK.number, 0),
                            topLimit: r.gK.optional(r.gK.number, 3),
                            feedOffset: r.gK.optional(r.gK.number, 3),
                            feedLimit: r.gK.optional(r.gK.number, -1),
                        }),
                        n.XT,
                    )
                    .actions((e) => ({
                        getData: (0, r.L3)(function* () {
                            let { concertsResource: t, modelActionsLogger: a } =
                                (0, r._$)(e);
                            if (!e.isLoading)
                                try {
                                    e.loadingState = i.GuX.PENDING;
                                    let {
                                        config: { feed: a, top: r },
                                    } = yield t.getTabConfig({});
                                    (e.feedLimit = a.limit),
                                        (e.feedOffset = a.offset),
                                        (e.topLimit = r.limit),
                                        (e.topOffset = r.offset),
                                        (e.loadingState = i.GuX.RESOLVE);
                                } catch (t) {
                                    a.error(t), (e.loadingState = i.GuX.REJECT);
                                }
                        }),
                        reset() {
                            (e.loadingState = i.GuX.IDLE),
                                (e.feedLimit = -1),
                                (e.feedOffset = 3),
                                (e.topLimit = 3),
                                (e.topOffset = 0);
                        },
                    })),
                u = r.gK
                    .compose(
                        r.gK.model("ConcertsPage", {
                            config: d,
                            landing: s.Ju,
                            topConcerts: r.gK.maybeNull(r.gK.array(l.aR)),
                            feedConcerts: r.gK.maybeNull(r.gK.array(l.aR)),
                        }),
                        n.XT,
                        n.pl,
                    )
                    .views((e) => ({
                        get isShimmerVisible() {
                            return (
                                e.isNeededToLoad || e.isLoading || e.isRejected
                            );
                        },
                        get isShimmerActive() {
                            return e.isLoading;
                        },
                    }))
                    .actions((e) => ({
                        getData: (0, r.L3)(function* () {
                            let { concertsResource: t, modelActionsLogger: a } =
                                (0, r._$)(e);
                            if (!e.config.isLoading && !e.isLoading)
                                try {
                                    (e.loadingState = i.GuX.PENDING),
                                        yield e.config.getData();
                                    let { items: a } = yield t.getFeed({}),
                                        { feedConcerts: s, topConcerts: n } = ((
                                            e,
                                            t,
                                        ) => {
                                            let {
                                                topLimit: a,
                                                topOffset: i,
                                                feedLimit: r,
                                                feedOffset: s,
                                            } = e;
                                            return {
                                                topConcerts: o(t, i, a),
                                                feedConcerts: o(t, s, r),
                                            };
                                        })(
                                            e.config,
                                            a.map((e) =>
                                                (0, l.ho)(
                                                    e.data.concert,
                                                    e.data.minPrice,
                                                ),
                                            ),
                                        );
                                    (e.feedConcerts = (0, r.wg)(s)),
                                        (e.topConcerts = (0, r.wg)(n)),
                                        (e.loadingState = i.GuX.RESOLVE);
                                } catch (t) {
                                    a.error(t), (e.loadingState = i.GuX.REJECT);
                                }
                        }),
                        reset() {
                            e.config.reset(),
                                e.landing.reset(),
                                (e.loadingState = i.GuX.IDLE),
                                e.destroyItems([e.topConcerts, e.feedConcerts]);
                        },
                    }));
            var c = a(33008),
                g = a(97531),
                h = a(66268),
                m = a(35233);
            let y = (0, g.PA)(() => {
                let { concerts: e } = (0, i.Pjs)();
                return (
                    (0, h.useEffect)(
                        () => () => {
                            e.reset();
                        },
                        [e],
                    ),
                    (0, c.jsx)(m.M, {})
                );
            });
            var p = a(17846),
                v = a(73827),
                S = a(96560),
                P = a(54960),
                E = a(93967),
                b = a(43836),
                f = a(57747),
                I = a(77868),
                k = a(42213),
                _ = a(44612),
                T = a(95227),
                C = a(18740),
                D = a(8038),
                A = a.n(D);
            let L = (0, g.PA)(() => {
                let e = (0, h.useId)(),
                    { concerts: t } = (0, i.Pjs)(),
                    { formatMessage: a } = (0, v.A)(),
                    [r, s] = (0, _.d)(),
                    n = (0, i.fBs)(),
                    o = (0, h.useRef)(!1),
                    d = (0, k.c)(() => {
                        var e;
                        return !t.isShimmerVisible &&
                            (null == (e = t.feedConcerts) ? void 0 : e.length)
                            ? t.feedConcerts.length
                            : 50;
                    }),
                    {
                        virtualizer: u,
                        rowResizeObserver: g,
                        columnCount: m,
                        indices: y,
                    } = (0, T.LW)({
                        count: d(),
                        rowGap: 32,
                        columnGap: 16,
                        getEstimateRowSize: () => 371,
                        minColumnCount: 2,
                        minColumnWidth: 170,
                        maxColumnWidth: 227,
                        containerRef: r,
                    }),
                    p = {
                        "--feed-concerts-height": "".concat(
                            u.getTotalSize(),
                            "px",
                        ),
                        "--feed-concerts-column-count": m,
                    },
                    S = (0, h.useCallback)(
                        (e) => {
                            var a, r, s;
                            let n =
                                null == (a = t.feedConcerts) ? void 0 : a[e];
                            return !n || t.isShimmerVisible
                                ? (0, c.jsx)(l.LY, {
                                      isActive: t.isShimmerActive,
                                  })
                                : (0, c.jsx)(i.Bki, {
                                      objectType: E.ky.Concert,
                                      objectId: n.id,
                                      objectPosX: (e % m) + 1,
                                      objectPosY: Math.floor(e / m) + 1,
                                      objectsCount:
                                          null !=
                                          (s =
                                              null == (r = t.feedConcerts)
                                                  ? void 0
                                                  : r.length)
                                              ? s
                                              : 0,
                                      children: (0, c.jsx)(l.Qb, {
                                          concert: n,
                                      }),
                                  });
                        },
                        [
                            m,
                            t.feedConcerts,
                            t.isShimmerActive,
                            t.isShimmerVisible,
                        ],
                    );
                return (
                    (0, h.useEffect)(() => {
                        t.isResolved && !o.current && (n(), (o.current = !0));
                    }, [t.isResolved, n]),
                    (0, c.jsxs)("div", {
                        className: A().root,
                        children: [
                            (0, c.jsx)(C.Tw, {
                                className: A().header,
                                labeledForId: e,
                                title: a({ id: "concerts.all-concerts" }),
                                headingVariant: "h2",
                            }),
                            (0, c.jsx)("div", {
                                "aria-labelledby": e,
                                ref: s,
                                style: p,
                                className: A().container,
                                children: u
                                    .getVirtualItems()
                                    .map((e) =>
                                        (0, c.jsx)(
                                            T.Ux,
                                            {
                                                className: A().row,
                                                columnClassName: A().column,
                                                virtualItem: e,
                                                resizeObserver: g,
                                                indices: y,
                                                renderItemByIndex: S,
                                                scrollMargin:
                                                    u.options.scrollMargin,
                                            },
                                            e.key,
                                        ),
                                    ),
                            }),
                        ],
                    })
                );
            });
            var N = a(85896),
                R = a(95567),
                w = a(59646),
                x = a.n(w);
            let O = (e) => {
                    let { children: t } = e,
                        a = (0, h.useId)(),
                        i = (0, h.useRef)(null),
                        { formatMessage: r } = (0, v.A)();
                    return (0, c.jsxs)("div", {
                        className: x().root,
                        children: [
                            (0, c.jsx)(C.Tw, {
                                className: x().header,
                                labeledForId: a,
                                title: r({ id: "concerts.top-for-you" }),
                                controls: (0, c.jsx)(C.X9, {
                                    className: x().controls,
                                    carouselRef: i,
                                }),
                                headingVariant: "h2",
                            }),
                            (0, c.jsx)(R.Carousel, {
                                className: x().carousel,
                                ref: i,
                                itemClassName: (0, N.$)(
                                    x().item,
                                    x().important,
                                ),
                                "aria-labelledby": a,
                                children: t,
                            }),
                        ],
                    });
                },
                G = (e) =>
                    Array.from({ length: 10 }, (t, a) =>
                        (0, c.jsx)(
                            l.LY,
                            { isActive: e, withPriceButton: !0 },
                            a,
                        ),
                    ),
                M = (0, g.PA)(() => {
                    let { concerts: e } = (0, i.Pjs)(),
                        t = (0, i.fBs)(),
                        a = (0, h.useRef)(!1),
                        r = (0, h.useMemo)(() => {
                            var t;
                            return (null == (t = e.topConcerts)
                                ? void 0
                                : t.length) && !e.isShimmerVisible
                                ? e.topConcerts.map((t, a) => {
                                      var r, s;
                                      return (0, c.jsx)(
                                          i.Bki,
                                          {
                                              objectType: E.ky.Concert,
                                              objectId: t.id,
                                              objectPosX: a + 1,
                                              objectPosY: 1,
                                              objectsCount:
                                                  null !=
                                                  (s =
                                                      null ==
                                                      (r = e.topConcerts)
                                                          ? void 0
                                                          : r.length)
                                                      ? s
                                                      : 0,
                                              children: (0, c.jsx)(l.Qb, {
                                                  withMask: !1,
                                                  withPriceButton: !0,
                                                  concert: t,
                                              }),
                                          },
                                          t.getKey(a),
                                      );
                                  })
                                : G(e.isShimmerActive);
                        }, [
                            e.isShimmerActive,
                            e.isShimmerVisible,
                            e.topConcerts,
                        ]);
                    return (
                        (0, h.useEffect)(() => {
                            e.isResolved &&
                                !a.current &&
                                (t(), (a.current = !0));
                        }, [e.isResolved, t]),
                        e.isNeededToLoad && (0, h.use)(e.getData()),
                        (0, c.jsx)(O, { children: r })
                    );
                }),
                K = () =>
                    (0, c.jsx)(h.Suspense, {
                        fallback: (0, c.jsx)(O, { children: G(!0) }),
                        children: (0, c.jsx)(M, {}),
                    });
            var F = a(83888),
                X = a(64143),
                j = a(48551),
                U = a(94503),
                B = a.n(U);
            let V = (0, g.PA)(() => {
                    var e, t, a, r, l, n, o, d, u;
                    let { formatMessage: g } = (0, v.A)(),
                        { setContentScrollRef: m, contentScrollRef: y } = (0,
                        i.gKY)(),
                        { concerts: _, experiments: T, user: D } = (0, i.Pjs)(),
                        A = (() => {
                            let e = (0, j.st)(),
                                t = (0, i.UlF)(),
                                { hash: a } = (0, j.gf)();
                            return (0, k.c)((i, r) => {
                                if (!e) return;
                                let s = {
                                        hash: a,
                                        pageId: E.QT.ConcertsLandingScreen,
                                        pageStyle: E.QL.Fullscreen,
                                        pagePlacement: E.c4.Fullscreen,
                                        viewUuid: r,
                                    },
                                    l = (0, E.Fx)({
                                        params: s,
                                        logger: t,
                                        context:
                                            "useSendEventOnConcertsOpenedOrClosed",
                                    });
                                l &&
                                    (i
                                        ? (0, E.Fn)(e.evgenInstance, l)
                                        : (0, E.PO)(e.evgenInstance, l));
                            });
                        })(),
                        N = (0, h.useRef)(String((0, P.A)())),
                        R =
                            null !=
                            (n =
                                null == (e = _.landing.meta)
                                    ? void 0
                                    : e.selectedTabIndex)
                                ? n
                                : 0,
                        w =
                            null !=
                            (o =
                                null == (a = _.landing.tabs.data) ||
                                null == (t = a[R])
                                    ? void 0
                                    : t.blocks.length)
                                ? o
                                : 0;
                    return (T.checkExperiment(i.zal.WebNextConcertsTab, "on") ||
                        (0, p.notFound)(),
                    D.hasPlus || (0, p.redirect)(i.Zyd.main.href),
                    (0, h.useEffect)(
                        () => () => {
                            _.reset();
                        },
                        [_],
                    ),
                    (0, h.useEffect)(() => {
                        let e = N.current;
                        return (
                            A(!0, e),
                            () => {
                                A(!1, e);
                            }
                        );
                    }, [A]),
                    (0, i.Jzs)(_.landing.isResolved),
                    (() => {
                        let e = (0, h.useRef)(1),
                            { concerts: t } = (0, i.Pjs)(),
                            { notify: a } = (0, i.lkh)(),
                            { formatMessage: r } = (0, v.A)();
                        (0, h.useEffect)(() => {
                            e &&
                                (t.isRejected &&
                                    a(
                                        (0, c.jsx)(C.hT, {
                                            error: r({
                                                id: "concerts.feed-error",
                                            }),
                                        }),
                                        { containerId: i.uQT.ERROR },
                                    ),
                                e.current--);
                        }, [t.isRejected, r, a]);
                    })(),
                    _.landing.isNeededToLoad &&
                        (0, h.use)(
                            _.landing.getSkeleton(
                                {
                                    id: b.p.CONCERTS,
                                    showWizard: D.settings.showWizard,
                                },
                                { preloadBlocksCount: 2 },
                            ),
                        ),
                    _.landing.isRejected)
                        ? (0, c.jsx)(F.w, {})
                        : (0, c.jsx)(i.nVz, {
                              pageId: i._Q$.CONCERTS,
                              children: (0, c.jsxs)(X.hO, {
                                  scrollElement: y,
                                  outerTitle: g({
                                      id: "entity-names.concerts",
                                  }),
                                  children: [
                                      (0, c.jsx)(C.Y9, {
                                          variant: C.Vw.TEXT,
                                          showControls: !1,
                                          children: (0, c.jsx)(I.Heading, {
                                              variant: "h1",
                                              weight: "bold",
                                              size: "xl",
                                              children: (0, c.jsx)(S.A, {
                                                  id: "entity-names.concerts",
                                              }),
                                          }),
                                      }),
                                      (0, c.jsxs)(f.N, {
                                          ref: m,
                                          className: B().root,
                                          containerClassName: B().container,
                                          children: [
                                              (0, c.jsx)(i.jPc, {
                                                  children: (0, c.jsx)(i.hjC, {
                                                      tabId: "",
                                                      tabPos: 0,
                                                      isTabSelectedByDefault:
                                                          !1,
                                                      children: (0, c.jsx)(
                                                          i.FoH,
                                                          {
                                                              blockId:
                                                                  E.LA
                                                                      .ConcertTabHeader,
                                                              blockType:
                                                                  E.LA
                                                                      .ConcertTabHeader,
                                                              blockPosX: 1,
                                                              blockPosY: 1,
                                                              objectsCount:
                                                                  null !=
                                                                  (d =
                                                                      null ==
                                                                      (r =
                                                                          _.topConcerts)
                                                                          ? void 0
                                                                          : r.length)
                                                                      ? d
                                                                      : 0,
                                                              children: (0,
                                                              c.jsx)(K, {}),
                                                          },
                                                      ),
                                                  }),
                                              }),
                                              (0, c.jsx)(i.MZP, {
                                                  offsetBlockPosY: 1,
                                                  children: (0, c.jsx)(s.EA, {
                                                      landing: _.landing,
                                                      errorComponent: (0,
                                                      c.jsx)(F.w, {
                                                          withBackwardControl:
                                                              !1,
                                                      }),
                                                  }),
                                              }),
                                              (0, c.jsx)(i.jPc, {
                                                  children: (0, c.jsx)(i.hjC, {
                                                      tabId: "",
                                                      tabPos: 0,
                                                      isTabSelectedByDefault:
                                                          !1,
                                                      children: (0, c.jsx)(
                                                          i.FoH,
                                                          {
                                                              blockId:
                                                                  E.LA
                                                                      .ConcertTabFeed,
                                                              blockType:
                                                                  E.LA
                                                                      .ConcertTabFeed,
                                                              blockPosX: 1,
                                                              blockPosY: w + 2,
                                                              objectsCount:
                                                                  null !=
                                                                  (u =
                                                                      null ==
                                                                      (l =
                                                                          _.feedConcerts)
                                                                          ? void 0
                                                                          : l.length)
                                                                      ? u
                                                                      : 0,
                                                              children: (0,
                                                              c.jsx)(L, {}),
                                                          },
                                                      ),
                                                  }),
                                              }),
                                              (0, c.jsx)(C.A, {
                                                  children: (0, c.jsx)(C.wi, {
                                                      className: B().footer,
                                                  }),
                                              }),
                                          ],
                                      }),
                                  ],
                              }),
                          });
                }),
                q = () =>
                    (0, c.jsx)(C.JR, {
                        style: {
                            position: "absolute",
                            background:
                                "var(--ym-background-color-primary-enabled-content)",
                        },
                    });
        },
        45648: (e, t, a) => {
            "use strict";
            a.d(t, { vB: () => g, t6: () => h.ChartPodcastsPage });
            var i = a(79169),
                r = a(41028),
                s = a(61979),
                l = a(52732),
                n = a(59615);
            let o = r.gK
                .compose(
                    r.gK.model("ChartPodcastsPage", {
                        title: r.gK.maybeNull(r.gK.string),
                        items: r.gK.array(l.JC),
                        errorStatusCode: r.gK.maybeNull(r.gK.number),
                    }),
                    n.pl,
                    n.XT,
                )
                .views((e) => {
                    let t = {
                        get isLoading() {
                            return (
                                e.isNeededToLoad ||
                                e.loadingState === i.GuX.PENDING
                            );
                        },
                        get isNotFound() {
                            var a;
                            let t =
                                    e.isResolved &&
                                    !(null == (a = e.items)
                                        ? void 0
                                        : a.length),
                                r =
                                    e.errorStatusCode === s.X1.NOT_FOUND ||
                                    e.errorStatusCode === s.X1.BAD_REQUEST;
                            return (e.loadingState === i.GuX.REJECT && r) || t;
                        },
                        get isSomethingWrong() {
                            return e.isRejected && !t.isNotFound;
                        },
                    };
                    return t;
                })
                .actions((e) => ({
                    getData: (0, r.L3)(function* (t) {
                        let { chartResource: a, modelActionsLogger: n } = (0,
                        r._$)(e);
                        if (e.loadingState !== i.GuX.PENDING)
                            try {
                                let s;
                                (e.loadingState = i.GuX.PENDING),
                                    (e.title = (s = t
                                        ? yield a.getChartPodcastsCategory({
                                              categoryId: t,
                                          })
                                        : yield a.getChartPodcasts()).title),
                                    s.chartPositions &&
                                        (e.items = (0, r.wg)(
                                            s.chartPositions.map((e) =>
                                                (0, l.bl)(
                                                    e.album,
                                                    e.chartPosition,
                                                ),
                                            ),
                                        )),
                                    e.loadingState !== i.GuX.IDLE &&
                                        (e.loadingState = i.GuX.RESOLVE);
                            } catch (t) {
                                n.error(t),
                                    t instanceof s.GX &&
                                        (t.statusCode === s.X1.NOT_FOUND ||
                                            t.statusCode ===
                                                s.X1.BAD_REQUEST) &&
                                        (e.errorStatusCode = s.X1.NOT_FOUND),
                                    e.loadingState !== i.GuX.IDLE &&
                                        (e.loadingState = i.GuX.REJECT);
                            }
                    }),
                    reset() {
                        (e.loadingState = i.GuX.IDLE),
                            (e.title = null),
                            (e.errorStatusCode = null),
                            e.destroyItems([e.items]);
                    },
                }));
            var d = a(44078);
            let u = r.gK.model("ChartPagePlaylistModel", {
                    uuid: r.gK.string,
                    uid: r.gK.number,
                    kind: r.gK.number,
                }),
                c = r.gK
                    .compose(
                        r.gK.model("ChartTracksPage", {
                            title: r.gK.maybeNull(r.gK.string),
                            playlistMeta: r.gK.maybeNull(u),
                            items: r.gK.array(d.vj),
                        }),
                        n.XT,
                    )
                    .views((e) => ({
                        get isLoading() {
                            return (
                                e.isNeededToLoad ||
                                e.loadingState === i.GuX.PENDING
                            );
                        },
                    }))
                    .actions((e) => ({
                        getTracks: (0, r.L3)(function* () {
                            let { landing3Resource: t, modelActionsLogger: a } =
                                (0, r._$)(e);
                            if (e.loadingState !== i.GuX.PENDING)
                                try {
                                    e.loadingState = i.GuX.PENDING;
                                    let a = yield t.getChart();
                                    (e.title = a.chart.title),
                                        (e.playlistMeta = (0, r.wg)({
                                            uuid: a.chart.playlistUuid,
                                            uid: a.chart.uid,
                                            kind: a.chart.kind,
                                        })),
                                        (e.items = (0, r.wg)(
                                            a.chart.tracks.map((e) =>
                                                (0, d.bV)(e.track, e.chart),
                                            ),
                                        )),
                                        e.loadingState !== i.GuX.IDLE &&
                                            (e.loadingState = i.GuX.RESOLVE);
                                } catch (t) {
                                    a.error(t),
                                        e.loadingState !== i.GuX.IDLE &&
                                            (e.loadingState = i.GuX.REJECT);
                                }
                        }),
                    })),
                g = r.gK.model("ChartPageModel", {
                    tracksSubPage: c,
                    podcastsSubPage: o,
                });
            a(60180);
            var h = a(63e3);
            a(67956);
        },
        46052: (e) => {
            e.exports = {
                root: "PostPage_root__Orhf7",
                scrollableContainer: "PostPage_scrollableContainer__iV9Bo",
                scrollContainer: "PostPage_scrollContainer__zrIrH",
                important: "PostPage_important__qUlED",
                container: "PostPage_container__orSfz",
                shimmerTitle: "PostPage_shimmerTitle__EeFCD",
            };
        },
        49077: (e, t, a) => {
            "use strict";
            a.d(t, { PlaylistPersonalDummyPage: () => c });
            var i = a(33008),
                r = a(85896),
                s = a(97531),
                l = a(77868),
                n = a(79169),
                o = a(18740),
                d = a(12627),
                u = a.n(d);
            let c = (0, s.PA)(() => {
                let {
                    playlistPersonal: {
                        dummyCoverUrl: e,
                        dummyDescription: t,
                        title: a,
                    },
                } = (0, n.Pjs)();
                return (0, i.jsxs)("div", {
                    className: u().root,
                    children: [
                        (0, i.jsx)(o.Y9, {}),
                        (0, i.jsx)(o.BW, {
                            src: e,
                            size: 200,
                            fit: "cover",
                            withAvatarReplace: !0,
                            "aria-hidden": !0,
                            className: u().cover,
                        }),
                        a &&
                            (0, i.jsx)(l.Heading, {
                                className: (0, r.$)(u().title, u().important),
                                variant: "h1",
                                size: "xs",
                                children: a,
                            }),
                        t &&
                            (0, i.jsx)(l.Caption, {
                                className: (0, r.$)(u().text, u().important),
                                variant: "span",
                                type: "text",
                                size: "l",
                                weight: "normal",
                                children: t,
                            }),
                    ],
                });
            });
        },
        50270: (e) => {
            e.exports = {
                root: "ChartTracksPage_root__QMbqY",
                scrollContainer: "ChartTracksPage_scrollContainer__Pxe8S",
                important: "ChartTracksPage_important__Lddyf",
                content: "ChartTracksPage_content__yyIAN",
                footer: "ChartTracksPage_footer__6sNBk",
                shimmerItem: "ChartTracksPage_shimmerItem__YwM0h",
            };
        },
        52568: (e, t, a) => {
            "use strict";
            a.d(t, { GenresNotFoundPage: () => s });
            var i = a(33008),
                r = a(35233);
            let s = () => (0, i.jsx)(r.M, {});
        },
        54388: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { DesktopInitializer: () => o });
            var i = a(33008),
                r = a(66268),
                s = a(49444),
                l = a(77575),
                n = a(79169);
            let o = () => {
                let { language: e } = (0, n.h6b)();
                {
                    let { theme: t } = (0, n.DPo)(),
                        a = (0, s.j)();
                    (0, l.sq)(),
                        (0, l.P4)(),
                        (0, l.bk)(),
                        (0, l.LD)(),
                        (0, l.t4)(),
                        (0, l.Fn)(),
                        (0, l.eP)(),
                        (0, l.sb)(),
                        (0, r.useEffect)(() => {
                            (0, l.M4)(e), (0, l.CA)();
                        }, [e]),
                        (0, r.useEffect)(() => {
                            let e = (0, n.HFS)();
                            e && a.count(e, "appVersion");
                        }, [a]),
                        (0, r.useEffect)(() => {
                            t && ((0, l._E)(t), a.count(t, "appTheme"));
                        }, [t]);
                }
                return (0, i.jsx)(l.qw, {});
            };
        },
        58427: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { SonataProvider: () => iR });
            var i,
                r,
                s,
                l,
                n,
                o,
                d,
                u,
                c,
                g,
                h,
                m,
                y,
                p,
                v,
                S,
                P,
                E,
                b,
                f,
                I,
                k,
                _,
                T,
                C,
                D = a(33008),
                A = a(25601),
                L = a(97531),
                N = a(66268),
                R = a(30293),
                w = a(86211);
            let x = { isCrossFadeEnabled: !0 };
            var O = a(53555),
                G = a(6247),
                M = a(75305),
                K = a(88063),
                F = a(44580);
            !(function (e) {
                (e.PLAYING = "playing"), (e.NOT_PLAYING = "not-playing");
            })(i || (i = {}));
            let X = (e) =>
                !!(
                    "object" == typeof e &&
                    e &&
                    "streamProgress" in e &&
                    "object" == typeof e.streamProgress &&
                    e.streamProgress &&
                    "endPositionSec" in e.streamProgress &&
                    "number" == typeof e.streamProgress.endPositionSec
                );
            class j {
                set playId(e) {
                    this.entityPlayId = e;
                }
                get playId() {
                    return this.entityPlayId;
                }
                set addTracksToPlayerTime(e) {
                    this.entityAddTracksToPlayerTime = e;
                }
                get addTracksToPlayerTime() {
                    return this.entityAddTracksToPlayerTime;
                }
                get totalPlayedSeconds() {
                    return (function (e) {
                        let t,
                            a,
                            r = 0,
                            s = [];
                        if (0 !== e.length) {
                            for (let r of (function (e) {
                                let t = [];
                                for (; 0 !== e.length; ) {
                                    let a = e.shift();
                                    if (a && a.stage === i.PLAYING) {
                                        let e = t[t.length - 1];
                                        (e && e.stage !== i.NOT_PLAYING) ||
                                            t.push(a);
                                    } else if (a && a.stage === i.NOT_PLAYING) {
                                        let e = t[t.length - 1];
                                        e && e.stage === i.PLAYING && t.push(a);
                                    }
                                }
                                let a = t[t.length - 1];
                                return (
                                    a &&
                                        a.stage === i.PLAYING &&
                                        t.push({
                                            stage: i.NOT_PLAYING,
                                            perfNow: performance.now(),
                                            ts: Date.now(),
                                        }),
                                    t
                                );
                            })(e))
                                r.stage === i.PLAYING
                                    ? (t = r.perfNow)
                                    : (a = r.perfNow),
                                    t &&
                                        a &&
                                        (s.push(a - t),
                                        (t = void 0),
                                        (a = void 0));
                            for (let e of s) r += e;
                            return (
                                Math.round((r / 1e3 + Number.EPSILON) * 1e3) /
                                1e3
                            );
                        }
                        return r;
                    })([...this.entityTimeStagesOfPlayback]);
                }
                get timeStagesOfPlayback() {
                    return this.entityTimeStagesOfPlayback;
                }
                saveTimeStageOfPlayback(e) {
                    let t = {
                        stage: e.stage,
                        perfNow: performance.now(),
                        ts: Date.now(),
                    };
                    e.reason && (t.reason = e.reason),
                        this.entityTimeStagesOfPlayback.push(t);
                }
                clearTimeStagesOfPlayback() {
                    this.entityTimeStagesOfPlayback = [];
                }
                get data() {
                    return this.entityData;
                }
                get isAvailable() {
                    return !!(
                        "available" in this.entityData.meta &&
                        this.entityData.meta.available
                    );
                }
                get isDisliked() {
                    return (
                        void 0 !== this.likeStore &&
                        this.likeStore.isTrackDisliked(this.entityData.meta.id)
                    );
                }
                get isExplicit() {
                    return (
                        "contentWarning" in this.entityData.meta &&
                        this.entityData.meta.contentWarning === K.K.EXPLICIT
                    );
                }
                get everFinished() {
                    return X(this.entityData.meta)
                        ? this.entityData.meta.streamProgress.everFinished
                        : null;
                }
                set everFinished(e) {
                    X(this.entityData.meta) &&
                        null !== e &&
                        (this.entityData.meta.streamProgress.everFinished = e);
                }
                hasPlayId() {
                    return "" !== this.playId;
                }
                constructor(e) {
                    (0, w._)(this, "entityData", void 0),
                        (0, w._)(this, "likeStore", void 0),
                        (0, w._)(this, "entityPlayId", ""),
                        (0, w._)(this, "entityAddTracksToPlayerTime", ""),
                        (0, w._)(this, "entityTimeStagesOfPlayback", []),
                        (0, w._)(this, "mediaElementErrorReloadCounter", 0),
                        (0, w._)(this, "mediaSourceData", null),
                        (0, w._)(this, "expectedQuality", null),
                        (0, w._)(this, "startPosition", null),
                        (0, w._)(this, "contentKind", "audio"),
                        (0, w._)(this, "contentType", F.e.AUDIO),
                        (0, w._)(this, "hidden", !1),
                        (this.entityData = e.data),
                        (this.likeStore = e.likeStore);
                }
            }
            class U extends j {}
            class B extends j {
                constructor(...e) {
                    super(...e),
                        (0, w._)(this, "contentType", F.e.DOWNLOADED_AUDIO);
                }
            }
            class V extends j {}
            class q extends j {
                get isAvailable() {
                    return !1;
                }
                get isDisliked() {
                    return !1;
                }
            }
            var Y = a(38230);
            class W extends Y.t {
                constructor(e, { code: t = "E_ENTITY_FACTORY", ...a } = {}) {
                    super(e, { code: t, ...a }),
                        (0, w._)(this, "name", "EntityFactoryException"),
                        Object.setPrototypeOf(this, W.prototype);
                }
            }
            class z extends j {
                get isAvailable() {
                    return !0;
                }
                get isDisliked() {
                    return !1;
                }
                constructor(...e) {
                    super(...e), (0, w._)(this, "contentType", F.e.HLS);
                }
            }
            class H extends j {
                get isAvailable() {
                    return !0;
                }
                get isDisliked() {
                    return !1;
                }
            }
            class Q extends j {
                get isAvailable() {
                    return !0;
                }
                get isDisliked() {
                    return !1;
                }
                constructor(...e) {
                    super(...e),
                        (0, w._)(this, "contentType", F.e.CLIP),
                        (0, w._)(this, "contentKind", "video");
                }
            }
            class $ extends j {
                get isAvailable() {
                    return !0;
                }
                get isDisliked() {
                    return !1;
                }
                constructor(...e) {
                    super(...e), (0, w._)(this, "contentType", F.e.HLS);
                }
            }
            class J {
                create(e) {
                    let t = null,
                        { data: a } = e;
                    void 0 === a.fromCurrentContext &&
                        (a.fromCurrentContext = !0);
                    try {
                        switch (a.type) {
                            case M.R.Music:
                                t = new U({
                                    data: a,
                                    likeStore: this.likeStore,
                                });
                                break;
                            case M.R.DownloadedMusic:
                                t = new B({
                                    data: a,
                                    likeStore: this.likeStore,
                                });
                                break;
                            case M.R.VibeTrack:
                                t = new V({
                                    data: a,
                                    likeStore: this.likeStore,
                                });
                                break;
                            case M.R.Generative:
                                t = new z({
                                    data: a,
                                    likeStore: this.likeStore,
                                });
                                break;
                            case M.R.SmartPreview:
                                t = new H({
                                    data: a,
                                    likeStore: this.likeStore,
                                });
                                break;
                            case M.R.Clip:
                                t = new Q({
                                    data: a,
                                    likeStore: this.likeStore,
                                });
                                break;
                            case M.R.Radio:
                                t = new $({
                                    data: a,
                                    likeStore: this.likeStore,
                                });
                                break;
                            case M.R.Unknown:
                                a.meta.type,
                                    G.S.MUSIC,
                                    (t = new U({
                                        data: { ...a, type: M.R.Music },
                                        likeStore: this.likeStore,
                                    }));
                                break;
                            case O.z4.Unloaded:
                                t = new q({
                                    data: a,
                                    likeStore: this.likeStore,
                                });
                        }
                    } catch (e) {
                        throw new W("Error while creating entity", {
                            cause: e,
                            data: { type: a.type, meta: a.meta },
                        });
                    }
                    if (null !== t) return t;
                    throw new W(
                        "Cannot create entities with nonexistent type",
                        {
                            code: "E_NONEXISTENT_ENTITY_TYPE",
                            data: { type: a.type, meta: a.meta },
                        },
                    );
                }
                constructor(e) {
                    (0, w._)(this, "likeStore", void 0),
                        (this.likeStore = e.likeStore);
                }
            }
            var Z = a(48509);
            function ee(e, t) {
                let a = [];
                for (let i of e)
                    for (let e of i)
                        a.push({ type: O.z4.Unloaded, meta: e, additional: t });
                return a;
            }
            var et = a(30159);
            class ea extends Y.t {
                constructor(e, { code: t = "E_CONTEXT", name: a, ...i } = {}) {
                    super(e, { code: t, ...i }),
                        (0, w._)(this, "name", void 0),
                        (this.name = null != a ? a : "ContextException"),
                        Object.setPrototypeOf(this, ea.prototype);
                }
            }
            class ei extends O.EX {
                get isCurrentContext() {
                    return this.isCurrent;
                }
                set isCurrentContext(e) {
                    this.isCurrent = e;
                }
                get availableActions() {
                    return this.actions;
                }
                logError(e) {
                    let t,
                        {
                            name: a,
                            message: i = "Error in YaMusicContext",
                            data: r,
                            cause: s,
                            originalError: l,
                        } = e;
                    (t =
                        l instanceof Y.t
                            ? l
                            : new ea(i, {
                                  name: a,
                                  cause: (0, R.createObjectFromError)(s),
                                  data: r,
                              })),
                        this.logger.error(t, {
                            ...t.data,
                            code: t.code,
                            cause: t.cause,
                            stack: t.stack,
                            message: t.message,
                        });
                }
                constructor({ logger: e }) {
                    super(),
                        (0, w._)(this, "isCurrent", !1),
                        (0, w._)(this, "actions", {
                            moveBackward: new et.cJ(!1),
                            moveForward: new et.cJ(!0),
                            repeat: new et.cJ(null),
                            shuffle: new et.cJ(null),
                            speed: new et.cJ(null),
                        }),
                        (0, w._)(this, "from", ""),
                        (0, w._)(this, "utmLink", void 0),
                        (0, w._)(this, "logger", void 0),
                        (this.logger = e);
                }
            }
            function er(e, t) {
                return e.map((e) => ({
                    type: M.R.SmartPreview,
                    meta: e,
                    additional: t,
                }));
            }
            class es extends ei {
                loadTrailer() {
                    return this.albumsResource
                        .getTrailer({
                            albumId: Number(this.contextData.meta.id),
                        })
                        .then(
                            (e) => (
                                (this.contextData.meta.trailerTracks =
                                    e.trailer.tracks),
                                e
                            ),
                        )
                        .catch((e) => {
                            throw new ea("Error in AlbumContext", {
                                code: "E_ALBUM_LOAD_TRAILER",
                                cause: (0, R.createObjectFromError)(e),
                                data: { contextId: this.contextData.meta.id },
                            });
                        });
                }
                apply(e) {}
                loadContextMeta() {
                    return this.albumsResource
                        .getAlbumWithRichTracks({
                            albumId: Number(this.contextData.meta.id),
                            resumeStream: !0,
                        })
                        .then((e) => ((this.contextData.meta = e), e))
                        .catch((e) => {
                            throw new ea("Error in AlbumContext", {
                                code: "E_ALBUM_LOAD_CONTEXT_META",
                                cause: (0, R.createObjectFromError)(e),
                                data: { contextId: this.contextData.meta.id },
                            });
                        });
                }
                getContextEntitiesData() {
                    let e = { from: this.from, utmLink: this.utmLink };
                    return this.contextData.trailer
                        ? this.loadTrailer().then((t) =>
                              er(t.trailer.tracks, e),
                          )
                        : this.contextData.meta.volumes
                          ? Promise.resolve(
                                ee(this.contextData.meta.volumes, e),
                            )
                          : this.loadContextMeta().then((t) =>
                                Promise.resolve(ee(t.volumes, e)),
                            );
                }
                get type() {
                    return this.contextData.type;
                }
                get data() {
                    return this.contextData;
                }
                get resumeFromIndex() {
                    var e;
                    if (
                        (null == (e = this.contextData.meta.resumeFrom)
                            ? void 0
                            : e.trackId) &&
                        Array.isArray(this.contextData.meta.volumes)
                    ) {
                        let e = []
                            .concat(...this.contextData.meta.volumes)
                            .findIndex((e) => {
                                var t;
                                return (
                                    String(e.id) ===
                                    String(
                                        null ==
                                            (t =
                                                this.contextData.meta
                                                    .resumeFrom)
                                            ? void 0
                                            : t.trackId,
                                    )
                                );
                            });
                        if (e >= 0) return e;
                    }
                    return null;
                }
                constructor(e) {
                    super(e),
                        (0, w._)(this, "contextData", void 0),
                        (0, w._)(this, "albumsResource", void 0),
                        (0, w._)(this, "variables", void 0);
                    let { data: t, albumsResource: a, variables: i } = e;
                    (this.albumsResource = a),
                        (this.contextData = t),
                        (this.from = t.from),
                        (this.utmLink = t.utmLink),
                        (this.variables = i);
                }
            }
            var el = a(66788);
            class en extends ei {
                loadTrailer() {
                    let { uid: e, kind: t } = (0, el.I)(
                        this.contextData.meta.id,
                    );
                    return this.usersResource
                        .getPlaylistTrailer({ userId: e, playlistKind: t })
                        .then(
                            (e) => (
                                (this.contextData.meta.trailerTracks =
                                    e.trailer.tracks),
                                e
                            ),
                        )
                        .catch((e) => {
                            throw new ea("Error in PlaylistContext", {
                                code: "E_PLAYLIST_LOAD_TRAILER",
                                cause: (0, R.createObjectFromError)(e),
                                data: { contextId: this.contextData.meta.id },
                            });
                        });
                }
                apply(e) {}
                loadContextMeta() {
                    let e = this.contextData.meta.uuid,
                        { uid: t, kind: a } = (0, el.I)(
                            this.contextData.meta.id,
                        ),
                        i = 3 === a;
                    return (
                        i && void 0 !== e
                            ? this.playlistResource.getPlaylist({
                                  playlistUuid: e,
                                  resumeStream: !1,
                                  richTracks: !1,
                              })
                            : this.usersResource.getPlaylistWithTracksIds({
                                  userId: t,
                                  playlistKind: a,
                                  resumeStream: !1,
                                  trackMetaType: i ? "music" : void 0,
                              })
                    )
                        .then((e) => {
                            let t,
                                a,
                                i = {
                                    ...e,
                                    id:
                                        ((t = e.uid),
                                        (a = e.kind),
                                        "".concat(t, ":").concat(a)),
                                };
                            return (this.contextData.meta = i), i;
                        })
                        .catch((e) => {
                            throw new ea("Error in PlaylistContext", {
                                code: "E_PLAYLIST_LOAD_CONTEXT_META",
                                cause: (0, R.createObjectFromError)(e),
                                data: { contextId: this.contextData.meta.id },
                            });
                        });
                }
                getContextEntitiesData() {
                    let e = { from: this.from, utmLink: this.utmLink };
                    if (this.contextData.trailer)
                        return this.loadTrailer().then((t) =>
                            er(t.trailer.tracks, e),
                        );
                    if (this.contextData.meta.tracks) {
                        let t = [];
                        for (let a of this.contextData.meta.tracks)
                            t.push({
                                type: O.z4.Unloaded,
                                meta: a,
                                additional: e,
                            });
                        return Promise.resolve(t);
                    }
                    return this.loadContextMeta().then((t) => {
                        let a = [];
                        for (let i of t.tracks)
                            a.push({
                                type: O.z4.Unloaded,
                                meta: i,
                                additional: e,
                            });
                        return a;
                    });
                }
                get type() {
                    return this.contextData.type;
                }
                get data() {
                    return this.contextData;
                }
                constructor(e) {
                    super(e),
                        (0, w._)(this, "contextData", void 0),
                        (0, w._)(this, "usersResource", void 0),
                        (0, w._)(this, "playlistResource", void 0),
                        (0, w._)(this, "variables", void 0);
                    let {
                        data: t,
                        playlistResource: a,
                        usersResource: i,
                        variables: r,
                    } = e;
                    (this.usersResource = i),
                        (this.playlistResource = a),
                        (this.contextData = t),
                        (this.from = t.from),
                        (this.utmLink = t.utmLink),
                        (this.variables = r);
                }
            }
            class eo extends ei {
                loadTrailer() {
                    return this.artistsResource
                        .getTrailer({
                            artistId: String(this.contextData.meta.id),
                        })
                        .then(
                            (e) => (
                                (this.contextData.meta.trailerTracks =
                                    e.trailer.tracks),
                                e
                            ),
                        )
                        .catch((e) => {
                            throw new ea("Error in ArtistContext", {
                                code: "E_ARTIST_LOAD_TRAILER",
                                cause: (0, R.createObjectFromError)(e),
                                data: { contextId: this.contextData.meta.id },
                            });
                        });
                }
                apply(e) {}
                loadContextMeta() {
                    return (
                        this.artistsResource
                            .getBriefInfo({
                                artistId: String(this.contextData.meta.id),
                                discographyBlockEnabled: !1,
                                fetchPlaylistLikesCounts: !1,
                            })
                            .then((e) => {
                                this.contextData.meta.artist = e.artist;
                            })
                            .catch((e) => {
                                throw new ea("Error in ArtistContext", {
                                    code: "E_ARTIST_LOAD_CONTEXT_META",
                                    cause: (0, R.createObjectFromError)(e),
                                    data: {
                                        contextId: this.contextData.meta.id,
                                    },
                                });
                            }),
                        this.artistsResource
                            .getArtistTrackIds({
                                artistId: String(this.contextData.meta.id),
                            })
                            .then(
                                (e) => (
                                    (this.contextData.meta.trackIds = e),
                                    this.contextData.meta
                                ),
                            )
                            .catch((e) => {
                                throw new ea("Error in ArtistContext", {
                                    code: "E_ARTIST_LOAD_CONTEXT_META",
                                    cause: (0, R.createObjectFromError)(e),
                                    data: {
                                        contextId: this.contextData.meta.id,
                                    },
                                });
                            })
                    );
                }
                getContextEntitiesData() {
                    let e = { from: this.from, utmLink: this.utmLink };
                    if (this.contextData.trailer)
                        return this.loadTrailer().then((t) =>
                            er(t.trailer.tracks, e),
                        );
                    if (this.contextData.meta.trackIds) {
                        let t = [];
                        for (let a of this.contextData.meta.trackIds)
                            t.push({
                                type: O.z4.Unloaded,
                                meta: { id: a },
                                additional: e,
                            });
                        return Promise.resolve(t);
                    }
                    return this.loadContextMeta().then((t) => {
                        let a = [];
                        if (t.trackIds)
                            for (let i of t.trackIds)
                                a.push({
                                    type: O.z4.Unloaded,
                                    meta: { id: i },
                                    additional: e,
                                });
                        return a;
                    });
                }
                get type() {
                    return this.contextData.type;
                }
                get data() {
                    return this.contextData;
                }
                constructor(e) {
                    super(e),
                        (0, w._)(this, "contextData", void 0),
                        (0, w._)(this, "artistsResource", void 0),
                        (0, w._)(this, "variables", void 0);
                    let { data: t, artistsResource: a, variables: i } = e;
                    (this.artistsResource = a),
                        (this.contextData = t),
                        (this.from = t.from),
                        (this.utmLink = t.utmLink),
                        (this.variables = i);
                }
            }
            var ed = a(68565);
            function eu(e, t) {
                let a = [],
                    { batchId: i, sequence: r } = e;
                for (let e of r)
                    a.push({
                        type: M.R.VibeTrack,
                        additional: t,
                        batchId: i,
                        meta: {
                            ...e.track,
                            liked: e.liked,
                            trackParameters: e.trackParameters,
                        },
                        fromCurrentContext: !0,
                        wasPlayed: !1,
                    });
                return a;
            }
            function ec(e) {
                var t;
                let a;
                if (
                    !(a =
                        e.data.type === O.z4.Unloaded
                            ? e.data.meta.id
                            : "realId" in e.data.meta
                              ? e.data.meta.realId
                              : e.data.meta.id)
                )
                    throw new ea("Error in VibeContext", {
                        code: "E_WRONG_VIBE_CONTEXT",
                    });
                let i = "albums" in e.data.meta ? e.data.meta.albums : [];
                return i && (null == (t = i[0]) ? void 0 : t.id)
                    ? "".concat(a, ":").concat(i[0].id)
                    : String(a);
            }
            function eg(e) {
                return (null == e ? void 0 : e.data.type) === M.R.VibeTrack;
            }
            function eh(e, t) {
                let a = [],
                    i = !1;
                for (let r = 0; r < e.length; r++) {
                    let s = e[r];
                    if (s && eg(s.entity)) {
                        let { entity: e } = s;
                        if (e.data.wasPlayed || t === r) a.push(s);
                        else if (!i) {
                            a.push(s), (i = !0);
                            break;
                        }
                    }
                }
                return a;
            }
            function em(e, t) {
                return eh(e, t).map((e) => {
                    let { entity: t } = e;
                    return ec(t);
                });
            }
            var ey = a(73273);
            function ep() {
                return new Date().toISOString();
            }
            function ev(e) {
                let t,
                    { entity: a, type: i, from: r } = e,
                    s = "user-queue-"
                        .concat(a.data.meta.id, "-")
                        .concat(Date.now());
                switch ((eg(a) && a.data.batchId && (s = a.data.batchId), i)) {
                    case ed.O.RADIO_STARTED:
                        return {
                            event: { type: i, timestamp: ep(), from: r },
                            from: r,
                        };
                    case ed.O.TRACK_STARTED:
                    case ed.O.LIKE:
                    case ed.O.UNLIKE:
                    case ed.O.UNDISLIKE:
                        return {
                            batchId: s,
                            event: { type: i, timestamp: ep(), trackId: ec(a) },
                            from: r,
                        };
                    case ed.O.TRACK_FINISHED:
                        if (eg(a) && a.data.meta.durationMs) {
                            let e = a.data.meta.durationMs / 1e3;
                            t = e % 1 == 0 ? e : Number(e.toFixed(3));
                        }
                        return {
                            batchId: s,
                            event: {
                                type: i,
                                timestamp: ep(),
                                trackId: ec(a),
                                totalPlayedSeconds: a.totalPlayedSeconds,
                                trackLengthSeconds: t,
                            },
                            from: r,
                        };
                    case ed.O.SKIP:
                    case ed.O.DISLIKE:
                        return {
                            batchId: s,
                            event: {
                                type: i,
                                timestamp: ep(),
                                trackId: ec(a),
                                totalPlayedSeconds: a.totalPlayedSeconds,
                            },
                            from: r,
                        };
                }
                return null;
            }
            function eS(e, t) {
                return e.some(
                    (e) =>
                        (function (e, t) {
                            if (e === t) return !0;
                            let a = [ed.O.SKIP, ed.O.TRACK_FINISHED];
                            return a.includes(e) && a.includes(t);
                        })(t.event.type, e.event.type) &&
                        "trackId" in t.event &&
                        "trackId" in e.event &&
                        t.event.trackId === e.event.trackId,
                );
            }
            class eP {
                storeFeedbacksForWasPlayedTracks(e, t) {
                    for (let a of e)
                        if (eg(a.entity) && a.entity.data.wasPlayed) {
                            let e = ev({
                                    entity: a.entity,
                                    type: ed.O.TRACK_STARTED,
                                    from: t,
                                }),
                                i = ev({
                                    entity: a.entity,
                                    type: ed.O.TRACK_FINISHED,
                                    from: t,
                                });
                            e && i && this.storeFeedbacksInHistory([e, i]);
                        }
                }
                storeFeedbacksInHistory(e) {
                    if (e) for (let t of e) this.feedbacksHistory.push(t);
                }
                clearStoredFeedbacks() {
                    (this.feedbacksHistory = []),
                        (this.feedbacksForSending = []);
                }
                storeFeedbacksForSending(e) {
                    var t;
                    if (
                        e &&
                        (null == (t = this.variables)
                            ? void 0
                            : t.sendFeedbackToSessionTracks)
                    ) {
                        let t = Array.isArray(e) ? e : [e];
                        this.feedbacksForSending.push(...t);
                    }
                }
                getFeedbacksForSending() {
                    var e;
                    if (
                        !(null == (e = this.variables)
                            ? void 0
                            : e.sendFeedbackToSessionTracks)
                    )
                        return null;
                    let t = this.feedbacksForSending;
                    return (this.feedbacksForSending = []), t;
                }
                sendFeedbackRequest(e) {
                    let { feedback: t, session: a } = e,
                        { radioSessionId: i } = a;
                    return this.rotorResource
                        .sessionFeedback({ radioSessionId: i, feedback: t })
                        .then(() => Promise.resolve());
                }
                sendFeedback(e) {
                    var t;
                    let {
                            entity: a,
                            type: i,
                            from: r,
                            session: s,
                            sendWithSessionTracks: l = !1,
                            saveFeedbackToHistory: n = !1,
                        } = e,
                        o = ev({ entity: a, type: i, from: r });
                    return o
                        ? eS(this.feedbacksHistory, o) ||
                          eS(this.feedbacksForSending, o)
                            ? Promise.resolve()
                            : l &&
                                (null == (t = this.variables)
                                    ? void 0
                                    : t.sendFeedbackToSessionTracks)
                              ? (this.storeFeedbacksForSending(o),
                                Promise.resolve())
                              : this.sendFeedbackRequest({
                                    feedback: o,
                                    session: s,
                                }).then(
                                    () => (
                                        n && this.storeFeedbacksInHistory([o]),
                                        Promise.resolve()
                                    ),
                                )
                        : Promise.reject(
                              new Y.t("Cannot create feedback", {
                                  data: { type: i },
                              }),
                          );
                }
                constructor({ rotorResource: e, variables: t }) {
                    (0, w._)(this, "rotorResource", void 0),
                        (0, w._)(this, "feedbacksForSending", []),
                        (0, w._)(this, "feedbacksHistory", []),
                        (0, w._)(this, "variables", void 0),
                        (this.rotorResource = e),
                        (this.variables = t);
                }
            }
            class eE extends ei {
                apply(e) {
                    let { hooks: t, playback: a } = e;
                    t.beforeContextSet.tap("VibeContext", () => {
                        if (!this.isCurrentContext) return;
                        let e = a.state.queueState.currentEntity.value;
                        e &&
                            (this.sendFeedback({
                                entity: e.entity,
                                type: ed.O.SKIP,
                            }),
                            this.feedbacksController.clearStoredFeedbacks());
                    }),
                        t.afterSetupQueue.tap("VibeContext", () => {
                            if (!this.isCurrentContext) return;
                            let { value: e } = a.state.queueState.entityList;
                            if (
                                (this.feedbacksController.storeFeedbacksForWasPlayedTracks(
                                    e.slice(0, -1),
                                    this.from,
                                ),
                                this.contextData.cloneSessionId &&
                                    this.contextData.meta.session)
                            ) {
                                let e = eu(this.contextData.meta.session, {
                                    from: this.from,
                                    utmLink: this.utmLink,
                                });
                                a.injectLast(e);
                            }
                        }),
                        t.afterMediaStartPlaying.tapPromise(
                            "VibeContext",
                            () =>
                                this.isCurrentContext
                                    ? new Promise((e) => {
                                          let t =
                                              a.state.queueState.currentEntity
                                                  .value;
                                          if (!t) return void e();
                                          let { entity: i } = t;
                                          this.isVibeStarted
                                              ? this.sendFeedback({
                                                    type: ed.O.TRACK_STARTED,
                                                    entity: i,
                                                    saveFeedbackToHistory: !0,
                                                })
                                              : (this.sendFeedback({
                                                    type: ed.O.RADIO_STARTED,
                                                    entity: i,
                                                }).then(() => {
                                                    this.sendFeedback({
                                                        type: ed.O
                                                            .TRACK_STARTED,
                                                        entity: i,
                                                        saveFeedbackToHistory:
                                                            !0,
                                                    });
                                                }),
                                                (this.isVibeStarted = !0)),
                                              e();
                                      })
                                    : Promise.resolve(),
                        ),
                        t.beforeFindPlayableEntityIndex.tapPromise(
                            "VibeContext",
                            (e) =>
                                this.isCurrentContext
                                    ? new Promise((t, i) => {
                                          switch (e.method) {
                                              case O.So.AUTO_MOVE_FORWARD:
                                                  this.onAutoMoveForward(a)
                                                      .then(t)
                                                      .catch(i);
                                                  break;
                                              case O.So.MOVE_FORWARD:
                                                  this.onMoveForward(a)
                                                      .then(t)
                                                      .catch(i);
                                                  break;
                                              case O.So.MOVE_BACKWARD:
                                                  this.onMoveBackward(a)
                                                      .then(t)
                                                      .catch(i);
                                                  break;
                                              case O.So.SET_INDEX:
                                                  this.onSetIndex(
                                                      a,
                                                      e.indexToChangeOn,
                                                  )
                                                      .then(t)
                                                      .catch(i);
                                                  break;
                                              default:
                                                  t();
                                          }
                                      })
                                    : Promise.resolve(),
                        ),
                        t.beforeEntityPlayingProcessStart.tapPromise(
                            "VibeContext",
                            () => {
                                if (!this.isCurrentContext)
                                    return Promise.resolve();
                                let { currentEntity: e } = a.state.queueState;
                                return (
                                    e.value &&
                                        eg(e.value.entity) &&
                                        (e.value.entity.data.wasPlayed = !0),
                                    Promise.resolve()
                                );
                            },
                        );
                }
                get interactive() {
                    var e;
                    return (null == (e = this.variables)
                        ? void 0
                        : e.sendInteractiveToSession) &&
                        void 0 !== this.contextData.interactive
                        ? { interactive: this.contextData.interactive }
                        : {};
                }
                loadContextMeta() {
                    this.timeOfLastInteractionWithVibe = performance.now();
                    let {
                        meta: { id: e },
                        seeds: t,
                        cloneSessionId: a,
                        queue: i,
                        trackToStartFrom: r,
                        includeTracksInResponse: s,
                        allowExplicit: l,
                    } = this.contextData;
                    return (
                        a
                            ? this.rotorResource
                                  .sessionClone({
                                      seeds: t,
                                      includeWaveModel: !0,
                                      radioSessionId: a,
                                      trackToStartFrom: r,
                                      queue: i,
                                      allowExplicit: l,
                                      includeTracksInResponse: s,
                                      ...this.interactive,
                                  })
                                  .catch((e) => {
                                      throw this.createException(
                                          "Error in clone vibe session",
                                          e,
                                      );
                                  })
                            : this.rotorResource
                                  .sessionNew({
                                      seeds: t,
                                      includeWaveModel: !0,
                                      trackToStartFrom: r,
                                      queue: i,
                                      allowExplicit: l,
                                      includeTracksInResponse: s,
                                      ...this.interactive,
                                  })
                                  .catch((e) => {
                                      throw this.createException(
                                          "Error in create new vibe session",
                                          e,
                                      );
                                  })
                    ).then(
                        (t) => (
                            (this.contextData.meta.session = t),
                            (this.contextData.trackToStartFrom = void 0),
                            { id: e, session: t }
                        ),
                    );
                }
                setSettings(e) {
                    let {
                        seeds: t,
                        queueState: a,
                        allowExplicit: i,
                        interactive: r,
                    } = e;
                    this.contextData.interactive = r;
                    let s = em(a.entityList.value, a.index.value),
                        l = a.currentEntity.value,
                        n = null != i ? i : a.filterParams.value.allowExplicit,
                        o = Promise.resolve();
                    l &&
                        eg(l.entity) &&
                        (o = this.sendFeedback({
                            entity: l.entity,
                            type: ed.O.SKIP,
                        }));
                    let { trackToStartFrom: d, includeTracksInResponse: u } =
                        this.contextData;
                    return o.then(() =>
                        this.rotorResource
                            .sessionNew({
                                includeTracksInResponse: u,
                                trackToStartFrom: d,
                                seeds: t,
                                queue: s,
                                allowExplicit: n,
                                includeWaveModel: !0,
                                ...this.interactive,
                            })
                            .then((e) => {
                                (this.contextData.meta.session = e),
                                    (this.contextData.meta.id = (0, ey.f)(
                                        e.wave.seeds,
                                    )),
                                    (this.contextData.meta.allowExplicit = n),
                                    this.feedbacksController.clearStoredFeedbacks();
                            })
                            .catch((e) => {
                                this.logVibeError({
                                    message:
                                        "Error while setting new vibe settings",
                                    cause: e,
                                });
                            }),
                    );
                }
                getContextEntitiesData() {
                    let {
                            meta: { session: e },
                        } = this.contextData,
                        t = { from: this.from, utmLink: this.utmLink };
                    return e
                        ? Promise.resolve(eu(e, t))
                        : this.loadContextMeta().then((e) => {
                              let { session: a } = e;
                              return eu(a, t);
                          });
                }
                get type() {
                    return this.contextData.type;
                }
                get data() {
                    return this.contextData;
                }
                logVibeError(e) {
                    var t, a;
                    let { message: i, cause: r, originalError: s } = e;
                    this.logError({
                        name: "VibeContextException",
                        message: i,
                        cause: r,
                        data: {
                            contextId: this.contextData.meta.id,
                            sessionId:
                                null !=
                                (a =
                                    null == (t = this.contextData.meta.session)
                                        ? void 0
                                        : t.radioSessionId)
                                    ? a
                                    : "",
                        },
                        originalError: s,
                    });
                }
                createException(e, t) {
                    var a, i;
                    return new ea(e, {
                        name: "VibeContextException",
                        cause: (0, R.createObjectFromError)(t),
                        data: {
                            contextId: this.contextData.meta.id,
                            sessionId:
                                null !=
                                (i =
                                    null == (a = this.contextData.meta.session)
                                        ? void 0
                                        : a.radioSessionId)
                                    ? i
                                    : "",
                        },
                    });
                }
                onAutoMoveForward(e) {
                    var t;
                    if (this.sessionTracksPromise) return Promise.resolve();
                    let a = this.onQueueNavigationCommon(e);
                    return this.sendFeedback({
                        type: ed.O.TRACK_FINISHED,
                        entity:
                            null == (t = e.state.queueState.currentEntity.value)
                                ? void 0
                                : t.entity,
                        sendWithSessionTracks: !0,
                        saveFeedbackToHistory: !0,
                    }).then(() => {
                        let { index: t, entityList: i } = e.state.queueState,
                            r = t.value === i.value.length - 2,
                            s = t.value === i.value.length - 1;
                        if (!r && !s) return Promise.resolve();
                        let l = this.getNextSessionTracks(a).then((t) => {
                            e.injectLast(t),
                                (this.availableActions.moveForward.value = !0);
                        });
                        return s
                            ? l
                            : (r &&
                                  l.catch((e) =>
                                      this.logVibeError({ originalError: e }),
                                  ),
                              Promise.resolve());
                    });
                }
                onMoveForward(e) {
                    var t;
                    if (this.sessionTracksPromise) return Promise.resolve();
                    let a = this.onQueueNavigationCommon(e);
                    return this.sendFeedback({
                        type: ed.O.SKIP,
                        entity:
                            null == (t = e.state.queueState.currentEntity.value)
                                ? void 0
                                : t.entity,
                        sendWithSessionTracks: !0,
                        saveFeedbackToHistory: !0,
                    }).then(() => {
                        let { index: t, entityList: i } = e.state.queueState,
                            r = t.value === i.value.length - 1,
                            s = e.getEntityByIndex({ index: t.value + 1 }),
                            l = t.value + 1 === i.value.length - 1;
                        if (s && eg(s.entity) && s.entity.data.wasPlayed && !l)
                            return Promise.resolve();
                        this.removeVibeTracksBeforeMoveForward(e);
                        let n = this.getNextSessionTracks(a).then((t) =>
                            e.injectLast(t),
                        );
                        return r
                            ? n
                            : (n.catch((e) =>
                                  this.logVibeError({ originalError: e }),
                              ),
                              Promise.resolve());
                    });
                }
                onMoveBackward(e) {
                    this.removeNotPlayedVibeTracksByTtl(e),
                        (this.timeOfLastInteractionWithVibe =
                            performance.now());
                    let t = e.state.queueState.currentEntity.value;
                    if (!t) return Promise.resolve();
                    let { entity: a } = t;
                    return (
                        this.sendFeedback({
                            entity: a,
                            type: ed.O.SKIP,
                            saveFeedbackToHistory: !0,
                        }),
                        Promise.resolve()
                    );
                }
                onSetIndex(e, t) {
                    var a;
                    if (this.sessionTracksPromise) return Promise.resolve();
                    let i = this.onQueueNavigationCommon(e),
                        r = e.getEntityByIndex({ index: t });
                    return r && eg(r.entity) && r.entity.data.wasPlayed
                        ? Promise.resolve()
                        : this.sendFeedback({
                              type: ed.O.SKIP,
                              entity:
                                  null ==
                                  (a = e.state.queueState.currentEntity.value)
                                      ? void 0
                                      : a.entity,
                              sendWithSessionTracks: !0,
                              saveFeedbackToHistory: !0,
                          }).then(() => {
                              let { index: t, entityList: a } =
                                      e.state.queueState,
                                  r = t.value === a.value.length - 1;
                              this.removeVibeTracksBeforeMoveForward(e);
                              let s = this.getNextSessionTracks(i)
                                  .then((t) => e.injectLast(t))
                                  .catch((e) =>
                                      this.logVibeError({ originalError: e }),
                                  );
                              return r ? s : Promise.resolve();
                          });
                }
                getNextSessionTracks(e) {
                    if (!this.contextData.meta.session)
                        return Promise.reject(
                            this.createException(
                                "Cannot get next vibe tracks. No session",
                            ),
                        );
                    let {
                            meta: { session: t },
                            aliceExperiments: a,
                            djData: i,
                            useIchwill: r,
                        } = this.contextData,
                        s = { from: this.from, utmLink: this.utmLink },
                        l = this.feedbacksController.getFeedbacksForSending();
                    return (
                        (this.sessionTracksPromise = this.rotorResource
                            .sessionTracks({
                                radioSessionId: t.radioSessionId,
                                queue: e,
                                aliceExperiments: a,
                                djData: i,
                                useIchwill: r,
                                feedbacks: l || void 0,
                            })
                            .then(
                                (e) => (
                                    this.feedbacksController.storeFeedbacksInHistory(
                                        l,
                                    ),
                                    (this.contextData.meta.sessionTracks = e),
                                    eu(e, s)
                                ),
                            )
                            .catch(
                                (e) => (
                                    this.feedbacksController.storeFeedbacksForSending(
                                        l,
                                    ),
                                    Promise.reject(
                                        this.createException(
                                            "Error in next vibe tracks request",
                                            e,
                                        ),
                                    )
                                ),
                            )
                            .finally(() => {
                                (this.sessionTracksPromise = null),
                                    (this.availableActions.moveForward.value =
                                        !0);
                            })),
                        (this.availableActions.moveForward.value = !1),
                        this.sessionTracksPromise
                    );
                }
                sendFeedback(e) {
                    let {
                        entity: t,
                        type: a,
                        sendWithSessionTracks: i = !1,
                        saveFeedbackToHistory: r = !1,
                    } = e;
                    if (!t)
                        return (
                            this.logVibeError({
                                message: "Cannot send feedback. No entity",
                            }),
                            Promise.resolve()
                        );
                    let { session: s } = this.contextData.meta;
                    return s
                        ? this.feedbacksController
                              .sendFeedback({
                                  entity: t,
                                  type: a,
                                  session: s,
                                  from: this.contextData.from,
                                  sendWithSessionTracks: i,
                                  saveFeedbackToHistory: r,
                              })
                              .catch(
                                  (e) => (
                                      this.logVibeError({
                                          message:
                                              "Error while sending feedback",
                                          cause: e,
                                      }),
                                      Promise.resolve()
                                  ),
                              )
                        : (this.logVibeError({
                              message: "Cannot send feedback. No session",
                          }),
                          Promise.resolve());
                }
                removeNotPlayedVibeTracksByTtl(e) {
                    let { index: t, entityList: a } = e.state.queueState;
                    if (
                        performance.now() -
                            this.timeOfLastInteractionWithVibe >=
                        18e5
                    ) {
                        let i = [];
                        for (let e = t.value + 1; e < a.value.length; e++) {
                            let t = a.value[e];
                            t &&
                                eg(t.entity) &&
                                !t.entity.data.wasPlayed &&
                                i.push(e);
                        }
                        e.remove(i, !0);
                    }
                }
                removeVibeTracksBeforeMoveForward(e) {
                    let t = [],
                        { index: a, entityList: i } = e.state.queueState;
                    for (let e = a.value + 2; e < i.value.length; e++)
                        t.push(e);
                    e.remove(t, !0);
                }
                onQueueNavigationCommon(e) {
                    let t = em(
                        e.state.queueState.entityList.value,
                        e.state.queueState.index.value,
                    );
                    return (
                        this.removeNotPlayedVibeTracksByTtl(e),
                        (this.timeOfLastInteractionWithVibe =
                            performance.now()),
                        t
                    );
                }
                constructor(e) {
                    super(e),
                        (0, w._)(this, "contextData", void 0),
                        (0, w._)(this, "rotorResource", void 0),
                        (0, w._)(this, "isVibeStarted", !1),
                        (0, w._)(
                            this,
                            "timeOfLastInteractionWithVibe",
                            performance.now(),
                        ),
                        (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "sessionTracksPromise", null),
                        (0, w._)(this, "feedbacksController", void 0);
                    let { data: t, rotorResource: a, variables: i } = e;
                    (this.rotorResource = a),
                        (this.contextData = t),
                        (this.from = t.from),
                        (this.utmLink = t.utmLink),
                        (this.availableActions.repeat.value = !1),
                        (this.availableActions.shuffle.value = !1),
                        (this.variables = i),
                        (this.feedbacksController = new eP({
                            rotorResource: a,
                            variables: i,
                        }));
                }
            }
            class eb extends ei {
                getContextId() {
                    var e, t;
                    let a =
                        null == (t = this.contextData.meta.albums) ||
                        null == (e = t[0])
                            ? void 0
                            : e.id;
                    return a
                        ? "".concat(this.contextData.meta.id, ":").concat(a)
                        : String(this.contextData.meta.id);
                }
                loadTrailer() {
                    return this.tracksResource
                        .getTrailer({ trackId: this.getContextId() })
                        .then((e) => ((this.contextData.meta = e.track), e))
                        .catch((e) => {
                            throw new ea("Error in PlaylistContext", {
                                code: "E_PLAYLIST_LOAD_TRAILER",
                                cause: e,
                                data: { contextId: this.contextData.meta.id },
                            });
                        });
                }
                apply(e) {}
                loadContextMeta() {
                    let e = this.getContextId();
                    return this.tracksResource
                        .getTracksMeta({ trackIds: [e], withProgress: !0 })
                        .then((t) => {
                            let a = t[0];
                            if (a) return (this.contextData.meta = a), a;
                            throw new ea(
                                "Error in VariousContext. Track not found",
                                {
                                    code: "E_VARIOUS_LOAD_CONTEXT_META",
                                    data: { contextId: e },
                                },
                            );
                        })
                        .catch((t) => {
                            throw new ea("Error in VariousContext", {
                                code: "E_VARIOUS_LOAD_CONTEXT_META",
                                cause: t,
                                data: { contextId: e },
                            });
                        });
                }
                getContextEntitiesData() {
                    let e = { from: this.from, utmLink: this.utmLink };
                    return this.contextData.trailer
                        ? this.loadTrailer().then((t) => [
                              {
                                  meta: t.track,
                                  type: M.R.SmartPreview,
                                  additional: e,
                              },
                          ])
                        : this.contextData.meta
                          ? Promise.resolve([
                                {
                                    meta: this.contextData.meta,
                                    type: M.R.Unknown,
                                    additional: e,
                                },
                            ])
                          : this.loadContextMeta().then((t) => [
                                { meta: t, type: M.R.Unknown, additional: e },
                            ]);
                }
                get type() {
                    return this.contextData.type;
                }
                get data() {
                    return this.contextData;
                }
                constructor(e) {
                    super(e),
                        (0, w._)(this, "contextData", void 0),
                        (0, w._)(this, "tracksResource", void 0),
                        (0, w._)(this, "variables", void 0);
                    let { data: t, tracksResource: a, variables: i } = e;
                    (this.tracksResource = a),
                        (this.contextData = t),
                        (this.from = t.from),
                        (this.utmLink = t.utmLink),
                        (this.variables = i);
                }
            }
            class ef extends Y.t {
                constructor(e, { code: t = "E_CONTEXT_FACTORY", ...a } = {}) {
                    super(e, { code: t, ...a }),
                        (0, w._)(this, "name", "ContextFactoryException"),
                        Object.setPrototypeOf(this, ef.prototype);
                }
            }
            var eI = a(77205);
            let ek = (e) => [{ type: M.R.Generative, meta: e }],
                e_ = "E_GENERATIVE_RESTART_LIMIT",
                eT = "E_GENERATIVE_RESTART_FAILED";
            class eC extends ei {
                apply(e) {
                    let { hooks: t, playback: a } = e;
                    a.state.playerState.status.onChange((e) => {
                        this.isCurrentContext &&
                            e &&
                            (e === O.MT.PLAYING
                                ? (this.isPaused &&
                                      this.sendFeedback(eI.Q.StreamPlay, a),
                                  (this.isPaused = !1))
                                : e === O.MT.PAUSED &&
                                  (this.sendFeedback(eI.Q.StreamPause, a),
                                  (this.isPaused = !0)));
                    }),
                        t.afterError.tap("GenerativeContext", (e) => {
                            let t = e && e instanceof ea && e.code === e_,
                                i = e && e instanceof ea && e.code === eT;
                            !t &&
                                !i &&
                                this.isCurrentContext &&
                                (this.restartsCount >= 5 || this.restart(a));
                        });
                }
                loadContextMeta() {
                    return this.rotorResource
                        .getGenerativeInfo({
                            stationId: String(this.contextData.meta.id),
                        })
                        .then((e) => {
                            let t = {
                                id: String(this.contextData.meta.id),
                                stream: e.stream,
                                ...e.data,
                            };
                            return (this.contextData.meta = t), t;
                        })
                        .catch((e) => {
                            throw new ea("Error GenerativeContext", {
                                code: "E_GENERATIVE_LOAD_CONTEXT_META",
                                cause: (0, R.createObjectFromError)(e),
                                data: { contextId: this.contextData.meta.id },
                            });
                        });
                }
                getContextEntitiesData() {
                    var e;
                    return (
                        null == (e = this.contextData.meta.stream)
                            ? void 0
                            : e.id
                    )
                        ? Promise.resolve(ek(this.contextData.meta))
                        : this.loadContextMeta().then((e) =>
                              Promise.resolve(ek(e)),
                          );
                }
                get type() {
                    return this.contextData.type;
                }
                get data() {
                    return this.contextData;
                }
                sendFeedback(e, t) {
                    var a;
                    return this.rotorResource
                        .stationFeedback({
                            type: e,
                            stationId: String(this.contextData.meta.id),
                            streamId: String(
                                null == (a = this.contextData.meta.stream)
                                    ? void 0
                                    : a.id,
                            ),
                            timestamp: ep(),
                        })
                        .then((a) => {
                            if (a.reload_stream) {
                                let a = e === eI.Q.TimestampDislike;
                                this.restart(t, a);
                            }
                        });
                }
                restart(e) {
                    let t =
                        arguments.length > 1 &&
                        void 0 !== arguments[1] &&
                        arguments[1];
                    if (this.restartsCount >= 5) {
                        let t = new ea("Error GenerativeContext", {
                            code: e_,
                            data: { contextId: this.contextData.meta.id },
                        });
                        return e.hooks.afterError.promise(t), Promise.reject(t);
                    }
                    return (
                        this.restartsCount++,
                        this.loadContextMeta()
                            .then(() => {
                                let a = t || !this.isPaused;
                                return (
                                    t && this.isPaused && (this.isPaused = !1),
                                    e.restartContext({
                                        playAfterRestart: a,
                                        entitiesData: ek(this.contextData.meta),
                                    })
                                );
                            })
                            .catch((t) => {
                                let a = new ea(
                                    "Error GenerativeContext restart",
                                    {
                                        code: eT,
                                        cause: (0, R.createObjectFromError)(t),
                                        data: {
                                            contextId: this.contextData.meta.id,
                                            restartsCount: this.restartsCount,
                                        },
                                    },
                                );
                                throw (e.hooks.afterError.promise(a), a);
                            })
                    );
                }
                constructor(e) {
                    super(e),
                        (0, w._)(this, "contextData", void 0),
                        (0, w._)(this, "rotorResource", void 0),
                        (0, w._)(this, "isPaused", !1),
                        (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "restartsCount", 0);
                    let { data: t, variables: a, rotorResource: i } = e;
                    (this.rotorResource = i),
                        (this.contextData = t),
                        (this.from = t.from),
                        (this.utmLink = t.utmLink),
                        (this.availableActions.repeat.value = !1),
                        (this.availableActions.shuffle.value = !1),
                        (this.availableActions.moveBackward.value = !1),
                        (this.availableActions.moveForward.value = !1),
                        (this.variables = a);
                }
            }
            let eD = (e) => [{ type: M.R.Radio, meta: e }];
            class eA extends ei {
                apply(e) {}
                loadContextMeta() {
                    return Promise.all([
                        this.radioStationsResource.getStreamBySlug({
                            stationSlug: String(
                                this.contextData.meta.stationSlug,
                            ),
                            streamSlug: String(
                                this.contextData.meta.streamSlug,
                            ),
                        }),
                        this.radioStationsResource.getStreamUrlBySlug({
                            stationSlug: String(
                                this.contextData.meta.stationSlug,
                            ),
                            streamSlug: String(
                                this.contextData.meta.streamSlug,
                            ),
                        }),
                    ])
                        .then((e) => {
                            let [t, { url: a }] = e,
                                i = {
                                    id: this.contextData.meta.id,
                                    stationSlug: String(
                                        this.contextData.meta.stationSlug,
                                    ),
                                    streamSlug: String(
                                        this.contextData.meta.streamSlug,
                                    ),
                                    stream: t,
                                    streamUrl: a,
                                };
                            return (this.contextData.meta = i), i;
                        })
                        .catch((e) => {
                            throw new ea("Error RadioContext", {
                                code: "E_RADIO_LOAD_CONTEXT_META",
                                cause: (0, R.createObjectFromError)(e),
                                data: { contextId: this.contextData.meta.id },
                            });
                        });
                }
                getContextEntitiesData() {
                    var e, t;
                    return (
                        null == (t = this.contextData.meta) ||
                        null == (e = t.stream)
                            ? void 0
                            : e.slug
                    )
                        ? Promise.resolve(eD(this.contextData.meta))
                        : this.loadContextMeta().then((e) =>
                              Promise.resolve(eD(e)),
                          );
                }
                get type() {
                    return this.contextData.type;
                }
                get data() {
                    return this.contextData;
                }
                constructor(e) {
                    super(e),
                        (0, w._)(this, "contextData", void 0),
                        (0, w._)(this, "radioStationsResource", void 0),
                        (0, w._)(this, "variables", void 0);
                    let { data: t, variables: a, radioStationsResource: i } = e;
                    (this.radioStationsResource = i),
                        (this.contextData = t),
                        (this.from = t.from),
                        (this.utmLink = t.utmLink),
                        (this.availableActions.repeat.value = !1),
                        (this.availableActions.shuffle.value = !1),
                        (this.availableActions.moveBackward.value = !1),
                        (this.availableActions.moveForward.value = !1),
                        (this.variables = a);
                }
            }
            class eL {
                create(e) {
                    let t = null,
                        { data: a } = e;
                    try {
                        var i, r, s, l, n, o, d;
                        switch (a.type) {
                            case Z.K.Album:
                                if (!this.albumsResource)
                                    throw new ef(
                                        "Albums resource is not provided",
                                        {
                                            code: "E_ALBUMS_RESOURCE_NOT_PROVIDED",
                                            data: {
                                                type: a.type,
                                                meta: a.meta,
                                            },
                                        },
                                    );
                                t = new es({
                                    data: a,
                                    albumsResource: this.albumsResource,
                                    logger: this.logger,
                                    variables:
                                        null == (i = this.variables)
                                            ? void 0
                                            : i[Z.K.Album],
                                });
                                break;
                            case Z.K.Playlist:
                                if (
                                    !this.usersResource ||
                                    !this.playlistResource
                                )
                                    throw new ef(
                                        "Users and playlist resources are not provided",
                                        {
                                            code: "E_USERS_AND_PLAYLIST_RESOURCES_NOT_PROVIDED",
                                            data: {
                                                type: a.type,
                                                meta: a.meta,
                                            },
                                        },
                                    );
                                t = new en({
                                    data: a,
                                    usersResource: this.usersResource,
                                    playlistResource: this.playlistResource,
                                    logger: this.logger,
                                    variables:
                                        null == (r = this.variables)
                                            ? void 0
                                            : r[Z.K.Playlist],
                                });
                                break;
                            case Z.K.Artist:
                                if (!this.artistsResource)
                                    throw new ef(
                                        "Artists resource is not provided",
                                        {
                                            code: "E_ARTISTS_RESOURCE_NOT_PROVIDED",
                                            data: {
                                                type: a.type,
                                                meta: a.meta,
                                            },
                                        },
                                    );
                                t = new eo({
                                    data: a,
                                    artistsResource: this.artistsResource,
                                    logger: this.logger,
                                    variables:
                                        null == (s = this.variables)
                                            ? void 0
                                            : s[Z.K.Artist],
                                });
                                break;
                            case Z.K.Vibe:
                                if (!this.rotorResource)
                                    throw new ef(
                                        "Rotor resource is not provided",
                                        {
                                            code: "E_ROTOR_RESOURCE_NOT_PROVIDED",
                                            data: {
                                                type: a.type,
                                                meta: a.meta,
                                            },
                                        },
                                    );
                                t = new eE({
                                    data: a,
                                    rotorResource: this.rotorResource,
                                    logger: this.logger,
                                    variables:
                                        null == (l = this.variables)
                                            ? void 0
                                            : l[Z.K.Vibe],
                                });
                                break;
                            case Z.K.Various:
                                if (!this.tracksResource)
                                    throw new ef(
                                        "Tracks resource is not provided",
                                        {
                                            code: "E_TRACKS_RESOURCE_NOT_PROVIDED",
                                            data: {
                                                type: a.type,
                                                meta: a.meta,
                                            },
                                        },
                                    );
                                t = new eb({
                                    data: a,
                                    tracksResource: this.tracksResource,
                                    logger: this.logger,
                                    variables:
                                        null == (n = this.variables)
                                            ? void 0
                                            : n[Z.K.Various],
                                });
                                break;
                            case Z.K.Generative:
                                if (!this.rotorResource)
                                    throw new ef(
                                        "Rotor resource is not provided",
                                        {
                                            code: "E_ROTOR_RESOURCE_NOT_PROVIDED",
                                            data: {
                                                type: a.type,
                                                meta: a.meta,
                                            },
                                        },
                                    );
                                t = new eC({
                                    data: a,
                                    rotorResource: this.rotorResource,
                                    logger: this.logger,
                                    variables:
                                        null == (o = this.variables)
                                            ? void 0
                                            : o[Z.K.Generative],
                                });
                                break;
                            case Z.K.Radio:
                                if (!this.radioStationsResource)
                                    throw new ef(
                                        "Radio stations resource is not provided",
                                        {
                                            code: "E_RADIO_STATIONS_RESOURCE_NOT_PROVIDED",
                                            data: {
                                                type: a.type,
                                                meta: a.meta,
                                            },
                                        },
                                    );
                                t = new eA({
                                    data: a,
                                    radioStationsResource:
                                        this.radioStationsResource,
                                    logger: this.logger,
                                    variables:
                                        null == (d = this.variables)
                                            ? void 0
                                            : d[Z.K.Radio],
                                });
                        }
                    } catch (e) {
                        throw new ef("Error while creating context", {
                            cause: (0, R.createObjectFromError)(e),
                            data: { type: a.type, meta: a.meta },
                        });
                    }
                    if (null !== t) return t;
                    throw new ef(
                        "Cannot create context with nonexistent type",
                        {
                            code: "E_NONEXISTENT_CONTEXT_TYPE",
                            data: { type: a.type, meta: a.meta },
                        },
                    );
                }
                constructor(e) {
                    (0, w._)(this, "logger", void 0),
                        (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "albumsResource", void 0),
                        (0, w._)(this, "usersResource", void 0),
                        (0, w._)(this, "artistsResource", void 0),
                        (0, w._)(this, "rotorResource", void 0),
                        (0, w._)(this, "tracksResource", void 0),
                        (0, w._)(this, "playlistResource", void 0),
                        (0, w._)(this, "radioStationsResource", void 0);
                    let {
                        variables: t,
                        logger: a,
                        rotorResource: i,
                        usersResource: r,
                        playlistResource: s,
                        tracksResource: l,
                        albumsResource: n,
                        artistsResource: o,
                        radioStationsResource: d,
                    } = e;
                    (this.albumsResource = null != n ? n : null),
                        (this.artistsResource = null != o ? o : null),
                        (this.rotorResource = null != i ? i : null),
                        (this.usersResource = null != r ? r : null),
                        (this.tracksResource = null != l ? l : null),
                        (this.playlistResource = null != s ? s : null),
                        (this.radioStationsResource = null != d ? d : null),
                        (this.variables = t),
                        (this.logger = a);
                }
            }
            var eN = a(58624),
                eR = a(51379);
            function ew(e) {
                return (
                    !!(0, eN.i)(e) &&
                    !!e.data.meta.session &&
                    e.data.meta.session.wave.type === eR.y.MIX
                );
            }
            function ex(e) {
                return (null == e ? void 0 : e.data.type) === Z.K.Album;
            }
            class eO {
                set positionSec(e) {
                    this.internalPositionSec = e;
                }
                get positionSec() {
                    return void 0 !== this.internalPositionSec
                        ? this.internalPositionSec
                        : ew(this.context) &&
                            "mixFade" in this.entity.data.meta &&
                            void 0 !== this.entity.data.meta.mixFade
                          ? this.entity.data.meta.mixFade.inStart
                          : void 0;
                }
                canBePlayed(e) {
                    let t =
                            "playDisliked" in this.context.data &&
                            void 0 !== this.context.data.playDisliked &&
                            this.context.data.playDisliked,
                        { entityChangeMethod: a, index: i } = e,
                        r =
                            t ||
                            a === O.So.SET_INDEX ||
                            (a === O.So.PLAY_CONTEXT && void 0 !== i),
                        s = a === O.So.SET_INDEX,
                        l = !r && this.entity.isDisliked,
                        n = !s && this.entity.hidden;
                    return (
                        !!(
                            this.entity.isAvailable &&
                            (!this.entity.isExplicit ||
                                !1 !== e.filterParams.allowExplicit)
                        ) && (l ? !!(0, eN.i)(this.context) : !n)
                    );
                }
                getCrossParams() {
                    return ew(this.context) &&
                        "mixFade" in this.entity.data.meta &&
                        void 0 !== this.entity.data.meta.mixFade
                        ? this.entity.data.meta.mixFade
                        : "fade" in this.entity.data.meta &&
                            void 0 !== this.entity.data.meta.fade
                          ? this.entity.data.meta.fade
                          : null;
                }
                canBeCrossedWith(e) {
                    var t;
                    return (
                        !(
                            (!ew(this.context) &&
                                !(null == (t = this.variables)
                                    ? void 0
                                    : t.isCrossFadeEnabled)) ||
                            !("type" in this.entity.data.meta) ||
                            !("type" in e.entity.data.meta) ||
                            !("fade" in this.entity.data.meta) ||
                            !("fade" in e.entity.data.meta) ||
                            ex(this.context)
                        ) &&
                        this.entity.data.meta.type === G.S.MUSIC &&
                        e.entity.data.meta.type === G.S.MUSIC &&
                        void 0 !== this.entity.data.meta.fade &&
                        void 0 !== e.entity.data.meta.fade
                    );
                }
                constructor(e, t, a) {
                    (0, w._)(this, "context", void 0),
                        (0, w._)(this, "entity", void 0),
                        (0, w._)(this, "lastChangeMethod", null),
                        (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "lastSeekPosition", void 0),
                        (0, w._)(this, "internalPositionSec", void 0),
                        (this.context = e),
                        (this.entity = t),
                        (this.variables = a);
                }
            }
            class eG {
                createContext(e) {
                    return this.contextFactory.create(e);
                }
                createEntity(e) {
                    return this.entityFactory.create(e);
                }
                createContextEntityPair(e, t) {
                    return new eO(e, t, this.variables);
                }
                constructor(e) {
                    var t;
                    (0, w._)(this, "entityFactory", void 0),
                        (0, w._)(this, "contextFactory", void 0),
                        (0, w._)(this, "variables", void 0),
                        (this.entityFactory = new J(e.entityFactoryParams)),
                        (this.contextFactory = new eL(e.contextFactoryParams)),
                        (this.variables = null != (t = e.variables) ? t : x);
                }
            }
            var eM = a(43459),
                eK = a(47635),
                nVal = a(79169);
            class eF {
                getAverageFrequencies(e) {
                    if (null === this.currentGraph) return [];
                    let {
                        analyserNode: t,
                        spectrum: a,
                        bufferLength: i,
                        context: r,
                    } = this.currentGraph;
                    if (!t) throw new Y.t("No analyser node has been created");
                    t.getByteFrequencyData(a);
                    let s = r.sampleRate / i,
                        l = 0,
                        n = e.map((e) => {
                            let { low: t, high: a } = e,
                                i = Math.floor(t / s),
                                r = Math.floor(a / s);
                            return (
                                (l = Math.max(l, r)),
                                { startIndex: i, endIndex: r }
                            );
                        }),
                        o = Array(l + 2).fill(0);
                    for (let e = 0; e < l + 1; e++) {
                        var d, u;
                        let t = (null != (d = a[e]) ? d : 0) / 256;
                        o[e + 1] = (null != (u = o[e]) ? u : 0) + t;
                    }
                    return n.map((e) => {
                        let { startIndex: t, endIndex: a } = e,
                            i = o[t],
                            r = o[a + 1];
                        return void 0 === i || void 0 === r
                            ? 0
                            : (r - i) / (a - t + 1);
                    });
                }
                getExponentialVolume = (e) => {
                    let t = Math.pow(0.01, 1 - e);
                    return t > 0.01 ? t : 0;
                };
                getRMS() {
                    const { analyserNode } = this.currentGraph;
                    const bufferLength = analyserNode.fftSize;
                    const dataArray = new Uint8Array(bufferLength);
                    analyserNode.getByteTimeDomainData(dataArray);

                    let sumSquares = 0;
                    const stored = JSON.parse(window.localStorage.getItem(nVal.cYZ.YmPlayerVolume));
                    const volume = this.getExponentialVolume(stored?.value ?? 1);

                    for (let i = 0; i < bufferLength; i++) {
                        const normalized = volume !== 0 ? ((dataArray[i] - 128) / 128) / volume : 0;
                        sumSquares += normalized * normalized;
                    }

                    const meanSquare = sumSquares / bufferLength;
                    const rawRMS = Math.sqrt(meanSquare);

                    if (window.VIBE_ANIMATION_SMOOTH_DYNAMIC_ENERGY?.() ?? false) {
                        const alpha = window.VIBE_ANIMATION_SMOOTH_DYNAMIC_ENERGY_COEFFICENT?.() ?? 0.2;
                        this._prevRms =
                            this._prevRms !== undefined
                                ? this._prevRms * (1 - alpha) + rawRMS * alpha
                                : rawRMS;

                        return this._prevRms;
                    }

                    return rawRMS;
                }
                constructor({ currentAudioElement: e, graphs: t }) {
                    (0, w._)(this, "currentGraph", null),
                        (0, w._)(this, "graphs", void 0),
                        (this.graphs = t),
                        e.onChange((e) => {
                            let t = this.graphs.find(
                                (t) => t.audioElement === e,
                            );
                            t && (this.currentGraph = t);
                        });
                }
            }
            !(function (e) {
                (e.IDLE = "IDLE"),
                    (e.ENABLED = "ENABLED"),
                    (e.DISABLED = "DISABLED");
            })(r || (r = {}));
            class eX {
                enable() {
                    this.state !== r.ENABLED &&
                        (this.graphs.forEach((e) => {
                            e.connectEqualizer();
                        }),
                        (this.state = r.ENABLED));
                }
                disable() {
                    this.state !== r.DISABLED &&
                        (this.graphs.forEach((e) => {
                            e.disconnectEqualizer();
                        }),
                        (this.state = r.DISABLED));
                }
                applyPreset(e) {
                    this.graphs.forEach((t) => {
                        t.setPreamp(e.preamp), t.setBands(e.frequencies);
                    });
                }
                constructor({ preset: e, graphs: t }) {
                    (0, w._)(this, "graphs", void 0),
                        (0, w._)(this, "state", r.DISABLED),
                        (this.graphs = t),
                        e && this.applyPreset(e);
                }
            }
            !(function (e) {
                (e.IDLE = "IDLE"),
                    (e.ENABLED = "ENABLED"),
                    (e.DISABLED = "DISABLED");
            })(s || (s = {}));
            let ej = 1e3 / 60,
                eU = 1 / 60;
            class eB {
                updateGain() {
                    if (this.state !== s.ENABLED) return;
                    let e = this.graph.audioElement.currentTime,
                        t = e >= this.inStart && e <= this.inStop,
                        a = e >= this.outStart && e <= this.outStop;
                    if (t) {
                        let t = this.getFadeInVolume(e);
                        this.graph.gainNode.gain.setValueAtTime(
                            t,
                            this.graph.context.currentTime,
                        );
                    }
                    if (a) {
                        let e = this.getFadeOutVolume();
                        this.graph.gainNode.gain.setValueAtTime(
                            e,
                            this.graph.context.currentTime,
                        );
                    }
                    e > this.inStop &&
                        e < this.outStart &&
                        this.graph.gainNode.gain.setValueAtTime(
                            1,
                            this.graph.context.currentTime,
                        ),
                        e > this.outStop &&
                            this.graph.gainNode.gain.setValueAtTime(
                                0,
                                this.graph.context.currentTime,
                            );
                }
                enable() {
                    (this.graph.gainNode.gain.value = 0),
                        (this.state = s.ENABLED),
                        this.intervalId ||
                            (this.intervalId = setInterval(
                                this.updateGain.bind(this),
                                ej,
                            ));
                }
                enableFadeIn() {
                    (this.graph.gainNode.gain.value = 0),
                        (this.state = s.ENABLED),
                        this.fadeInIntervalId ||
                            (this.fadeInIntervalId = setInterval(
                                this.fadeIn.bind(this),
                                ej,
                            ));
                }
                fadeIn() {
                    if (this.state !== s.ENABLED) return;
                    let e = this.graph.audioElement.currentTime,
                        t = e >= this.inStart && e <= this.inStop,
                        a = this.getFadeInVolume(e);
                    t &&
                        this.graph.gainNode.gain.setValueAtTime(
                            a,
                            this.graph.context.currentTime,
                        );
                }
                enableFadeOut() {
                    (this.state = s.ENABLED),
                        this.fadeOutIntervalId ||
                            (this.fadeOutIntervalId = setInterval(
                                this.fadeOut.bind(this),
                                ej,
                            ));
                }
                fadeOut() {
                    if (this.state !== s.ENABLED) return;
                    let e = this.graph.audioElement.currentTime,
                        t = e >= this.outStart && e <= this.outStop,
                        a = this.getFadeOutVolume();
                    t &&
                        this.graph.gainNode.gain.setValueAtTime(
                            a,
                            this.graph.context.currentTime,
                        ),
                        e > this.outStop &&
                            this.graph.gainNode.gain.setValueAtTime(
                                0,
                                this.graph.context.currentTime,
                            );
                }
                getFadeInVolume(e) {
                    let t = this.inStop - this.inStart;
                    return 0 === e
                        ? 0
                        : Math.min(
                              this.graph.gainNode.gain.value + 1 / (t / eU),
                              1,
                          );
                }
                getFadeOutVolume() {
                    let e = this.outStop - this.outStart;
                    return Math.max(
                        this.graph.gainNode.gain.value - 1 / (e / eU),
                        0,
                    );
                }
                disable() {
                    (this.state = s.DISABLED),
                        this.intervalId &&
                            (clearInterval(this.intervalId),
                            (this.intervalId = null)),
                        this.fadeInIntervalId &&
                            (clearInterval(this.fadeInIntervalId),
                            (this.fadeInIntervalId = null)),
                        this.fadeOutIntervalId &&
                            (clearInterval(this.fadeOutIntervalId),
                            (this.fadeOutIntervalId = null)),
                        (this.graph.gainNode.gain.value = 1);
                }
                setFadeParams(e) {
                    let { inStart: t, inStop: a, outStart: i, outStop: r } = e;
                    (this.inStart = t),
                        (this.inStop = a),
                        (this.outStart = i),
                        (this.outStop = r);
                }
                constructor(e) {
                    (0, w._)(this, "state", s.IDLE),
                        (0, w._)(this, "inStart", 0),
                        (0, w._)(this, "inStop", 0),
                        (0, w._)(this, "outStart", 0),
                        (0, w._)(this, "outStop", 0),
                        (0, w._)(this, "intervalId", null),
                        (0, w._)(this, "fadeInIntervalId", null),
                        (0, w._)(this, "fadeOutIntervalId", null),
                        (0, w._)(this, "graph", void 0),
                        (this.graph = e);
                }
            }
            class eV {
                enable() {
                    this.currentFadeEffect && this.currentFadeEffect.enable();
                }
                disable() {
                    this.currentFadeEffect && this.currentFadeEffect.disable();
                }
                apply(e) {
                    if (this.currentFadeEffect) {
                        if (!e) return void this.currentFadeEffect.disable();
                        this.currentFadeEffect.setFadeParams(e),
                            this.currentFadeEffect.enable();
                    }
                }
                constructor({ currentAudioElement: e, graphs: t }) {
                    (0, w._)(this, "fadeEffects", []),
                        (0, w._)(this, "currentFadeEffect", null),
                        t.forEach((e) => {
                            this.fadeEffects.push(new eB(e));
                        }),
                        e.onChange((e) => {
                            let t = this.fadeEffects.find(
                                (t) => t.graph.audioElement === e,
                            );
                            t && (this.currentFadeEffect = t);
                        });
                }
            }
            class eq {
                enableCrossfade() {
                    let { currentEntity: e, nextEntity: t } =
                            this.playback.state.queueState,
                        a =
                            this.playback.state.mediaPlayersStore.value[
                                F.e.AUDIO
                            ];
                    if (!e.value || !t.value || !a || !(0, O.uo)(a)) return;
                    let i = e.value.getCrossParams(),
                        r = t.value.getCrossParams();
                    if (!i || !r) return;
                    let s = this.fadeEffects.find(
                            (e) =>
                                !!a.crossOutMediaPlayer &&
                                e.graph.audioElement ===
                                    a.crossOutMediaPlayer.currentAudioElement
                                        .value,
                        ),
                        l = this.fadeEffects.find(
                            (e) =>
                                !!a.crossInMediaPlayer &&
                                e.graph.audioElement ===
                                    a.crossInMediaPlayer.currentAudioElement
                                        .value,
                        );
                    s &&
                        l &&
                        (s.setFadeParams(i),
                        l.setFadeParams(r),
                        s.enableFadeOut(),
                        l.enableFadeIn());
                }
                enableFastFade() {
                    let { currentEntity: e } = this.playback.state.queueState,
                        t =
                            this.playback.state.mediaPlayersStore.value[
                                F.e.AUDIO
                            ];
                    if (!e.value || !t || !(0, O.uo)(t)) return;
                    let a = e.value.getCrossParams(),
                        i = this.fadeEffects.find(
                            (e) =>
                                e.graph.audioElement ===
                                t.currentAudioElement.value,
                        );
                    if (!a || !i) return;
                    let r = a.inStop - a.inStart,
                        s = { ...a, inStop: a.inStart + r / 4 };
                    i.setFadeParams(s), i.enableFadeIn();
                }
                disableFade() {
                    this.fadeEffects.forEach((e) => {
                        e.disable();
                    });
                }
                canEnableFastFade(e) {
                    let { currentEntity: t } = this.playback.state.queueState;
                    return !!(t.value && !e && ew(t.value.context));
                }
                constructor({ graphs: e, playback: t }) {
                    (0, w._)(this, "playback", void 0),
                        (0, w._)(this, "fadeEffects", []),
                        (this.playback = t),
                        e.forEach((e) => {
                            this.fadeEffects.push(new eB(e));
                        });
                    let a = t.state.mediaPlayersStore.value[F.e.AUDIO];
                    a &&
                        (0, O.uo)(a) &&
                        (a.isReadyForAudioEffect.onChange(
                            (e) => {
                                e ? this.enableCrossfade() : this.disableFade();
                            },
                            { skipFirstChange: !0 },
                        ),
                        a.isReadyForAudioEffectInStart.onChange(
                            (e) => {
                                e &&
                                    this.canEnableFastFade(
                                        a.isReadyForAudioEffect.value,
                                    ) &&
                                    this.enableFastFade(),
                                    e || this.disableFade();
                            },
                            { skipFirstChange: !0 },
                        ));
                }
            }
            class eY {
                apply(e) {
                    this.durationMs = e;
                }
                constructor({ playback: e }) {
                    (0, w._)(this, "playback", null),
                        (0, w._)(this, "durationMs", void 0),
                        (this.playback = e),
                        this.playback.state.playerState.progress.onChange(
                            (e) => {
                                var t, a;
                                let i =
                                        (null != (t = this.durationMs)
                                            ? t
                                            : 0) / 1e3,
                                    r = e && Math.abs(e.duration - i) > 1;
                                e &&
                                    e.position > i &&
                                    r &&
                                    (null == (a = this.playback) ||
                                        a.moveForward());
                            },
                        );
                }
            }
            !(function (e) {
                (e.HIGHSHELF = "highshelf"),
                    (e.PEAKING = "peaking"),
                    (e.LOWSHELF = "lowshelf");
            })(l || (l = {})),
                (function (e) {
                    (e.SUSPENDED = "suspended"),
                        (e.RUNNING = "running"),
                        (e.CLOSED = "closed");
                })(n || (n = {}));
            class eW {
                connectNodes() {
                    let { useAnalyser: e, useGain: t } = this.config;
                    t &&
                        e &&
                        (this.sourceNode.connect(this.gainNode),
                        this.gainNode.connect(this.analyserNode),
                        this.analyserNode.connect(this.context.destination)),
                        t &&
                            !e &&
                            (this.sourceNode.connect(this.gainNode),
                            this.gainNode.connect(this.context.destination)),
                        !t &&
                            e &&
                            (this.sourceNode.connect(this.analyserNode),
                            this.analyserNode.connect(
                                this.context.destination,
                            )),
                        t ||
                            e ||
                            this.sourceNode.connect(this.context.destination);
                }
                connectEqualizer() {
                    let { useAnalyser: e, useGain: t } = this.config,
                        a = this.bands[this.bands.length - 1];
                    a &&
                        (this.sourceNode.disconnect(),
                        this.sourceNode.connect(this.preamp),
                        t && a.connect(this.gainNode),
                        !t && e && a.connect(this.analyserNode),
                        t || e || a.connect(this.context.destination));
                }
                disconnectEqualizer() {
                    let { useAnalyser: e, useGain: t } = this.config,
                        a = this.bands[this.bands.length - 1];
                    a &&
                        (this.sourceNode.disconnect(),
                        a.disconnect(),
                        t && this.sourceNode.connect(this.gainNode),
                        !t && e && this.sourceNode.connect(this.analyserNode),
                        t ||
                            e ||
                            this.sourceNode.connect(this.context.destination));
                }
                setBands(e) {
                    0 === this.bands.length
                        ? (this.bands = this.connectBandsBetween(
                              this.createBandsByFrequencies(e),
                          ))
                        : this.updateBands(e);
                }
                setPreamp(e) {
                    this.preamp.gain.linearRampToValueAtTime(
                        e,
                        this.context.currentTime + 0.3,
                    );
                }
                createBandsByFrequencies(e) {
                    return e.map((t, a) => {
                        let { key: i, value: r } = t;
                        return this.createBand(
                            this.getBiquadFilterType(a, e.length),
                            i,
                            r,
                        );
                    });
                }
                createBand(e, t, a) {
                    let i = this.context.createBiquadFilter();
                    return (
                        (i.type = e),
                        (i.frequency.value = t),
                        (i.Q.value = 1),
                        a &&
                            i.gain.setValueAtTime(
                                a,
                                this.context.currentTime + 0.3,
                            ),
                        i
                    );
                }
                getBiquadFilterType(e, t) {
                    return 0 === e
                        ? l.LOWSHELF
                        : e === t - 1
                          ? l.HIGHSHELF
                          : l.PEAKING;
                }
                connectBandsBetween(e) {
                    let t = this.preamp;
                    return (
                        e.forEach((e) => {
                            t.connect(e), (t = e);
                        }),
                        e
                    );
                }
                updateBands(e) {
                    this.bands.forEach((t, a) => {
                        let i = e[a];
                        i &&
                            t.gain.setValueAtTime(
                                i.value,
                                this.context.currentTime + 0.3,
                            );
                    });
                }
                createAnalyzerNode(e) {
                    let t = e.createAnalyser();
                    return (t.fftSize = 1024), (t.smoothingTimeConstant = 0.4), t;
                }
                checkAndResumeAudioContext(e) {
                    let t = () => {
                        e.resume().then(() => {
                            document.body.removeEventListener(
                                "touchend",
                                t,
                                !0,
                            ),
                                document.body.removeEventListener(
                                    "click",
                                    t,
                                    !0,
                                ),
                                document.body.removeEventListener(
                                    "keydown",
                                    t,
                                    !0,
                                );
                        });
                    };
                    e.state === n.SUSPENDED &&
                        (document.body.addEventListener("touchend", t, !0),
                        document.body.addEventListener("click", t, !0),
                        document.body.addEventListener("keydown", t, !0));
                }
                constructor(e, t) {
                    (0, w._)(this, "audioElement", void 0),
                        (0, w._)(this, "context", void 0),
                        (0, w._)(this, "sourceNode", void 0),
                        (0, w._)(this, "preamp", void 0),
                        (0, w._)(this, "bands", []),
                        (0, w._)(this, "analyserNode", void 0),
                        (0, w._)(this, "bufferLength", 0),
                        (0, w._)(this, "spectrum", new Uint8Array()),
                        (0, w._)(this, "gainNode", void 0),
                        (0, w._)(this, "config", void 0),
                        (this.audioElement = e),
                        (this.context = new AudioContext()),
                        this.checkAndResumeAudioContext(this.context),
                        (this.sourceNode =
                            this.context.createMediaElementSource(
                                this.audioElement,
                            )),
                        (this.analyserNode = this.createAnalyzerNode(
                            this.context,
                        )),
                        (this.bufferLength =
                            this.analyserNode.frequencyBinCount),
                        (this.spectrum = new Uint8Array(this.bufferLength)),
                        (this.gainNode = this.context.createGain()),
                        (this.preamp = this.context.createGain()),
                        (this.config = t),
                        this.connectNodes();
                }
            }
            class ez {
                get isAudioContextRequired() {
                    return (
                        !!this.options.useEqualizer ||
                        !!this.options.useAnalyser ||
                        !!this.options.useFade ||
                        !!this.options.useCrossFade
                    );
                }
                createGraphs(e) {
                    let t =
                        !!this.options.useFade || !!this.options.useCrossFade;
                    if ((0, O.s4)(e))
                        return [
                            new eW(e.currentAudioElement.value, {
                                useAnalyser: this.options.useAnalyser,
                                useGain: t,
                            }),
                        ];
                    if ((0, O.uo)(e))
                        return e.audioElementsStore.map(
                            (e) =>
                                new eW(e, {
                                    useAnalyser: this.options.useAnalyser,
                                    useGain: t,
                                }),
                        );
                    throw new Y.t(
                        "Can not create audio graph for this type of media player",
                    );
                }
                initializeContext(e, t) {
                    if (this.isAudioContextRequired) {
                        if (
                            ((this.graphs = this.createGraphs(e)),
                            this.options.useAnalyser &&
                                (this.analyser = new eF({
                                    currentAudioElement: e.currentAudioElement,
                                    graphs: this.graphs,
                                })),
                            this.options.useEqualizer)
                        ) {
                            let e =
                                "object" == typeof this.options.useEqualizer
                                    ? this.options.useEqualizer
                                    : void 0;
                            this.equalizer.value = new eX({
                                graphs: this.graphs,
                                preset: null == e ? void 0 : e.preset,
                            });
                        }
                        this.options.useFade &&
                            (this.fade = new eV({
                                currentAudioElement: e.currentAudioElement,
                                graphs: this.graphs,
                            })),
                            this.options.useCrossFade &&
                                (this.crossfade = new eq({
                                    playback: t,
                                    graphs: this.graphs,
                                }));
                    }
                    this.options.useSmartPreview &&
                        (this.smartPreview = new eY({ playback: t }));
                }
                apply(e) {
                    let { hooks: t, playback: a } = e;
                    a.state.mediaPlayersStore.onChange((e) => {
                        if (void 0 === e) return;
                        let t = e[F.e.AUDIO];
                        void 0 !== t &&
                            ((0, O.s4)(t) || (0, O.uo)(t)) &&
                            this.initializeContext(t, a);
                    }),
                        a.state.playerState.event.onChange(() => {
                            if (this.fade)
                                switch (a.state.playerState.event.value) {
                                    case O.Iu.PLAYING:
                                        this.fade.enable();
                                        break;
                                    case O.Iu.PAUSED:
                                    case O.Iu.STOP:
                                        this.fade.disable();
                                }
                        }),
                        t.beforeMediaStartPlaying.tapPromise(
                            "WebAudioPlugin",
                            () => {
                                var e, t, i;
                                let r,
                                    s,
                                    { currentEntity: l } = a.state.queueState,
                                    n =
                                        null == (e = l.value)
                                            ? void 0
                                            : e.entity;
                                return (
                                    (0, eM.l)(n) &&
                                        ((r =
                                            null ==
                                            (t = n.data.meta.smartPreviewParams)
                                                ? void 0
                                                : t.fade),
                                        (s =
                                            null ==
                                            (i = n.data.meta.smartPreviewParams)
                                                ? void 0
                                                : i.durationMs)),
                                    (0, eK.b)(n) &&
                                        ((r = n.data.meta.fade),
                                        (s = n.data.meta.durationMs)),
                                    this.fade && this.fade.apply(r),
                                    this.smartPreview &&
                                        this.smartPreview.apply(s),
                                    Promise.resolve()
                                );
                            },
                        );
                }
                constructor(e) {
                    (0, w._)(this, "options", void 0),
                        (0, w._)(this, "graphs", []),
                        (0, w._)(this, "analyser", void 0),
                        (0, w._)(this, "equalizer", new et.cJ(null)),
                        (0, w._)(this, "fade", void 0),
                        (0, w._)(this, "smartPreview", void 0),
                        (0, w._)(this, "crossfade", void 0),
                        (this.options = e);
                }
            }
            function eH(e) {
                return (null == e ? void 0 : e.data.type) === M.R.Clip;
            }
            !(function (e) {
                (e.AD = "ad"), (e.SHOT = "shot");
            })(o || (o = {})),
                (function (e) {
                    (e.NONE = "none"), (e.AD = "ad"), (e.JINGLE = "jingle");
                })(d || (d = {})),
                (function (e) {
                    (e.NONE = "none"), (e.AD = "ad"), (e.JINGLE = "jingle");
                })(u || (u = {})),
                (function (e) {
                    (e.VIDEO = "video"), (e.AUDIO = "audio");
                })(c || (c = {}));
            class eQ {
                apply(e) {
                    let { playback: t, hooks: a } = e;
                    a.beforeEntityChange.tapPromise(
                        "AdvertPlugin",
                        () =>
                            new Promise((e) => {
                                if (!this.variables.enabled) return void e();
                                let {
                                    state: {
                                        currentContext: a,
                                        queueState: {
                                            index: { value: i },
                                            order: { value: r },
                                            entityList: { value: s },
                                            currentEntity: { value: l },
                                        },
                                    },
                                } = t;
                                if (void 0 !== a.value) {
                                    let n = r[i + 1],
                                        g = n ? s[n] : void 0,
                                        h = g
                                            ? String(g.entity.data.meta.id)
                                            : void 0,
                                        m = r[i - 1],
                                        y = m ? s[m] : void 0,
                                        p = y
                                            ? String(y.entity.data.meta.id)
                                            : void 0,
                                        v =
                                            ((null == l
                                                ? void 0
                                                : l.entity
                                                      .totalPlayedSeconds) ||
                                                0) /
                                            ((((null == l
                                                ? void 0
                                                : l.entity.data.meta) &&
                                                "durationMs" in
                                                    l.entity.data.meta &&
                                                l.entity.data.meta
                                                    .durationMs) ||
                                                1) /
                                                1e3);
                                    (this.currentTrackId = String(
                                        null == l
                                            ? void 0
                                            : l.entity.data.meta.id,
                                    )),
                                        (this.from = a.value.from),
                                        this.afterTrackResource
                                            .getAfterTrack({
                                                contextItem: String(
                                                    a.value.data.meta.id,
                                                ),
                                                from: a.value.from,
                                                types: o.AD,
                                                nextTrackId: h,
                                                prevTrackId: p,
                                            })
                                            .then((a) => {
                                                var i, r, s;
                                                let l =
                                                    (v >= 0.5 &&
                                                        (null == (i = a.ad)
                                                            ? void 0
                                                            : i.afterPlay) ===
                                                            d.AD) ||
                                                    (v < 0.5 &&
                                                        (null == (r = a.ad)
                                                            ? void 0
                                                            : r.afterSkip) ===
                                                            u.AD);
                                                if (
                                                    "ad" in a &&
                                                    this.advertModule &&
                                                    l
                                                ) {
                                                    let i = eH(
                                                        null ==
                                                            (s =
                                                                t.state
                                                                    .queueState
                                                                    .currentEntity
                                                                    .value)
                                                            ? void 0
                                                            : s.entity,
                                                    )
                                                        ? c.VIDEO
                                                        : void 0;
                                                    t.pause(),
                                                        this.advertModule
                                                            .playAdvert({
                                                                afterTrackResponse:
                                                                    a,
                                                                advertType: i,
                                                            })
                                                            .finally(e);
                                                } else e();
                                            });
                                } else e();
                            }),
                    );
                }
                advertFeedbackCallback() {
                    this.adsResource.saveAds({
                        from: this.from,
                        trackId: this.currentTrackId,
                        type: "ad",
                    });
                }
                constructor(e) {
                    var t;
                    (0, w._)(this, "advertModule", void 0),
                        (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "afterTrackResource", void 0),
                        (0, w._)(this, "adsResource", void 0),
                        (0, w._)(this, "currentTrackId", ""),
                        (0, w._)(this, "from", "");
                    let {
                        afterTrackResource: a,
                        advertModule: i,
                        adsResource: r,
                        variables: s,
                    } = e;
                    (this.afterTrackResource = a),
                        (this.adsResource = r),
                        (this.variables = s),
                        (this.advertModule = i),
                        null == (t = this.advertModule) ||
                            t.setAdvertFeedbackCallback(
                                this.advertFeedbackCallback.bind(this),
                            );
                }
            }
            var e$ = a(19679),
                eJ = a(5471);
            function eZ(e) {
                let t = e$.FM.r.PAUSE;
                switch (e.status.value) {
                    case O.MT.BUFFERING:
                        t = e$.FM.r.BUFFERING;
                        break;
                    case O.MT.ENDED:
                    case O.MT.STOPPED:
                        t = e$.FM.r.END;
                        break;
                    case O.MT.PLAYING:
                        t = e$.FM.r.PLAY;
                        break;
                    case O.MT.PAUSED:
                    case O.MT.IDLE:
                    case O.MT.LOADING_MEDIA_SOURCE:
                        t = e$.FM.r.PAUSE;
                }
                return t;
            }
            class e0 {
                createTelemetry(e) {
                    (this.vsid = (0, R.createVsid)(
                        e.playbackInitializationTime,
                        this.playerTypeForVsid,
                    )),
                        (this.telemetry = new e$.YT({
                            getState: () => {
                                let {
                                    progress: {
                                        value: {
                                            duration: t,
                                            position: a,
                                            remainingBufferedTime: i,
                                        },
                                    },
                                    volume: r,
                                } = e.state.playerState;
                                return {
                                    duration: (0, eJ.fP)(t),
                                    currentTime: (0, eJ.fP)(a),
                                    utcStartTime: void 0,
                                    videoType: "VOD",
                                    isFullscreen: !1,
                                    volume: r.value,
                                    muted: 0 === r.value,
                                    remainingBufferedTime: {
                                        total: (0, eJ.fP)(null != i ? i : 0),
                                    },
                                    playingState: eZ(e.state.playerState),
                                    videoSize: void 0,
                                    liveLatency: void 0,
                                    videoTracks: [],
                                    audioTrack: void 0,
                                    isVisible: !1,
                                };
                            },
                            sendLog: (e, t) => {
                                this.telemetryResource.log({
                                    payload: e,
                                    urlParams: t,
                                });
                            },
                            playerInfo: {
                                service: this.service,
                                version: "1.0.0",
                                vsid: this.vsid,
                                isVideoADB: !1,
                            },
                        })),
                        this.telemetry.setStaticParams({
                            labels: { from: this.from },
                        });
                }
                logEvent(e, t) {
                    var a;
                    null == (a = this.telemetry) || a.logEvent(e, t);
                }
                logError(e, t) {
                    var a;
                    null == (a = this.telemetry) || a.logError(e, t);
                }
                setPlayingState(e) {
                    var t;
                    let a = eZ(e);
                    null == (t = this.telemetry) || t.setPlayingState(a);
                }
                setStaticParams(e, t) {
                    var a;
                    null == (a = this.telemetry) || a.setStaticParams(e, t);
                }
                onBeforeSetSource() {
                    var e;
                    return null == (e = this.telemetry)
                        ? void 0
                        : e.onBeforeSetSource();
                }
                onSetSource(e) {
                    var t;
                    null == (t = this.telemetry) ||
                        t.onSetSource(e, { streams: [], params: {} });
                }
                onSeek(e, t) {
                    var a;
                    null == (a = this.telemetry) ||
                        a.onSeek({ oldPosition: e, newPosition: t });
                }
                logYaspEvent(e, t) {
                    var a;
                    null == (a = this.telemetry) ||
                        a.logEvent({ name: e, data: t });
                }
                logYaspError(e) {
                    var t;
                    null == (t = this.telemetry) ||
                        t.logError({ error: e.detail });
                }
                constructor({
                    telemetryResource: e,
                    service: t,
                    from: a,
                    playerTypeForVsid: i,
                }) {
                    (0, w._)(this, "telemetry", void 0),
                        (0, w._)(this, "telemetryResource", void 0),
                        (0, w._)(this, "from", void 0),
                        (0, w._)(this, "service", void 0),
                        (0, w._)(this, "playerTypeForVsid", void 0),
                        (0, w._)(this, "vsid", void 0),
                        (this.telemetryResource = e),
                        (this.service = t),
                        (this.from = a),
                        (this.playerTypeForVsid = i);
                }
            }
            class e1 {
                send(e) {
                    new Promise((t) => {
                        let a = { [e.name]: { ...e.data } };
                        this.yaMetrika.count(a, "player-metrics"), t();
                    });
                }
                constructor(e) {
                    (0, w._)(this, "yaMetrika", void 0), (this.yaMetrika = e);
                }
            }
            var e3 = a(94967),
                e6 = a(11936);
            class e8 extends e3.X {
                async sendPlays(e, t) {
                    return (
                        await this.httpClient.post(
                            "plays",
                            this.createHttpOptions({
                                timeoutKey: "sendPlays",
                                params: e,
                                searchParams: (0, e6.P)({
                                    clientNow: e.clientNow,
                                }),
                                json: { plays: e.plays },
                                signal: null == t ? void 0 : t.signal,
                            }),
                        )
                    ).json();
                }
                constructor(e, t) {
                    super(e, t),
                        (0, w._)(this, "httpClient", void 0),
                        (0, w._)(this, "config", void 0),
                        (this.httpClient = e),
                        (this.config = t);
                }
            }
            var e9 = a(61979),
                e2 = a(66928);
            !(function (e) {
                (e.START = "start"),
                    (e.END = "end"),
                    (e.PLAYING = "playing"),
                    (e.PAUSE = "pause");
            })(g || (g = {}));
            var e7 = a(96537),
                e5 = a(35689),
                e4 = a(28320),
                te = a(29889),
                tt = a(38025);
            let ta = (e) =>
                    !!(
                        e &&
                        "object" == typeof e &&
                        "playId" in e &&
                        "totalPlayedSeconds" in e
                    ),
                ti = (e) => {
                    let t = [
                        e.find((e) => 0 === e.totalPlayedSeconds),
                        (0, e4.A)(e, "totalPlayedSeconds"),
                    ];
                    return (0, te.A)(t.filter(ta), "totalPlayedSeconds");
                };
            class tr {
                use(e) {
                    return this.middlewares.push(e), this;
                }
                run(e) {
                    let t = (a) =>
                        a >= this.middlewares.length
                            ? Promise.resolve()
                            : (0, this.middlewares[a])(e, () => t(a + 1));
                    return t(0);
                }
                constructor() {
                    (0, w._)(this, "middlewares", []);
                }
            }
            class ts {
                getResult() {
                    return this.playData;
                }
                constructor(e) {
                    (0, w._)(this, "contextEntityPair", void 0),
                        (0, w._)(this, "playType", void 0),
                        (0, w._)(this, "totalPlayedSeconds", void 0),
                        (0, w._)(this, "endPositionSeconds", void 0),
                        (0, w._)(this, "dynamicData", void 0),
                        (0, w._)(this, "hooks", void 0),
                        (0, w._)(this, "playback", void 0),
                        (0, w._)(this, "operation", void 0),
                        (0, w._)(this, "clock", void 0),
                        (0, w._)(this, "playData", {}),
                        (this.contextEntityPair = e.contextEntityPair),
                        (this.playType = e.playType),
                        (this.totalPlayedSeconds = e.totalPlayedSeconds),
                        (this.endPositionSeconds = e.endPositionSeconds),
                        (this.dynamicData = e.dynamicData),
                        (this.hooks = e.hooks),
                        (this.playback = e.playback),
                        (this.operation = e.operation),
                        (this.clock = e.clock);
                }
            }
            class tl extends Y.t {
                constructor(e, { code: t = "E_PLAYS", ...a } = {}) {
                    super(e, { code: t, ...a }),
                        (0, w._)(this, "name", "PlaysException"),
                        Object.setPrototypeOf(this, tl.prototype);
                }
            }
            let tn = (e, t) => {
                var a, i, r;
                let { entity: s, context: l } = e.contextEntityPair;
                if (!s.playId) {
                    let t = {};
                    (t.contextId = l.data.meta.id),
                        (t.entityId = s.data.meta.id);
                    let a = new tl(
                        "Trying to ".concat(e.operation, " without playId"),
                        { data: t },
                    );
                    throw (null == (i = e.hooks) || i.afterError.promise(a), a);
                }
                let n =
                    (null == (a = s.data.additional) ? void 0 : a.from) ||
                    l.from;
                if (!n) {
                    let t = new tl(
                        "from field is required for ".concat(
                            e.operation,
                            ", but was not found in plays data",
                        ),
                    );
                    throw (null == (r = e.hooks) || r.afterError.promise(t), t);
                }
                return (
                    (e.playData.playId = s.playId), (e.playData.from = n), t()
                );
            };
            function to(e) {
                return (null == e ? void 0 : e.data.type) === Z.K.Radio;
            }
            let td = (e, t) => {
                    var a, i;
                    let { entity: r, context: s } = e.contextEntityPair,
                        l = 0;
                    (0, eM.l)(r)
                        ? "smartPreviewParams" in r.data.meta &&
                          (null == (a = r.data.meta.smartPreviewParams)
                              ? void 0
                              : a.durationMs) &&
                          (l = r.data.meta.smartPreviewParams.durationMs / 1e3)
                        : "durationMs" in r.data.meta &&
                          r.data.meta.durationMs &&
                          (l = r.data.meta.durationMs / 1e3);
                    let n = e.totalPlayedSeconds,
                        o = e.endPositionSeconds;
                    if (
                        (0.5 > Math.abs(l - e.totalPlayedSeconds) && (n = l),
                        0.5 > Math.abs(l - e.endPositionSeconds) && (o = l),
                        n > 2e3)
                    ) {
                        let t = "Plays error. Too big play time";
                        e.playType === g.PLAYING
                            ? (t = "".concat(
                                  t,
                                  " while trying to send partial play report",
                              ))
                            : e.playType === g.PAUSE &&
                              (t = "".concat(
                                  t,
                                  " while trying to send pause play report",
                              ));
                        let a = new tl(t, {
                            code: "E_PLAYS_BIG_PLAY_TIME",
                            data: {
                                timeStagesOfPlayback: r.timeStagesOfPlayback,
                                contextId: s.data.meta.id,
                                entityId: r.data.meta.id,
                                totalPlayedSeconds: n,
                                trackLengthSeconds: l,
                                playId: r.playId,
                                isOnStart: e.playType === g.START,
                                entityListLength:
                                    e.playback.state.queueState.entityList.value
                                        .length,
                                index: e.playback.state.queueState.index.value,
                                repeat: e.playback.state.queueState.repeat
                                    .value,
                            },
                        });
                        null == (i = e.hooks) || i.afterError.promise(a);
                    }
                    return (
                        to(s) && (o = n),
                        (e.playData.totalPlayedSeconds = n),
                        (e.playData.endPositionSeconds = o),
                        (e.playData.trackLengthSeconds = l),
                        t()
                    );
                },
                tu = (e) => {
                    if (e.mediaSourceData && "urls" in e.mediaSourceData.data) {
                        let t = e.mediaSourceData.data.urls[0];
                        if (t && t.startsWith("blob:")) return !0;
                    }
                    return !1;
                };
            function tc(e) {
                return (null != e ? e : new Date()).toISOString();
            }
            let tg = (e, t) => {
                    var a;
                    let { entity: i, context: r } = e.contextEntityPair;
                    (e.playData.timestamp = tc(e.clock())),
                        (e.playData.albumId = (function (e) {
                            let t;
                            if ("albums" in e.data.meta) {
                                let {
                                    data: {
                                        meta: { albums: a },
                                    },
                                } = e;
                                if (a) {
                                    let e = a[0];
                                    e && (t = String(e.id));
                                }
                            }
                            return t;
                        })(i)),
                        (e.playData.context = r.data.type),
                        (e.playData.contextItem = String(r.data.meta.id)),
                        (e.playData.addTracksToPlayerTime =
                            i.addTracksToPlayerTime),
                        (e.playData.fromCache = tu(i)),
                        (e.playData.isRestored = !!i.data.isRestored);
                    let s =
                        (null == (a = i.data.additional)
                            ? void 0
                            : a.utmLink) ||
                        r.utmLink ||
                        {};
                    return (e.playData = { ...e.playData, ...s }), t();
                },
                th = (e, t) => (
                    (e.playData.audioAuto = "none"),
                    (e.playData.audioOutputName = "Динамик"),
                    (e.playData.audioOutputType = "Speaker"),
                    t()
                ),
                tm = (e, t) => {
                    let a,
                        { entity: i, context: r } = e.contextEntityPair,
                        s = String(i.data.meta.id);
                    if ((0, e2.S)(r)) {
                        var l;
                        a = {
                            generativeStreamId: (
                                null == (l = r.data.meta.stream) ? void 0 : l.id
                            )
                                ? String(r.data.meta.stream.id)
                                : void 0,
                        };
                    } else a = { trackId: s };
                    return (e.playData = { ...e.playData, ...a }), t();
                },
                ty = (e, t) => {
                    let { context: a } = e.contextEntityPair;
                    if ((0, eN.i)(a) && a.data.meta.session) {
                        var i, r;
                        let { dynamicData: t } = e;
                        (e.playData.radioSessionId =
                            null != (i = t.radioSessionId)
                                ? i
                                : a.data.meta.session.radioSessionId),
                            (e.playData.batchId =
                                null != (r = t.radioBatchId)
                                    ? r
                                    : a.data.meta.session.batchId),
                            (e.playData.isFromAutoflow = t.isFromAutoflow),
                            (e.playData.isFromPumpkin = t.isFromPumpkin),
                            (e.playData.context = "radio"),
                            (e.playData.contextItem =
                                a.data.meta.session.wave.stationId);
                    }
                    return t();
                };
            function tp(e) {
                return (null == e ? void 0 : e.data.type) === Z.K.Playlist;
            }
            let tv = (e, t) => {
                let { context: a } = e.contextEntityPair;
                return (
                    tp(a) &&
                        ((e.playData.playlistId = ""
                            .concat(a.data.meta.uid, ":")
                            .concat(a.data.meta.kind)),
                        (e.playData.contextItem = ""
                            .concat(a.data.meta.uid, ":")
                            .concat(a.data.meta.kind))),
                    t()
                );
            };
            var tS = a(77282),
                tP = a(40178);
            let tE = (e, t) => {
                    let { context: a } = e.contextEntityPair;
                    if ((0, tS.p)(a)) {
                        var i;
                        let t = [tP.b.Search, tP.b.Other],
                            r =
                                null != (i = a.data.overrideContextType)
                                    ? i
                                    : tP.b.Other;
                        (e.playData.context = r),
                            t.includes(r) && (e.playData.contextItem = null);
                    }
                    return t();
                },
                tb = (e, t) => {
                    let { entity: a } = e.contextEntityPair;
                    return (0, eM.l)(a) && (e.playData.smartPreview = !0), t();
                },
                tf = (e, t) => {
                    var a, i;
                    let { dynamicData: r, playType: s } = e;
                    return (
                        (e.playData.seek = null != (a = r.seek) && a),
                        (e.playData.pause = null != (i = r.pause) && i),
                        (e.playData.startTimestamp = r.startTimestamp),
                        s !== g.START &&
                            (e.playData.maxPlayerStage = r.maxPlayerStage),
                        t()
                    );
                };
            !(function (e) {
                (e.FINISH = "finish"),
                    (e.SKIP = "skip"),
                    (e.DISLIKE = "dislike"),
                    (e.BACK_SKIP = "back_skip"),
                    (e.OTHER_TRACK = "other_track"),
                    (e.IN_PROGRESS = "in_progress");
            })(h || (h = {})),
                (function (e) {
                    (e.AFTER_MEDIA_END_PLAYING = "AFTER_MEDIA_END_PLAYING"),
                        (e.BEFORE_CONTEXT_SET = "BEFORE_CONTEXT_SET"),
                        (e.BEFORE_ENTITY_CHANGE = "BEFORE_ENTITY_CHANGE");
                })(m || (m = {}));
            let tI = (e, t) => {
                let a,
                    { dynamicData: i, contextEntityPair: r, playType: s } = e;
                if (void 0 !== i.changeReason)
                    return (e.playData.changeReason = i.changeReason), t();
                if (!i.hookSource)
                    return (
                        s === g.PLAYING &&
                            (e.playData.changeReason = h.IN_PROGRESS),
                        t()
                    );
                switch (i.hookSource) {
                    case m.AFTER_MEDIA_END_PLAYING:
                        a = i.wasDislikedOnChange
                            ? h.DISLIKE
                            : !(function (e) {
                                    return (
                                        (0, e2.S)(e.context) || to(e.context)
                                    );
                                })(r)
                              ? h.FINISH
                              : h.OTHER_TRACK;
                        break;
                    case m.BEFORE_CONTEXT_SET:
                        a = h.OTHER_TRACK;
                        break;
                    case m.BEFORE_ENTITY_CHANGE:
                        a = (function (e, t) {
                            if (!e) return h.OTHER_TRACK;
                            switch (e) {
                                case O.So.AUTO_MOVE_FORWARD:
                                    return h.FINISH;
                                case O.So.MOVE_FORWARD:
                                    return t ? h.DISLIKE : h.SKIP;
                                case O.So.MOVE_BACKWARD:
                                    return h.BACK_SKIP;
                                default:
                                    return h.OTHER_TRACK;
                            }
                        })(i.entityChangeMethod, i.wasDislikedOnChange);
                }
                return (e.playData.changeReason = a), t();
            };
            class tk {
                buildPlayDataPipeline() {
                    return new tr()
                        .use(tn)
                        .use(td)
                        .use(tg)
                        .use(th)
                        .use(tm)
                        .use(ty)
                        .use(tv)
                        .use(tE)
                        .use(tb)
                        .use(tf)
                        .use(tI);
                }
                createPlay(e) {
                    let t = new ts({
                        ...e,
                        hooks: this.hooks,
                        playback: this.playback,
                        clock: this.clock,
                    });
                    return this.playDataPipeline
                        .run(t)
                        .then(() => t.getResult())
                        .catch(
                            (e) => (
                                console.error(
                                    "Critical error in play data pipeline:",
                                    e,
                                ),
                                null
                            ),
                        );
                }
                createStartPlay(e) {
                    e.entity.addTracksToPlayerTime = ""
                        .concat(Math.random().toString().slice(2), "-")
                        .concat(Math.ceil(Number(this.clock()) / 1e3));
                    let t = this.dynamicDataManager.getDynamicDataByPlayId(
                        e.entity.playId,
                    );
                    return this.createPlay({
                        contextEntityPair: e,
                        playType: g.START,
                        totalPlayedSeconds: 0,
                        endPositionSeconds: 0,
                        dynamicData: t,
                        operation: "send start entity play",
                    });
                }
                createProgressPlay(e, t, a, i) {
                    let r = this.dynamicDataManager.getDynamicDataByPlayId(
                        e.entity.playId,
                    );
                    return this.createPlay({
                        contextEntityPair: e,
                        playType: g.PLAYING,
                        totalPlayedSeconds: t,
                        endPositionSeconds: a,
                        dynamicData: r,
                        operation: i,
                    });
                }
                createEndPlay(e, t, a) {
                    let i = this.dynamicDataManager.getDynamicDataByPlayId(
                        e.entity.playId,
                    );
                    return this.createPlay({
                        contextEntityPair: e,
                        playType: g.END,
                        totalPlayedSeconds: t,
                        endPositionSeconds: a,
                        dynamicData: i,
                        operation: "send end entity play",
                    });
                }
                sendStartEntityPlay(e) {
                    if (!e) return Promise.resolve();
                    try {
                        return this.createStartPlay(e).then((t) => {
                            if (t && !this.toggles.disableSendPlaysOnTrackStart)
                                return this.sendPlay(t).catch((t) => {
                                    this.handleSendingError(
                                        t,
                                        "Error while sending plays",
                                        e,
                                    );
                                });
                        });
                    } catch (t) {
                        this.handleSendingError(
                            t,
                            "Error while sending plays",
                            e,
                        );
                    }
                    return Promise.resolve();
                }
                sendPartialPlayReport(e) {
                    if (!e) return Promise.resolve();
                    try {
                        let t = e.entity.playId,
                            a = e.entity.totalPlayedSeconds,
                            i = this.hasSentPartialPlayReportId(t);
                        if (!(0, e2.S)(e.context) && !i && a >= 30.1)
                            return this.createProgressPlay(
                                e,
                                a,
                                this.playback.state.playerState.progress.value
                                    .position,
                                "send partial play report",
                            ).then((t) =>
                                t
                                    ? this.sendPlay(t)
                                          .then(() => {
                                              this.toggles
                                                  .enablePartialPlayReporting &&
                                                  this.addSentPartialPlayReportId(
                                                      t.playId,
                                                  );
                                          })
                                          .catch((t) => {
                                              this.handleSendingError(
                                                  t,
                                                  "Error while sending plays",
                                                  e,
                                              );
                                          })
                                    : Promise.resolve(),
                            );
                    } catch (t) {
                        this.handleSendingError(
                            t,
                            "Error while sending plays partial play report",
                            e,
                        );
                    }
                    return Promise.resolve();
                }
                sendPausePlayReport(e) {
                    if (!e) return Promise.resolve();
                    try {
                        let t = e.entity.playId,
                            a = e.entity.totalPlayedSeconds,
                            i =
                                this.dynamicDataManager.getDynamicDataByPlayId(
                                    t,
                                );
                        return this.createPlay({
                            contextEntityPair: e,
                            playType: g.PAUSE,
                            totalPlayedSeconds: a,
                            endPositionSeconds:
                                this.playback.state.playerState.progress.value
                                    .position,
                            dynamicData: { ...i, changeReason: void 0 },
                            operation: "send pause play report",
                        }).then((t) =>
                            t
                                ? this.sendPlay(t).catch((t) => {
                                      this.handleSendingError(
                                          t,
                                          "Error while sending plays",
                                          e,
                                      );
                                  })
                                : Promise.resolve(),
                        );
                    } catch (t) {
                        this.handleSendingError(
                            t,
                            "Error while sending plays pause play report",
                            e,
                        );
                    }
                    return Promise.resolve();
                }
                sendEndEntityPlay(e) {
                    if (
                        !e ||
                        (this.toggles.enableRemoveDuplicatePlays &&
                            this.hasSentPlayId(e.entity.playId))
                    )
                        return Promise.resolve();
                    this.toggles.enableRemoveDuplicatePlays &&
                        this.addSentPlayId(e.entity.playId);
                    try {
                        return this.createEndPlay(
                            e,
                            e.entity.totalPlayedSeconds,
                            this.playback.state.playerState.progress.value
                                .position,
                        ).then((t) => {
                            if (t)
                                return (
                                    this.clearDynamicData(t.playId),
                                    this.toggles.enablePartialPlayReporting &&
                                        this.clearSentPartialPlayReportId(
                                            t.playId,
                                        ),
                                    this.sendPlay(t)
                                        .catch((t) => {
                                            this.handleSendingError(
                                                t,
                                                "Error while sending plays",
                                                e,
                                            );
                                        })
                                        .finally(() => {
                                            this.resetIsRestoredFlag(e.entity);
                                        })
                                );
                        });
                    } catch (t) {
                        this.handleSendingError(
                            t,
                            "Error while sending plays",
                            e,
                        );
                    }
                    return Promise.resolve();
                }
                sendStoredPlaysData() {
                    this.isSendingPlays.value = !0;
                    let e = this.toggles.limitOfSendingPlaysData || 25;
                    return this.isStorageEnabled()
                        ? this.store
                              .getStoredPlaysData(e)
                              .then((e) => {
                                  let t = this.filterPlaysForSending(e);
                                  if (!t.length) {
                                      this.isSendingPlays.value = !1;
                                      return;
                                  }
                                  this.playsResourceSend(t)
                                      .then(() => {
                                          this.deletePlaysData(t).then(() => {
                                              this.sendStoredPlaysData();
                                          });
                                      })
                                      .catch((e) => {
                                          var a;
                                          (this.isSendingPlays.value = !1),
                                              e instanceof e9.GX &&
                                                  e.statusCode ===
                                                      e9.X1.BAD_REQUEST &&
                                                  this.deletePlaysData(t),
                                              null == (a = this.hooks) ||
                                                  a.afterError.promise(
                                                      new tl(
                                                          "Error while sending plays",
                                                          { cause: e },
                                                      ),
                                                  );
                                      });
                              })
                              .catch((e) => {
                                  var t;
                                  null == (t = this.hooks) ||
                                      t.afterError.promise(e);
                              })
                        : Promise.resolve();
                }
                sendPlay(e) {
                    this.isSendingPlays.value = !0;
                    let t = [e];
                    return this.playsResourceSend(t)
                        .then(() => {
                            this.isStorageEnabled() &&
                                this.deletePlaysData(
                                    t,
                                    (e) => e.totalPlayedSeconds > 0,
                                );
                        })
                        .catch((a) => {
                            throw (
                                (a instanceof e9.GX &&
                                a.statusCode === e9.X1.BAD_REQUEST
                                    ? this.deletePlaysData(t)
                                    : this.storeAndReplace(e),
                                a)
                            );
                        })
                        .finally(() => {
                            if (!this.isStorageEnabled()) {
                                this.isSendingPlays.value = !1;
                                return;
                            }
                            this.sendStoredPlaysData();
                        });
                }
                clearSentPlayIds() {
                    this.sentPlayIds.clear();
                }
                hasSentPlayId(e) {
                    return this.sentPlayIds.has(e);
                }
                addSentPlayId(e) {
                    this.sentPlayIds.add(e);
                }
                addSentPartialPlayReportId(e) {
                    this.sentPartialPlayReportIds.add(e);
                }
                hasSentPartialPlayReportId(e) {
                    return this.sentPartialPlayReportIds.has(e);
                }
                clearSentPartialPlayReportId(e) {
                    this.sentPartialPlayReportIds.delete(e);
                }
                isSendingPlaysValue() {
                    return this.isSendingPlays.value;
                }
                onSendingPlaysStateChange(e) {
                    return this.isSendingPlays.onChange(e);
                }
                resetIsRestoredFlag(e) {
                    e.data.isRestored && (e.data.isRestored = !1);
                }
                handleSendingError(e, t, a) {
                    var i;
                    let r = "",
                        s = "";
                    a &&
                        ((r = a.context.data.meta.id),
                        (s = a.entity.data.meta.id)),
                        null == (i = this.hooks) ||
                            i.afterError.promise(
                                new tl(t, {
                                    cause: e,
                                    data: { contextId: r, entityId: s },
                                }),
                            );
                }
                clearDynamicData(e) {
                    this.dynamicDataManager.clearDynamicData(e);
                }
                setPlaysDataForSending(e) {
                    e.forEach((e) => {
                        let { playId: t } = e;
                        this.sendingInProgressForPlayId.add(t);
                    });
                }
                clearSendedPlaysData(e) {
                    e.forEach((e) => {
                        let { playId: t } = e;
                        this.sendingInProgressForPlayId.has(t) &&
                            this.sendingInProgressForPlayId.delete(t);
                    });
                }
                filterPlaysForSending(e) {
                    var t = e.filter((e) => {
                        let { playId: t } = e;
                        return !this.sendingInProgressForPlayId.has(t);
                    });
                    let a = (0, e5.A)((0, e7.A)(t, "playId"), ti);
                    return (0, tt.A)(a);
                }
                playsResourceSend(e) {
                    return (
                        this.setPlaysDataForSending(e),
                        this.gateway.sendPlays(e).finally(() => {
                            this.clearSendedPlaysData(e);
                        })
                    );
                }
                deletePlaysData(e, t, a) {
                    return this.isStorageEnabled()
                        ? this.store
                              .deleteAllByPlayId(e, t)
                              .then(() => {
                                  if (a) return a();
                              })
                              .catch((e) => {
                                  var t;
                                  null == (t = this.hooks) ||
                                      t.afterError.promise(e);
                              })
                        : Promise.resolve();
                }
                storeAndReplace(e) {
                    return this.isStorageEnabled()
                        ? this.deletePlaysData(
                              [e],
                              (e) => e.totalPlayedSeconds > 0,
                              () => {
                                  var t;
                                  return null == (t = this.store)
                                      ? void 0
                                      : t.storePlaysData(e);
                              },
                          )
                        : Promise.resolve();
                }
                isStorageEnabled() {
                    return (
                        !!this.toggles.enableLocalStoredPlaysData &&
                        this.store.isAvailable()
                    );
                }
                storePlay(e) {
                    return this.storeAndReplace(e);
                }
                sendCurrentEntityEndPlay() {
                    let e = this.playback.state.queueState.currentEntity.value;
                    if (e && this.playback.state.currentContext.value) {
                        if ((0, eN.i)(this.playback.state.currentContext.value))
                            return this.sendEndEntityPlay(e);
                        this.sendEndEntityPlay(e);
                    }
                    return Promise.resolve();
                }
                constructor(e) {
                    (0, w._)(this, "store", void 0),
                        (0, w._)(this, "gateway", void 0),
                        (0, w._)(this, "dynamicDataManager", void 0),
                        (0, w._)(this, "clock", void 0),
                        (0, w._)(this, "toggles", void 0),
                        (0, w._)(this, "hooks", void 0),
                        (0, w._)(this, "playback", void 0),
                        (0, w._)(this, "sentPlayIds", new Set()),
                        (0, w._)(this, "sentPartialPlayReportIds", new Set()),
                        (0, w._)(this, "sendingInProgressForPlayId", new Set()),
                        (0, w._)(this, "isSendingPlays", void 0),
                        (0, w._)(this, "playDataPipeline", void 0),
                        (this.store = e.store),
                        (this.gateway = e.gateway),
                        (this.dynamicDataManager = e.dynamicDataManager),
                        (this.clock = e.clock),
                        (this.toggles = e.toggles),
                        (this.hooks = e.hooks),
                        (this.playback = e.playback),
                        (this.isSendingPlays = new et.cJ(!1)),
                        (this.playDataPipeline = this.buildPlayDataPipeline());
                }
            }
            !(function (e) {
                (e.PREPARE = "prepare"), (e.PLAY = "play");
            })(y || (y = {}));
            class t_ {
                getDynamicDataByPlayId(e) {
                    var t, a, i;
                    let r = this.dynamicDataByPlayId.get(e);
                    return {
                        seek: null != (t = null == r ? void 0 : r.seek) && t,
                        pause: null != (a = null == r ? void 0 : r.pause) && a,
                        maxPlayerStage:
                            null != (i = null == r ? void 0 : r.maxPlayerStage)
                                ? i
                                : y.PREPARE,
                        startTimestamp: null == r ? void 0 : r.startTimestamp,
                        radioSessionId: null == r ? void 0 : r.radioSessionId,
                        radioBatchId: null == r ? void 0 : r.radioBatchId,
                        isFromAutoflow: null == r ? void 0 : r.isFromAutoflow,
                        isFromPumpkin: null == r ? void 0 : r.isFromPumpkin,
                        changeReason: null == r ? void 0 : r.changeReason,
                        hookSource: null == r ? void 0 : r.hookSource,
                        entityChangeMethod:
                            null == r ? void 0 : r.entityChangeMethod,
                        wasDislikedOnChange:
                            null == r ? void 0 : r.wasDislikedOnChange,
                        wasAlreadyDisliked:
                            null == r ? void 0 : r.wasAlreadyDisliked,
                    };
                }
                updateDynamicData(e, t) {
                    var a;
                    let i =
                        null != (a = this.dynamicDataByPlayId.get(e)) ? a : {};
                    this.dynamicDataByPlayId.set(e, { ...i, ...t });
                }
                clearDynamicData(e) {
                    this.dynamicDataByPlayId.delete(e);
                }
                hasDynamicData(e) {
                    return this.dynamicDataByPlayId.has(e);
                }
                markAsAlreadyDisliked(e) {
                    this.updateDynamicData(e, { wasAlreadyDisliked: !0 });
                }
                isAlreadyDisliked(e) {
                    var t;
                    return (
                        null !=
                            (t =
                                this.getDynamicDataByPlayId(
                                    e,
                                ).wasAlreadyDisliked) && t
                    );
                }
                constructor() {
                    (0, w._)(this, "dynamicDataByPlayId", new Map());
                }
            }
            var tT = a(13201);
            function tC(e, t) {
                if (!(0, eN.i)(null == e ? void 0 : e.context) || !e) return;
                let {
                        meta: { session: a, sessionTracks: i },
                        parentContext: r,
                    } = e.context.data,
                    s = null == a ? void 0 : a.radioSessionId,
                    l = i ? i.batchId : null == a ? void 0 : a.batchId,
                    n = i ? i.pumpkin : null == a ? void 0 : a.pumpkin;
                t.updateDynamicData(e.entity.playId, {
                    radioSessionId: s,
                    radioBatchId: l,
                    isFromPumpkin: n,
                    isFromAutoflow: !!r,
                });
            }
            class tD {
                attachSubscriptions() {
                    this.attachPlayerStateEventSubscription(),
                        this.attachProgressSubscriptions();
                }
                attachPlayerStateEventSubscription() {
                    this.playback.state.playerState.event.onChange(() => {
                        let { currentEntity: e } =
                            this.playback.state.queueState;
                        if (!e.value) return;
                        let t = e.value.entity.playId;
                        switch (this.playback.state.playerState.event.value) {
                            case O.Iu.PLAYING:
                                this.handlePlayingEvent(e.value, t);
                                break;
                            case O.Iu.PAUSED:
                                this.handlePausedEvent(e.value, t);
                                break;
                            case O.Iu.SET_PROGRESS:
                                this.handleSetProgressEvent(e.value, t);
                        }
                    });
                }
                handlePlayingEvent(e, t) {
                    tC(e, this.dynamicDataManager),
                        this.dynamicDataManager.updateDynamicData(t, {
                            maxPlayerStage: y.PLAY,
                        });
                }
                handlePausedEvent(e, t) {
                    let a = this.playback.state.playerState.progress.value;
                    Math.abs(a.position - a.duration) > 0.2 &&
                        this.dynamicDataManager.updateDynamicData(t, {
                            pause: !0,
                        }),
                        to(e.context) && this.service.sendPausePlayReport(e);
                }
                handleSetProgressEvent(e, t) {
                    (0, e2.S)(e.context) ||
                        to(e.context) ||
                        this.dynamicDataManager.updateDynamicData(t, {
                            seek: !0,
                        });
                }
                attachProgressSubscriptions() {
                    this.toggles.enableLocalStoredPlaysData &&
                        this.attachStorePlayOnProgress(),
                        this.toggles.enablePartialPlayReporting &&
                            this.attachPartialPlayReporting();
                }
                attachStorePlayOnProgress() {
                    let e = (0, tT.A)(
                        () => {
                            let e =
                                this.playback.state.queueState.currentEntity
                                    .value;
                            !e ||
                                (0, e2.S)(e.context) ||
                                this.service
                                    .createProgressPlay(
                                        e,
                                        e.entity.totalPlayedSeconds,
                                        this.playback.state.playerState.progress
                                            .value.position,
                                        "store play on progress",
                                    )
                                    .then((e) => {
                                        e &&
                                            e.playId &&
                                            e.totalPlayedSeconds > 0 &&
                                            this.service.storePlay(e);
                                    });
                        },
                        this.storePlaysProgressIntervalMs,
                        { trailing: !1 },
                    );
                    this.playback.state.playerState.progress.onChange(e);
                }
                attachPartialPlayReporting() {
                    let e = (0, tT.A)(
                        () => {
                            let e =
                                this.playback.state.queueState.currentEntity
                                    .value;
                            e && this.service.sendPartialPlayReport(e);
                        },
                        2e3,
                        { trailing: !1 },
                    );
                    this.playback.state.playerState.progress.onChange(e);
                }
                constructor(e) {
                    (0, w._)(this, "playback", void 0),
                        (0, w._)(this, "service", void 0),
                        (0, w._)(this, "dynamicDataManager", void 0),
                        (0, w._)(this, "toggles", void 0),
                        (0, w._)(this, "storePlaysProgressIntervalMs", void 0),
                        (this.playback = e.playback),
                        (this.service = e.service),
                        (this.dynamicDataManager = e.dynamicDataManager),
                        (this.toggles = e.toggles),
                        (this.storePlaysProgressIntervalMs =
                            e.storePlaysProgressIntervalMs);
                }
            }
            class tA extends Y.t {
                constructor(e, { code: t = "E_MEDIA_PROVIDER", ...a } = {}) {
                    super(e, { code: t, ...a }),
                        (0, w._)(this, "name", "MediaProviderException"),
                        Object.setPrototypeOf(this, tA.prototype);
                }
            }
            class tL extends tA {
                constructor(
                    e,
                    { code: t = "E_GET_FILE_INFO_MEDIA_PROVIDER", ...a } = {},
                ) {
                    super(e, { code: t, ...a }),
                        (0, w._)(
                            this,
                            "name",
                            "GetFileInfoMediaProviderException",
                        ),
                        Object.setPrototypeOf(this, tL.prototype);
                }
            }
            class tN {
                sendPlays(e) {
                    return this.playsResource.sendPlays({
                        clientNow: tc(),
                        plays: e,
                    });
                }
                constructor(e) {
                    (0, w._)(this, "playsResource", void 0),
                        (this.playsResource = e);
                }
            }
            class tR {
                storePlaysData(e) {
                    return this.playsStore.storePlaysData(e);
                }
                getStoredPlaysData(e) {
                    return this.playsStore.getStoredPlaysData(e || this.limit);
                }
                deleteAllByPlayId(e, t) {
                    return this.playsStore.deleteAllByPlayId(e, t);
                }
                isAvailable() {
                    return this.playsStore.isAvailable();
                }
                openDatabase() {
                    return this.playsStore.openDatabase();
                }
                deleteDatabase() {
                    return this.playsStore.deleteDatabase();
                }
                setErrorLogger(e) {
                    var t, a;
                    null == (t = (a = this.playsStore).setErrorLogger) ||
                        t.call(a, e);
                }
                constructor(e, t) {
                    (0, w._)(this, "playsStore", void 0),
                        (0, w._)(this, "limit", void 0),
                        (this.playsStore = e),
                        (this.limit = t);
                }
            }
            class tw {
                storePlaysData(e) {
                    return Promise.resolve();
                }
                getStoredPlaysData(e) {
                    return Promise.resolve([]);
                }
                deleteAllByPlayId(e, t) {
                    return Promise.resolve();
                }
                isAvailable() {
                    return !1;
                }
                openDatabase() {
                    return Promise.resolve();
                }
                deleteDatabase() {
                    return Promise.resolve();
                }
                setErrorLogger(e) {}
            }
            var tx = a(8282),
                tO = a(2257);
            let tG = "playsHeartBeats";
            class tM extends Y.t {
                constructor(e, { code: t = "E_PLAYS_IDB_STORE", ...a } = {}) {
                    super(e, { code: t, ...a }),
                        (0, w._)(this, "name", "PlaysStoreException"),
                        Object.setPrototypeOf(this, tM.prototype);
                }
            }
            class tK {
                deleteDatabase() {
                    return window.indexedDB
                        .databases()
                        .then((e) =>
                            e.find((e) => this.idbName === e.name)
                                ? new tO.h(this.idbName).deleteDB({
                                      onBlocked: tx.A,
                                  })
                                : Promise.resolve(),
                        )
                        .catch((e) => {
                            this.logError("Error while deleting database", e);
                        });
                }
                isAvailable() {
                    return this.idbIsAvailable;
                }
                openDatabase() {
                    return this.openIdb({
                        onBlocked: () => this.onBlockedHandler(),
                        onTerminated: () => this.onTerminatedHandler(),
                    }).then((e) => {
                        this.idb = Promise.resolve(e);
                    });
                }
                setErrorLogger(e) {
                    this.errorLogger = e;
                }
                storePlaysData(e) {
                    return this.executeTransaction((t) =>
                        t.put(tG, e).then(() => t.count(tG)),
                    )
                        .then((e) =>
                            "number" == typeof e && e > this.storedPlaysLimit
                                ? this.deleteOverLimitPlays(
                                      this.storedPlaysLimit,
                                  )
                                : Promise.resolve(),
                        )
                        .catch((e) => {
                            throw this.generateError("Saving Play Error", e);
                        });
                }
                getStoredPlaysData(e) {
                    return this.executeTransaction(
                        (t) => t.getAll(tG, null, e),
                        { defaultValue: [] },
                    ).catch((e) => {
                        throw this.generateError("Error getting Plays", e);
                    });
                }
                deleteAllByPlayId(e, t) {
                    return Promise.all(
                        e.map((e) => {
                            let { playId: a } = e;
                            return this.iterateByCursor(
                                "playId",
                                a,
                                "readwrite",
                                (e) =>
                                    !t || t(e.value)
                                        ? e.delete()
                                        : Promise.resolve(),
                            );
                        }),
                    )
                        .then(tx.A)
                        .catch((e) => {
                            throw this.generateError("Error deleting Plays", e);
                        });
                }
                deleteOverLimitPlays(e) {
                    return this.iterateByCursor(
                        null,
                        null,
                        "readwrite",
                        (t, a) => (a <= e ? Promise.resolve() : t.delete()),
                    ).catch((e) => {
                        throw this.generateError(
                            "Error deleting overlimit Plays",
                            e,
                        );
                    });
                }
                iterateByCursor() {
                    let e =
                            arguments.length > 0 && void 0 !== arguments[0]
                                ? arguments[0]
                                : null,
                        t =
                            arguments.length > 1 && void 0 !== arguments[1]
                                ? arguments[1]
                                : null,
                        a = arguments.length > 2 ? arguments[2] : void 0,
                        i = arguments.length > 3 ? arguments[3] : void 0,
                        r = 0,
                        s = (e) =>
                            e
                                ? i(e, ++r)
                                      .then(() => e.continue())
                                      .then(s)
                                : Promise.resolve();
                    return this.getCursor(e, t, a).then(s);
                }
                onBlockedHandler() {
                    this.closeConnection(this.idb).then(() => {
                        this.idb = this.openIdb({
                            onBlocked: () => {
                                this.closeConnection(this.idb);
                            },
                            onTerminated: () => this.onTerminatedHandler(),
                        });
                    });
                }
                onTerminatedHandler() {
                    (this.idbIsAvailable = !1),
                        (this.idb = this.openIdb({
                            onBlocked: () => this.onBlockedHandler(),
                            onTerminated: () => {
                                this.idbIsAvailable = !1;
                            },
                        }));
                }
                openIdb(e) {
                    return new tO.h(this.idbName)
                        .openDB(1, {
                            onBlocked: (t, a, i) => {
                                var r;
                                this.logError("Connection has been blocked"),
                                    null == e ||
                                        null == (r = e.onBlocked) ||
                                        r.call(e, t, a, i);
                            },
                            onTerminated: () => {
                                var t;
                                this.logError("Storage has been terminated"),
                                    null == e ||
                                        null == (t = e.onTerminated) ||
                                        t.call(e);
                            },
                            onUpgrade: (e) => {
                                let t = e.createObjectStore(tG, {
                                    keyPath: "id",
                                    autoIncrement: !0,
                                });
                                t.createIndex("playId", "playId", {
                                    unique: !1,
                                }),
                                    t.createIndex("trackId", "trackId", {
                                        unique: !1,
                                    });
                            },
                        })
                        .then((e) => ((this.idbIsAvailable = !0), e))
                        .catch((e) => {
                            (this.idbIsAvailable = !1),
                                this.logError("Open storage error", e);
                        });
                }
                closeConnection(e) {
                    return ((this.idbIsAvailable = !1), (this.idb = void 0), e)
                        ? e
                              .then((e) => {
                                  e && e.close();
                              })
                              .catch((e) => {
                                  this.logError(
                                      "Error while try to close connection",
                                      e,
                                  );
                              })
                        : Promise.resolve();
                }
                getCursor() {
                    let e =
                            arguments.length > 0 && void 0 !== arguments[0]
                                ? arguments[0]
                                : null,
                        t =
                            arguments.length > 1 && void 0 !== arguments[1]
                                ? arguments[1]
                                : null,
                        a = arguments.length > 2 ? arguments[2] : void 0;
                    return this.executeTransaction(
                        (i) => {
                            let r = i.transaction([tG], a).objectStore(tG);
                            return e
                                ? r.index(e).openCursor(t, "prev")
                                : r.openCursor(t, "prev");
                        },
                        { defaultValue: null },
                    );
                }
                executeTransaction(e) {
                    let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : {};
                    return this.idbIsAvailable && this.idb
                        ? this.idb.then((a) =>
                              a
                                  ? e(a)
                                  : Promise.resolve(
                                        null == t ? void 0 : t.defaultValue,
                                    ),
                          )
                        : Promise.resolve(null == t ? void 0 : t.defaultValue);
                }
                logError(e, t) {
                    var a;
                    let i = this.generateError(e, t);
                    null == (a = this.errorLogger) || a.call(this, i);
                }
                generateError(e, t) {
                    var a;
                    let i = "[IndexedDB]["
                            .concat(this.idbName, ".")
                            .concat(tG, "]: ")
                            .concat(e),
                        r = String(t);
                    return (
                        ("".concat(t).includes("QuotaExceededError") ||
                            /connection.*lost/i.test("".concat(t))) &&
                            this.closeConnection(),
                        new tM(i, {
                            data: {
                                originalError: r,
                                storageEstimate:
                                    null != (a = this.storageEstimate) ? a : {},
                            },
                        })
                    );
                }
                constructor(e) {
                    (0, w._)(this, "storedPlaysLimit", void 0),
                        (0, w._)(this, "idb", void 0),
                        (0, w._)(this, "errorLogger", void 0),
                        (0, w._)(this, "idbIsAvailable", !1),
                        (0, w._)(this, "idbName", void 0),
                        (0, w._)(this, "storageEstimate", void 0),
                        (this.storedPlaysLimit = e),
                        (() => {
                            var e, t;
                            return (
                                null == (t = window.navigator) ||
                                null == (e = t.storage)
                                    ? void 0
                                    : e.estimate
                            )
                                ? window.navigator.storage
                                      .estimate()
                                      .catch(() => ({}))
                                : Promise.resolve({});
                        })().then((e) => {
                            this.storageEstimate = e;
                        }),
                        (this.idbName = ""
                            .concat("music_plays", "_")
                            .concat("1.0.0"));
                }
            }
            class tF {
                apply(e) {
                    var t;
                    let { hooks: a, playback: i } = e,
                        r = this.toggles.enableLocalStoredPlaysData
                            ? new tR(
                                  new tK(this.toggles.limitOfStoredPlaysData),
                                  this.toggles.limitOfStoredPlaysData,
                              )
                            : new tw(),
                        s = new tN(
                            new e8(
                                this.params.httpClient,
                                this.params.playsResourceConfig,
                            ),
                        );
                    (this.dynamicDataManager = new t_()),
                        (this.service = new tk({
                            store: r,
                            gateway: s,
                            dynamicDataManager: this.dynamicDataManager,
                            clock: () => new Date(),
                            toggles: this.toggles,
                            hooks: a,
                            playback: i,
                        })),
                        (this.playerStateSubscriptions = new tD({
                            playback: i,
                            hooks: a,
                            service: this.service,
                            dynamicDataManager: this.dynamicDataManager,
                            toggles: this.toggles,
                            storePlaysProgressIntervalMs:
                                null !=
                                (t = this.params.storePlaysProgressIntervalMs)
                                    ? t
                                    : 1e4,
                        })),
                        this.playerStateSubscriptions.attachSubscriptions();
                    let {
                        playback: l,
                        hooks: n,
                        service: o,
                        dynamicDataManager: d,
                        toggles: u,
                        clock: c,
                    } = {
                        playback: i,
                        hooks: a,
                        service: this.service,
                        dynamicDataManager: this.dynamicDataManager,
                        toggles: this.toggles,
                        clock: () => new Date(),
                    };
                    n.beforeEntityPlayingProcessStart.tapPromise(
                        "PlaysPlugin",
                        () => {
                            u.enableRemoveDuplicatePlays &&
                                o.clearSentPlayIds();
                            let { queueState: e } = l.state,
                                t = e.currentEntity.value;
                            return (
                                tC(t, d),
                                o.sendStartEntityPlay(t),
                                Promise.resolve()
                            );
                        },
                    ),
                        n.beforeMediaStartPlaying.tapPromise(
                            "PlaysPlugin",
                            () => {
                                let { currentEntity: e } = l.state.queueState;
                                if (e.value) {
                                    let t = e.value.entity.playId;
                                    e.value.entity.isDisliked &&
                                        d.markAsAlreadyDisliked(t),
                                        d.getDynamicDataByPlayId(t)
                                            .startTimestamp ||
                                            d.updateDynamicData(t, {
                                                startTimestamp: tc(c()),
                                            });
                                }
                                return Promise.resolve();
                            },
                        ),
                        n.afterMediaEndPlaying.tapPromise("PlaysPlugin", () => {
                            let {
                                    index: { value: e },
                                    entityList: { value: t },
                                    repeat: { value: a },
                                } = l.state.queueState,
                                i = l.state.queueState.currentEntity.value;
                            if ((e === t.length - 1 || a === O.pM.ONE) && i) {
                                let e = i.entity.playId;
                                d.updateDynamicData(e, {
                                    hookSource: m.AFTER_MEDIA_END_PLAYING,
                                    wasDislikedOnChange:
                                        i.entity.isDisliked &&
                                        !d.isAlreadyDisliked(e),
                                }),
                                    o.sendEndEntityPlay(i);
                            }
                            return Promise.resolve();
                        }),
                        n.afterError.tapPromise("PlaysPlugin", (e) => {
                            if (e instanceof tL || e instanceof O.LI) {
                                let e = l.state.queueState.currentEntity.value;
                                o.sendEndEntityPlay(e);
                            }
                            return Promise.resolve();
                        }),
                        n.beforeContextSet.tapPromise("PlaysPlugin", () => {
                            let e = l.state.queueState.currentEntity.value;
                            return (
                                e &&
                                    d.updateDynamicData(e.entity.playId, {
                                        hookSource: m.BEFORE_CONTEXT_SET,
                                    }),
                                o.sendCurrentEntityEndPlay()
                            );
                        }),
                        n.afterSetupQueue.tap("PlaysPlugin", () => {
                            let { queueState: e } = l.state;
                            tC(e.currentEntity.value, d);
                        }),
                        n.beforeEntityChange.tapPromise("PlaysPlugin", (e) => {
                            var t;
                            let { currentEntity: a } = l.state.queueState,
                                { method: i } = e,
                                r =
                                    null == (t = a.value)
                                        ? void 0
                                        : t.entity.playId;
                            return a.value && r
                                ? (d.updateDynamicData(r, {
                                      hookSource: m.BEFORE_ENTITY_CHANGE,
                                      entityChangeMethod: i,
                                      wasDislikedOnChange:
                                          a.value.entity.isDisliked &&
                                          !d.isAlreadyDisliked(r),
                                  }),
                                  o.sendCurrentEntityEndPlay())
                                : Promise.resolve();
                        }),
                        n.beforeDestroy.tap(
                            "PlaysPlugin",
                            () =>
                                new Promise((e) => {
                                    if (!o.isSendingPlaysValue())
                                        return void e();
                                    let t = o.onSendingPlaysStateChange((a) => {
                                        a || (t(), e());
                                    });
                                }),
                        ),
                        this.toggles.enableLocalStoredPlaysData &&
                            r.setErrorLogger((e) => {
                                a.afterError.promise(e);
                            }),
                        this.toggles.shouldDeletePlaysObjectStore &&
                            r.deleteDatabase(),
                        this.toggles.enableLocalStoredPlaysData &&
                            !this.toggles.shouldDeletePlaysObjectStore &&
                            r.openDatabase().then(() => {
                                var e;
                                null == (e = this.service) ||
                                    e.sendStoredPlaysData();
                            });
                }
                constructor(e) {
                    var t, a, i, r, s, l, n, o, d, u, c, g, h, m;
                    (0, w._)(this, "service", void 0),
                        (0, w._)(this, "dynamicDataManager", void 0),
                        (0, w._)(this, "playerStateSubscriptions", void 0),
                        (0, w._)(this, "toggles", void 0),
                        (0, w._)(this, "params", void 0),
                        (this.params = e),
                        (this.toggles = {
                            disableSendPlaysOnTrackStart:
                                null !=
                                    (o =
                                        null == (t = e.variables)
                                            ? void 0
                                            : t.disableSendPlaysOnTrackStart) &&
                                o,
                            enableLocalStoredPlaysData:
                                null !=
                                    (d =
                                        null == (a = e.variables)
                                            ? void 0
                                            : a.enableLocalStoredPlaysData) &&
                                d,
                            limitOfStoredPlaysData:
                                null !=
                                (u =
                                    null == (i = e.variables)
                                        ? void 0
                                        : i.limitOfStoredPlaysData)
                                    ? u
                                    : 100,
                            limitOfSendingPlaysData:
                                null !=
                                (c =
                                    null == (r = e.variables)
                                        ? void 0
                                        : r.limitOfSendingPlaysData)
                                    ? c
                                    : 25,
                            shouldDeletePlaysObjectStore:
                                null !=
                                    (g =
                                        null == (s = e.variables)
                                            ? void 0
                                            : s.shouldDeletePlaysObjectStore) &&
                                g,
                            enableRemoveDuplicatePlays:
                                null !=
                                    (h =
                                        null == (l = e.variables)
                                            ? void 0
                                            : l.enableRemoveDuplicatePlays) &&
                                h,
                            enablePartialPlayReporting:
                                null !=
                                    (m =
                                        null == (n = e.variables)
                                            ? void 0
                                            : n.enablePartialPlayReporting) &&
                                m,
                        });
                }
            }
            function tX() {
                return new Date().toISOString();
            }
            function tj(e) {
                var t, a, i, r, s, l;
                let n,
                    {
                        contextEntityPair: o,
                        totalPlayedSeconds: d,
                        endPositionSeconds: u,
                        type: c,
                        maxPlayerStage: g,
                        seek: h,
                        pause: m,
                        startTimestamp: y,
                        radioSessionId: p,
                        radioBatchId: v,
                        isFromAutoflow: S,
                        isFromPumpkin: P,
                        changeReason: E,
                    } = e,
                    { entity: b, context: f } = o,
                    I = String(b.data.meta.id),
                    k = (function (e) {
                        let t;
                        if ("albums" in e.data.meta) {
                            let {
                                data: {
                                    meta: { albums: a },
                                },
                            } = e;
                            if (a) {
                                let e = a[0];
                                e && (t = String(e.id));
                            }
                        }
                        return t;
                    })(b),
                    _ =
                        (null == (t = b.data.additional) ? void 0 : t.from) ||
                        f.from,
                    T =
                        (null == (a = b.data.additional)
                            ? void 0
                            : a.utmLink) ||
                        f.utmLink ||
                        {},
                    C = 0;
                (0, eM.l)(b)
                    ? "smartPreviewParams" in b.data.meta &&
                      (null == (i = b.data.meta.smartPreviewParams)
                          ? void 0
                          : i.durationMs) &&
                      (C =
                          (null == (r = b.data.meta.smartPreviewParams)
                              ? void 0
                              : r.durationMs) / 1e3)
                    : "durationMs" in b.data.meta &&
                      b.data.meta.durationMs &&
                      (C = b.data.meta.durationMs / 1e3);
                let D = d,
                    A = u;
                0.5 > Math.abs(C - d) && (D = C),
                    0.5 > Math.abs(C - u) && (A = C),
                    (n = (0, e2.S)(f)
                        ? {
                              generativeStreamId: String(
                                  null == (s = f.data.meta.stream)
                                      ? void 0
                                      : s.id,
                              ),
                          }
                        : { trackId: I }),
                    to(f) && (A = D);
                let L = !!b.data.isRestored,
                    N = {
                        playId: b.playId,
                        timestamp: tX(),
                        totalPlayedSeconds: D,
                        endPositionSeconds: A,
                        trackLengthSeconds: C,
                        albumId: k,
                        from: _,
                        context: f.data.type,
                        contextItem: String(f.data.meta.id),
                        addTracksToPlayerTime: b.addTracksToPlayerTime,
                        audioAuto: "none",
                        audioOutputName: "Динамик",
                        audioOutputType: "Speaker",
                        maxPlayerStage: g,
                        seek: h,
                        pause: m,
                        startTimestamp: y,
                        fromCache: tu(b),
                        isRestored: L,
                        changeReason: E,
                        ...T,
                        ...n,
                    };
                if (
                    ((0, eN.i)(f) &&
                        f.data.meta.session &&
                        ((N.radioSessionId =
                            null != p ? p : f.data.meta.session.radioSessionId),
                        (N.batchId =
                            null != v ? v : f.data.meta.session.batchId),
                        (N.isFromAutoflow = S),
                        (N.isFromPumpkin = P),
                        (N.context = "radio"),
                        (N.contextItem = f.data.meta.session.wave.stationId)),
                    tp(f) &&
                        ((N.playlistId = ""
                            .concat(f.data.meta.uid, ":")
                            .concat(f.data.meta.kind)),
                        (N.contextItem = ""
                            .concat(f.data.meta.uid, ":")
                            .concat(f.data.meta.kind))),
                    (0, tS.p)(f))
                ) {
                    let e = [tP.b.Search, tP.b.Other],
                        t =
                            null != (l = f.data.overrideContextType)
                                ? l
                                : tP.b.Other;
                    (N.context = t), e.includes(t) && (N.contextItem = null);
                }
                return (
                    (0, eM.l)(b) && (N.smartPreview = !0), { type: c, data: N }
                );
            }
            !(function (e) {
                (e.START = "start"),
                    (e.END = "end"),
                    (e.PLAYING = "playing"),
                    (e.PAUSE = "pause");
            })(p || (p = {}));
            let tU = (e) =>
                    !!(
                        e &&
                        "object" == typeof e &&
                        "playId" in e &&
                        "totalPlayedSeconds" in e
                    ),
                tB = (e) => {
                    let t = [
                        e.find((e) => 0 === e.totalPlayedSeconds),
                        (0, e4.A)(e, "totalPlayedSeconds"),
                    ];
                    return (0, te.A)(t.filter(tU), "totalPlayedSeconds");
                };
            class tV extends Y.t {
                constructor(e, { code: t = "E_PLAYS", ...a } = {}) {
                    super(e, { code: t, ...a }),
                        (0, w._)(this, "name", "PlaysException"),
                        Object.setPrototypeOf(this, tV.prototype);
                }
            }
            let tq = "playsHeartBeats";
            class tY extends Y.t {
                constructor(e, { code: t = "E_PLAYS_IDB_STORE", ...a } = {}) {
                    super(e, { code: t, ...a }),
                        (0, w._)(this, "name", "PlaysStoreException"),
                        Object.setPrototypeOf(this, tY.prototype);
                }
            }
            class tW {
                deleteDatabase() {
                    return window.indexedDB
                        .databases()
                        .then((e) =>
                            e.find((e) => this.idbName === e.name)
                                ? new tO.h(this.idbName).deleteDB({
                                      onBlocked: tx.A,
                                  })
                                : Promise.resolve(),
                        )
                        .catch((e) => {
                            this.logError("Error while deleting database", e);
                        });
                }
                isAvailable() {
                    return this.idbIsAvailable;
                }
                openDatabase() {
                    return this.openIdb({
                        onBlocked: () => this.onBlockedHandler(),
                        onTerminated: () => this.onTerminatedHandler(),
                    }).then((e) => {
                        this.idb = Promise.resolve(e);
                    });
                }
                setErrorLogger(e) {
                    this.errorLogger = e;
                }
                storePlaysData(e) {
                    return this.executeTransaction((t) =>
                        t.put(tq, e).then(() => t.count(tq)),
                    )
                        .then((e) =>
                            "number" == typeof e && e > this.storedPlaysLimit
                                ? this.deleteOverLimitPlays(
                                      this.storedPlaysLimit,
                                  )
                                : Promise.resolve(),
                        )
                        .catch((e) => {
                            throw this.generateError("Saving Play Error", e);
                        });
                }
                getStoredPlaysData(e) {
                    return this.executeTransaction(
                        (t) => t.getAll(tq, null, e),
                        { defaultValue: [] },
                    ).catch((e) => {
                        throw this.generateError("Error getting Plays", e);
                    });
                }
                deleteAllByPlayId(e, t) {
                    return Promise.all(
                        e.map((e) => {
                            let { playId: a } = e;
                            return this.iterateByCursor(
                                "playId",
                                a,
                                "readwrite",
                                (e) =>
                                    !t || t(e.value)
                                        ? e.delete()
                                        : Promise.resolve(),
                            );
                        }),
                    )
                        .then(tx.A)
                        .catch((e) => {
                            throw this.generateError("Error deleting Plays", e);
                        });
                }
                deleteOverLimitPlays(e) {
                    return this.iterateByCursor(
                        null,
                        null,
                        "readwrite",
                        (t, a) => (a <= e ? Promise.resolve() : t.delete()),
                    ).catch((e) => {
                        throw this.generateError(
                            "Error deleting overlimit Plays",
                            e,
                        );
                    });
                }
                iterateByCursor() {
                    let e =
                            arguments.length > 0 && void 0 !== arguments[0]
                                ? arguments[0]
                                : null,
                        t =
                            arguments.length > 1 && void 0 !== arguments[1]
                                ? arguments[1]
                                : null,
                        a = arguments.length > 2 ? arguments[2] : void 0,
                        i = arguments.length > 3 ? arguments[3] : void 0,
                        r = 0,
                        s = (e) =>
                            e
                                ? i(e, ++r)
                                      .then(() => e.continue())
                                      .then(s)
                                : Promise.resolve();
                    return this.getCursor(e, t, a).then(s);
                }
                onBlockedHandler() {
                    this.closeConnection(this.idb).then(() => {
                        this.idb = this.openIdb({
                            onBlocked: () => {
                                this.closeConnection(this.idb);
                            },
                            onTerminated: () => this.onTerminatedHandler(),
                        });
                    });
                }
                onTerminatedHandler() {
                    (this.idbIsAvailable = !1),
                        (this.idb = this.openIdb({
                            onBlocked: () => this.onBlockedHandler(),
                            onTerminated: () => {
                                this.idbIsAvailable = !1;
                            },
                        }));
                }
                openIdb(e) {
                    return new tO.h(this.idbName)
                        .openDB(1, {
                            onBlocked: (t, a, i) => {
                                var r;
                                this.logError("Connection has been blocked"),
                                    null == e ||
                                        null == (r = e.onBlocked) ||
                                        r.call(e, t, a, i);
                            },
                            onTerminated: () => {
                                var t;
                                this.logError("Storage has been terminated"),
                                    null == e ||
                                        null == (t = e.onTerminated) ||
                                        t.call(e);
                            },
                            onUpgrade: (e) => {
                                let t = e.createObjectStore(tq, {
                                    keyPath: "id",
                                    autoIncrement: !0,
                                });
                                t.createIndex("playId", "playId", {
                                    unique: !1,
                                }),
                                    t.createIndex("trackId", "trackId", {
                                        unique: !1,
                                    });
                            },
                        })
                        .then((e) => ((this.idbIsAvailable = !0), e))
                        .catch((e) => {
                            (this.idbIsAvailable = !1),
                                this.logError("Open storage error", e);
                        });
                }
                closeConnection(e) {
                    return ((this.idbIsAvailable = !1), (this.idb = void 0), e)
                        ? e
                              .then((e) => {
                                  e && e.close();
                              })
                              .catch((e) => {
                                  this.logError(
                                      "Error while try to close connection",
                                      e,
                                  );
                              })
                        : Promise.resolve();
                }
                getCursor() {
                    let e =
                            arguments.length > 0 && void 0 !== arguments[0]
                                ? arguments[0]
                                : null,
                        t =
                            arguments.length > 1 && void 0 !== arguments[1]
                                ? arguments[1]
                                : null,
                        a = arguments.length > 2 ? arguments[2] : void 0;
                    return this.executeTransaction(
                        (i) => {
                            let r = i.transaction([tq], a).objectStore(tq);
                            return e
                                ? r.index(e).openCursor(t, "prev")
                                : r.openCursor(t, "prev");
                        },
                        { defaultValue: null },
                    );
                }
                executeTransaction(e) {
                    let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : {};
                    return this.idbIsAvailable && this.idb
                        ? this.idb.then((a) =>
                              a
                                  ? e(a)
                                  : Promise.resolve(
                                        null == t ? void 0 : t.defaultValue,
                                    ),
                          )
                        : Promise.resolve(null == t ? void 0 : t.defaultValue);
                }
                logError(e, t) {
                    var a;
                    let i = this.generateError(e, t);
                    null == (a = this.errorLogger) || a.call(this, i);
                }
                generateError(e, t) {
                    var a;
                    let i = "[IndexedDB]["
                            .concat(this.idbName, ".")
                            .concat(tq, "]: ")
                            .concat(e),
                        r = String(t);
                    return (
                        ("".concat(t).includes("QuotaExceededError") ||
                            /connection.*lost/i.test("".concat(t))) &&
                            this.closeConnection(),
                        new tY(i, {
                            data: {
                                originalError: r,
                                storageEstimate:
                                    null != (a = this.storageEstimate) ? a : {},
                            },
                        })
                    );
                }
                constructor(e) {
                    (0, w._)(this, "storedPlaysLimit", void 0),
                        (0, w._)(this, "idb", void 0),
                        (0, w._)(this, "errorLogger", void 0),
                        (0, w._)(this, "idbIsAvailable", !1),
                        (0, w._)(this, "idbName", void 0),
                        (0, w._)(this, "storageEstimate", void 0),
                        (this.storedPlaysLimit = e),
                        (() => {
                            var e, t;
                            return (
                                null == (t = window.navigator) ||
                                null == (e = t.storage)
                                    ? void 0
                                    : e.estimate
                            )
                                ? window.navigator.storage
                                      .estimate()
                                      .catch(() => ({}))
                                : Promise.resolve({});
                        })().then((e) => {
                            this.storageEstimate = e;
                        }),
                        (this.idbName = ""
                            .concat("music_plays", "_")
                            .concat("1.0.0"));
                }
            }
            class tz {
                apply(e) {
                    var t, a;
                    let { hooks: i, playback: r } = e;
                    (this.hooks = i),
                        this.variables.enableLocalStoredPlaysData &&
                            this.playsStore.setErrorLogger((e) => {
                                i.afterError.promise(e);
                            }),
                        this.variables.shouldDeletePlaysObjectStore &&
                            (null == (t = this.playsStore) ||
                                t.deleteDatabase()),
                        this.variables.enableLocalStoredPlaysData &&
                            !this.variables.shouldDeletePlaysObjectStore &&
                            (null == (a = this.playsStore) ||
                                a.openDatabase().then(() => {
                                    this.sendStoredPlaysData();
                                })),
                        r.state.playerState.event.onChange(() => {
                            let { currentEntity: e } = r.state.queueState;
                            if (e.value)
                                switch (r.state.playerState.event.value) {
                                    case O.Iu.PLAYING:
                                        return (
                                            this.setVibeContextDynamicData(r),
                                            this.changeDynamicPlaysDataByPlayId(
                                                {
                                                    playId: e.value.entity
                                                        .playId,
                                                    dynamicData: {
                                                        maxPlayerStage: y.PLAY,
                                                    },
                                                },
                                            )
                                        );
                                    case O.Iu.PAUSED:
                                        if (
                                            (Math.abs(
                                                r.state.playerState.progress
                                                    .value.position -
                                                    r.state.playerState.progress
                                                        .value.duration,
                                            ) > 0.2 &&
                                                this.changeDynamicPlaysDataByPlayId(
                                                    {
                                                        playId: e.value.entity
                                                            .playId,
                                                        dynamicData: {
                                                            pause: !0,
                                                        },
                                                    },
                                                ),
                                            to(e.value.context))
                                        )
                                            return void this.sendPausePlayReport(
                                                r,
                                                i,
                                            );
                                        return;
                                    case O.Iu.SET_PROGRESS:
                                        if (
                                            (0, e2.S)(e.value.context) ||
                                            to(e.value.context)
                                        )
                                            return;
                                        return this.changeDynamicPlaysDataByPlayId(
                                            {
                                                playId: e.value.entity.playId,
                                                dynamicData: { seek: !0 },
                                            },
                                        );
                                }
                        });
                    let s = (0, tT.A)(
                            () => {
                                let e = r.state.queueState.currentEntity.value;
                                if (!e || (0, e2.S)(e.context)) return;
                                let t = this.getDynamicPlaysDataByPlayId(
                                        e.entity.playId,
                                    ),
                                    { data: a } = tj({
                                        type: p.PLAYING,
                                        contextEntityPair: e,
                                        totalPlayedSeconds:
                                            e.entity.totalPlayedSeconds,
                                        endPositionSeconds:
                                            r.state.playerState.progress.value
                                                .position,
                                        ...t,
                                        changeReason: h.IN_PROGRESS,
                                    });
                                a.playId &&
                                    a.totalPlayedSeconds > 0 &&
                                    this.storeAndReplace(a);
                            },
                            this.storePlaysProgressIntervalMs,
                            { trailing: !1 },
                        ),
                        l = (0, tT.A)(
                            () => {
                                this.sendPartialPlayReport(r, i);
                            },
                            2e3,
                            { trailing: !1 },
                        );
                    this.variables.enableLocalStoredPlaysData &&
                        r.state.playerState.progress.onChange(s),
                        this.variables.enablePartialPlayReporting &&
                            r.state.playerState.progress.onChange(l),
                        i.beforeEntityPlayingProcessStart.tapPromise(
                            "PlaysPlugin",
                            () => (
                                this.variables.enableRemoveDuplicatePlays &&
                                    this.sentPlayIds.clear(),
                                this.setVibeContextDynamicData(r),
                                this.sendStartEntityPlay(r, i),
                                Promise.resolve()
                            ),
                        ),
                        i.beforeMediaStartPlaying.tapPromise(
                            "PlaysPlugin",
                            () => {
                                let { currentEntity: e } = r.state.queueState;
                                if (e.value) {
                                    var t;
                                    let a = e.value.entity.playId,
                                        i =
                                            null ==
                                            (t =
                                                this.dynamicPlaysDataByEntitiesPlayId.get(
                                                    a,
                                                ))
                                                ? void 0
                                                : t.startTimestamp;
                                    e.value.entity.isDisliked &&
                                        this.alreadyDislikedPlayIds.add(a),
                                        i ||
                                            this.changeDynamicPlaysDataByPlayId(
                                                {
                                                    playId: a,
                                                    dynamicData: {
                                                        startTimestamp: tX(),
                                                    },
                                                },
                                            );
                                }
                                return Promise.resolve();
                            },
                        ),
                        i.afterMediaEndPlaying.tapPromise("PlaysPlugin", () => {
                            let {
                                    index: { value: e },
                                    entityList: { value: t },
                                    repeat: { value: a },
                                } = r.state.queueState,
                                s = r.state.queueState.currentEntity.value,
                                l = null == s ? void 0 : s.entity.playId;
                            if (e === t.length - 1 || a === O.pM.ONE) {
                                if (s)
                                    if ((0, e2.S)(s.context) || to(s.context))
                                        this.setChangeReasonToDynamicPlaysData(
                                            r,
                                            h.OTHER_TRACK,
                                        );
                                    else {
                                        let e =
                                            (null == s
                                                ? void 0
                                                : s.entity.isDisliked) &&
                                            l &&
                                            !this.alreadyDislikedPlayIds.has(l)
                                                ? h.DISLIKE
                                                : h.FINISH;
                                        this.setChangeReasonToDynamicPlaysData(
                                            r,
                                            e,
                                        );
                                    }
                                this.sendEndEntityPlay(r, i);
                            }
                            return Promise.resolve();
                        }),
                        i.afterError.tapPromise(
                            "PlaysPlugin",
                            (e) => (
                                (e instanceof tL || e instanceof O.LI) &&
                                    this.sendEndEntityPlay(r, i),
                                Promise.resolve()
                            ),
                        ),
                        i.beforeContextSet.tapPromise(
                            "PlaysPlugin",
                            () => (
                                this.setChangeReasonToDynamicPlaysData(
                                    r,
                                    h.OTHER_TRACK,
                                ),
                                this.sendCurrentEntityEndPlay(r, i)
                            ),
                        ),
                        i.afterSetupQueue.tap("PlaysPlugin", () =>
                            this.setVibeContextDynamicData(r),
                        ),
                        i.beforeEntityChange.tapPromise("PlaysPlugin", (e) => {
                            var t, a;
                            let { currentEntity: s } = r.state.queueState,
                                { method: l } = e,
                                n =
                                    null == (t = s.value)
                                        ? void 0
                                        : t.entity.playId;
                            switch (l) {
                                case O.So.AUTO_MOVE_FORWARD:
                                    this.setChangeReasonToDynamicPlaysData(
                                        r,
                                        h.FINISH,
                                    );
                                    break;
                                case O.So.MOVE_FORWARD: {
                                    let e = h.SKIP;
                                    (null == (a = s.value)
                                        ? void 0
                                        : a.entity.isDisliked) &&
                                        n &&
                                        !this.alreadyDislikedPlayIds.has(n) &&
                                        (e = h.DISLIKE),
                                        this.setChangeReasonToDynamicPlaysData(
                                            r,
                                            e,
                                        );
                                    break;
                                }
                                case O.So.MOVE_BACKWARD:
                                    this.setChangeReasonToDynamicPlaysData(
                                        r,
                                        h.BACK_SKIP,
                                    );
                                    break;
                                case O.So.SET_INDEX:
                                case O.So.PLAY_CONTEXT:
                                case O.So.RESTART_CONTEXT:
                                    this.setChangeReasonToDynamicPlaysData(
                                        r,
                                        h.OTHER_TRACK,
                                    );
                            }
                            return this.sendCurrentEntityEndPlay(r, i, n);
                        }),
                        i.beforeDestroy.tap(
                            "PlaysPlugin",
                            () =>
                                new Promise((e) => {
                                    if (!this.isSendingPlays.value)
                                        return void e();
                                    let t = this.isSendingPlays.onChange(
                                        (a) => {
                                            a || (t(), e());
                                        },
                                    );
                                }),
                        );
                }
                setVibeContextDynamicData(e) {
                    var t;
                    let { queueState: a } = e.state;
                    if (
                        (0, eN.i)(
                            null == (t = a.currentEntity.value)
                                ? void 0
                                : t.context,
                        ) &&
                        a.currentEntity.value
                    ) {
                        let {
                                meta: { session: e, sessionTracks: t },
                                parentContext: i,
                            } = a.currentEntity.value.context.data,
                            r = null == e ? void 0 : e.radioSessionId,
                            s = t ? t.batchId : null == e ? void 0 : e.batchId,
                            l = t ? t.pumpkin : null == e ? void 0 : e.pumpkin;
                        this.changeDynamicPlaysDataByPlayId({
                            playId: a.currentEntity.value.entity.playId,
                            dynamicData: {
                                radioSessionId: r,
                                radioBatchId: s,
                                isFromPumpkin: l,
                                isFromAutoflow: !!i,
                            },
                        });
                    }
                }
                setChangeReasonToDynamicPlaysData(e, t) {
                    let { currentEntity: a } = e.state.queueState;
                    a.value &&
                        this.changeDynamicPlaysDataByPlayId({
                            playId: a.value.entity.playId,
                            dynamicData: { changeReason: t },
                        });
                }
                isStorageEnabled() {
                    return (
                        !!this.variables.enableLocalStoredPlaysData &&
                        this.playsStore.isAvailable()
                    );
                }
                setPlaysDataForSending(e) {
                    e.forEach((e) => {
                        let { playId: t } = e;
                        this.sendingInProgressForPlayId.set(t);
                    });
                }
                clearSendedPlaysData(e) {
                    e.forEach((e) => {
                        let { playId: t } = e;
                        this.sendingInProgressForPlayId.has(t) &&
                            this.sendingInProgressForPlayId.delete(t);
                    });
                }
                filterPlaysForSending(e) {
                    var t = e.filter((e) => {
                        let { playId: t } = e;
                        return !this.sendingInProgressForPlayId.has(t);
                    });
                    let a = (0, e5.A)((0, e7.A)(t, "playId"), tB);
                    return (0, tt.A)(a);
                }
                playsResourceSend(e) {
                    return (
                        this.setPlaysDataForSending(e),
                        this.playsResource
                            .sendPlays({ clientNow: tX(), plays: e })
                            .finally(() => {
                                this.clearSendedPlaysData(e);
                            })
                    );
                }
                validatePlaysRequiredData(e, t) {
                    var a, i, r;
                    if (!e.entity.playId) {
                        let a = {};
                        return (
                            (a.contextId = e.context.data.meta.id),
                            (a.entityId = e.entity.data.meta.id),
                            null == (i = this.hooks) ||
                                i.afterError.promise(
                                    new tV(
                                        "Trying to ".concat(
                                            t,
                                            " without playId",
                                        ),
                                        { data: a },
                                    ),
                                ),
                            !1
                        );
                    }
                    return (
                        !!(
                            (null == (a = e.entity.data.additional)
                                ? void 0
                                : a.from) || e.context.from
                        ) ||
                        (null == (r = this.hooks) ||
                            r.afterError.promise(
                                new tV(
                                    "from field is required for ".concat(
                                        t,
                                        ", but was not found in plays data",
                                    ),
                                ),
                            ),
                        !1)
                    );
                }
                deletePlaysData(e, t, a) {
                    return this.isStorageEnabled()
                        ? this.playsStore
                              .deleteAllByPlayId(e, t)
                              .then(() => {
                                  if (a) return a();
                              })
                              .catch((e) => {
                                  var t;
                                  null == (t = this.hooks) ||
                                      t.afterError.promise(e);
                              })
                        : Promise.resolve();
                }
                storeAndReplace(e) {
                    return this.isStorageEnabled()
                        ? this.deletePlaysData(
                              [e],
                              (e) => e.totalPlayedSeconds > 0,
                              () => {
                                  var t;
                                  return null == (t = this.playsStore)
                                      ? void 0
                                      : t.storePlaysData(e);
                              },
                          )
                        : Promise.resolve();
                }
                sendStoredPlaysData() {
                    this.isSendingPlays.value = !0;
                    let e = this.variables.limitOfStoredPlaysData || 25;
                    return this.isStorageEnabled()
                        ? this.playsStore
                              .getStoredPlaysData(e)
                              .then((e) => {
                                  let t = this.filterPlaysForSending(e);
                                  if (!t.length) {
                                      this.isSendingPlays.value = !1;
                                      return;
                                  }
                                  this.playsResourceSend(t)
                                      .then(() => {
                                          this.deletePlaysData(t).then(() => {
                                              this.sendStoredPlaysData();
                                          });
                                      })
                                      .catch((e) => {
                                          var a;
                                          (this.isSendingPlays.value = !1),
                                              e instanceof e9.GX &&
                                                  e.statusCode ===
                                                      e9.X1.BAD_REQUEST &&
                                                  this.deletePlaysData(t),
                                              null == (a = this.hooks) ||
                                                  a.afterError.promise(
                                                      new tV(
                                                          "Error while sending plays",
                                                          { cause: e },
                                                      ),
                                                  );
                                      });
                              })
                              .catch((e) => {
                                  var t;
                                  null == (t = this.hooks) ||
                                      t.afterError.promise(e);
                              })
                        : Promise.resolve();
                }
                sendPlayData(e) {
                    this.isSendingPlays.value = !0;
                    let t = [e];
                    return this.playsResourceSend(t)
                        .then(() => {
                            this.isStorageEnabled() &&
                                this.deletePlaysData(
                                    t,
                                    (e) => e.totalPlayedSeconds > 0,
                                );
                        })
                        .catch((a) => {
                            throw (
                                (a instanceof e9.GX &&
                                a.statusCode === e9.X1.BAD_REQUEST
                                    ? this.deletePlaysData(t)
                                    : this.storeAndReplace(e),
                                a)
                            );
                        })
                        .finally(() => {
                            if (!this.isStorageEnabled()) {
                                this.isSendingPlays.value = !1;
                                return;
                            }
                            this.sendStoredPlaysData();
                        });
                }
                sendCurrentEntityEndPlay(e, t, a) {
                    if (
                        e.state.queueState.currentEntity.value &&
                        e.state.currentContext.value
                    ) {
                        if ((0, eN.i)(e.state.currentContext.value))
                            return this.sendEndEntityPlay(e, t);
                        this.sendEndEntityPlay(e, t).finally(() => {
                            a && this.alreadyDislikedPlayIds.delete(a);
                        });
                    }
                    return Promise.resolve();
                }
                sendStartEntityPlay(e, t) {
                    let a = e.state.queueState.currentEntity.value;
                    if (
                        !a ||
                        !this.validatePlaysRequiredData(
                            a,
                            "send start entity play",
                        )
                    )
                        return Promise.resolve();
                    try {
                        a.entity.addTracksToPlayerTime = ""
                            .concat(Math.random().toString().slice(2), "-")
                            .concat(Math.ceil(Number(new Date()) / 1e3));
                        let {
                                seek: i,
                                pause: r,
                                radioSessionId: s,
                                radioBatchId: l,
                                isFromAutoflow: n,
                                isFromPumpkin: o,
                            } = this.getDynamicPlaysDataByPlayId(
                                a.entity.playId,
                            ),
                            d = tj({
                                type: p.START,
                                contextEntityPair: a,
                                totalPlayedSeconds: 0,
                                endPositionSeconds: 0,
                                seek: i,
                                pause: r,
                                radioSessionId: s,
                                radioBatchId: l,
                                isFromAutoflow: n,
                                isFromPumpkin: o,
                            });
                        if (
                            (d.data.totalPlayedSeconds > 2e3 &&
                                t.afterError.promise(
                                    new tV("Plays error. Too big play time", {
                                        code: "E_PLAYS_BIG_PLAY_TIME",
                                        data: {
                                            timeStagesOfPlayback:
                                                a.entity.timeStagesOfPlayback,
                                            contextId: a.context.data.meta.id,
                                            entityId: a.entity.data.meta.id,
                                            totalPlayedSeconds:
                                                d.data.totalPlayedSeconds,
                                            trackLengthSeconds:
                                                d.data.trackLengthSeconds,
                                            playId: d.data.playId,
                                            isOnStart: !0,
                                            entityListLength:
                                                e.state.queueState.entityList
                                                    .value.length,
                                            index: e.state.queueState.index
                                                .value,
                                            repeat: e.state.queueState.repeat
                                                .value,
                                        },
                                    }),
                                ),
                            !this.variables.disableSendPlaysOnTrackStart)
                        )
                            return this.sendPlayData(d.data).catch((e) => {
                                let i = "",
                                    r = "";
                                a &&
                                    ((i = a.context.data.meta.id),
                                    (r = a.entity.data.meta.id)),
                                    t.afterError.promise(
                                        new tV("Error while sending plays", {
                                            cause: e,
                                            data: { contextId: i, entityId: r },
                                        }),
                                    );
                            });
                    } catch (r) {
                        let e = "",
                            i = "";
                        a &&
                            ((e = a.context.data.meta.id),
                            (i = a.entity.data.meta.id)),
                            t.afterError.promise(
                                new tV("Error while sending plays", {
                                    cause: r,
                                    data: { contextId: e, entityId: i },
                                }),
                            );
                    }
                    return Promise.resolve();
                }
                sendPartialPlayReport(e, t) {
                    let a = e.state.queueState.currentEntity.value;
                    if (
                        !a ||
                        !this.validatePlaysRequiredData(
                            a,
                            "send partial play report",
                        )
                    )
                        return Promise.resolve();
                    try {
                        let i = this.sentPartialPlayReportIds.has(
                                a.entity.playId,
                            ),
                            r = a.entity.totalPlayedSeconds;
                        if (!(0, e2.S)(a.context) && !i && r >= 30.1) {
                            let { entity: i } = a,
                                s = this.getDynamicPlaysDataByPlayId(i.playId),
                                l = tj({
                                    type: p.PLAYING,
                                    contextEntityPair: a,
                                    totalPlayedSeconds: r,
                                    endPositionSeconds:
                                        e.state.playerState.progress.value
                                            .position,
                                    ...s,
                                    changeReason: h.IN_PROGRESS,
                                });
                            return (
                                l.data.totalPlayedSeconds > 2e3 &&
                                    t.afterError.promise(
                                        new tV(
                                            "Plays error. Too big play time while trying to send partial play report",
                                            {
                                                code: "E_PLAYS_BIG_PLAY_TIME",
                                                data: {
                                                    timeStagesOfPlayback:
                                                        a.entity
                                                            .timeStagesOfPlayback,
                                                    contextId:
                                                        a.context.data.meta.id,
                                                    entityId:
                                                        a.entity.data.meta.id,
                                                    totalPlayedSeconds:
                                                        l.data
                                                            .totalPlayedSeconds,
                                                    trackLengthSeconds:
                                                        l.data
                                                            .trackLengthSeconds,
                                                    playId: l.data.playId,
                                                    isOnStart: !1,
                                                    entityListLength:
                                                        e.state.queueState
                                                            .entityList.value
                                                            .length,
                                                    index: e.state.queueState
                                                        .index.value,
                                                    repeat: e.state.queueState
                                                        .repeat.value,
                                                },
                                            },
                                        ),
                                    ),
                                this.sendPlayData(l.data)
                                    .then(() => {
                                        this.variables
                                            .enablePartialPlayReporting &&
                                            this.sentPartialPlayReportIds.add(
                                                l.data.playId,
                                            );
                                    })
                                    .catch((e) => {
                                        let i = "",
                                            r = "";
                                        a &&
                                            ((i = a.context.data.meta.id),
                                            (r = a.entity.data.meta.id)),
                                            t.afterError.promise(
                                                new tV(
                                                    "Error while sending plays",
                                                    {
                                                        cause: e,
                                                        data: {
                                                            contextId: i,
                                                            entityId: r,
                                                        },
                                                    },
                                                ),
                                            );
                                    })
                            );
                        }
                    } catch (r) {
                        let e = "",
                            i = "";
                        a &&
                            ((e = a.context.data.meta.id),
                            (i = a.entity.data.meta.id)),
                            t.afterError.promise(
                                new tV(
                                    "Error while sending plays partial play report",
                                    {
                                        cause: r,
                                        data: { contextId: e, entityId: i },
                                    },
                                ),
                            );
                    }
                    return Promise.resolve();
                }
                sendPausePlayReport(e, t) {
                    let a = e.state.queueState.currentEntity.value;
                    if (
                        !a ||
                        !this.validatePlaysRequiredData(
                            a,
                            "send pause play report",
                        )
                    )
                        return Promise.resolve();
                    try {
                        let i = a.entity.totalPlayedSeconds,
                            { entity: r } = a,
                            s = this.getDynamicPlaysDataByPlayId(r.playId),
                            l = tj({
                                type: p.PAUSE,
                                contextEntityPair: a,
                                totalPlayedSeconds: i,
                                endPositionSeconds:
                                    e.state.playerState.progress.value.position,
                                ...s,
                                changeReason: void 0,
                            });
                        return (
                            l.data.totalPlayedSeconds > 2e3 &&
                                t.afterError.promise(
                                    new tV(
                                        "Plays error. Too big play time while trying to send pause play report",
                                        {
                                            code: "E_PLAYS_BIG_PLAY_TIME",
                                            data: {
                                                timeStagesOfPlayback:
                                                    a.entity
                                                        .timeStagesOfPlayback,
                                                contextId:
                                                    a.context.data.meta.id,
                                                entityId: a.entity.data.meta.id,
                                                totalPlayedSeconds:
                                                    l.data.totalPlayedSeconds,
                                                trackLengthSeconds:
                                                    l.data.trackLengthSeconds,
                                                playId: l.data.playId,
                                                isOnStart: !1,
                                                entityListLength:
                                                    e.state.queueState
                                                        .entityList.value
                                                        .length,
                                                index: e.state.queueState.index
                                                    .value,
                                                repeat: e.state.queueState
                                                    .repeat.value,
                                            },
                                        },
                                    ),
                                ),
                            this.sendPlayData(l.data).catch((e) => {
                                let i = "",
                                    r = "";
                                a &&
                                    ((i = a.context.data.meta.id),
                                    (r = a.entity.data.meta.id)),
                                    t.afterError.promise(
                                        new tV("Error while sending plays", {
                                            cause: e,
                                            data: { contextId: i, entityId: r },
                                        }),
                                    );
                            })
                        );
                    } catch (r) {
                        let e = "",
                            i = "";
                        a &&
                            ((e = a.context.data.meta.id),
                            (i = a.entity.data.meta.id)),
                            t.afterError.promise(
                                new tV(
                                    "Error while sending plays pause play report",
                                    {
                                        cause: r,
                                        data: { contextId: e, entityId: i },
                                    },
                                ),
                            );
                    }
                    return Promise.resolve();
                }
                sendEndEntityPlay(e, t) {
                    let a = e.state.queueState.currentEntity.value;
                    if (
                        !a ||
                        !this.validatePlaysRequiredData(
                            a,
                            "send end entity play",
                        )
                    )
                        return Promise.resolve();
                    try {
                        let i = this.variables.enableRemoveDuplicatePlays,
                            r = !!i && this.sentPlayIds.has(a.entity.playId);
                        if (!this.sentPlayIds.has(a.entity.playId) && !r) {
                            let { entity: r } = a,
                                s = a.entity.totalPlayedSeconds,
                                { changeReason: l, ...n } =
                                    this.getDynamicPlaysDataByPlayId(r.playId);
                            i && this.sentPlayIds.add(r.playId);
                            let o = tj({
                                type: p.END,
                                contextEntityPair: a,
                                totalPlayedSeconds: s,
                                endPositionSeconds:
                                    e.state.playerState.progress.value.position,
                                changeReason: l,
                                ...n,
                            });
                            return (
                                this.dynamicPlaysDataByEntitiesPlayId.delete(
                                    o.data.playId,
                                ),
                                this.variables.enablePartialPlayReporting &&
                                    this.sentPartialPlayReportIds.delete(
                                        o.data.playId,
                                    ),
                                o.data.totalPlayedSeconds > 2e3 &&
                                    t.afterError.promise(
                                        new tV(
                                            "Plays error. Too big play time",
                                            {
                                                code: "E_PLAYS_BIG_PLAY_TIME",
                                                data: {
                                                    timeStagesOfPlayback:
                                                        a.entity
                                                            .timeStagesOfPlayback,
                                                    contextId:
                                                        a.context.data.meta.id,
                                                    entityId:
                                                        a.entity.data.meta.id,
                                                    totalPlayedSeconds:
                                                        o.data
                                                            .totalPlayedSeconds,
                                                    trackLengthSeconds:
                                                        o.data
                                                            .trackLengthSeconds,
                                                    playId: o.data.playId,
                                                    isOnStart: !1,
                                                    entityListLength:
                                                        e.state.queueState
                                                            .entityList.value
                                                            .length,
                                                    index: e.state.queueState
                                                        .index.value,
                                                    repeat: e.state.queueState
                                                        .repeat.value,
                                                },
                                            },
                                        ),
                                    ),
                                this.sendPlayData(o.data)
                                    .catch((e) => {
                                        let i = "",
                                            r = "";
                                        a &&
                                            ((i = a.context.data.meta.id),
                                            (r = a.entity.data.meta.id)),
                                            t.afterError.promise(
                                                new tV(
                                                    "Error while sending plays",
                                                    {
                                                        cause: e,
                                                        data: {
                                                            contextId: i,
                                                            entityId: r,
                                                        },
                                                    },
                                                ),
                                            );
                                    })
                                    .finally(() => {
                                        r.data.isRestored &&
                                            (r.data.isRestored = !1);
                                    })
                            );
                        }
                    } catch (r) {
                        let e = "",
                            i = "";
                        a &&
                            ((e = a.context.data.meta.id),
                            (i = a.entity.data.meta.id)),
                            t.afterError.promise(
                                new tV("Error while sending plays", {
                                    cause: r,
                                    data: { contextId: e, entityId: i },
                                }),
                            );
                    }
                    return Promise.resolve();
                }
                changeDynamicPlaysDataByPlayId(e) {
                    let { playId: t, dynamicData: a } = e,
                        i = this.dynamicPlaysDataByEntitiesPlayId.get(t);
                    this.dynamicPlaysDataByEntitiesPlayId.set(t, {
                        ...(null != i ? i : {}),
                        ...(null != a ? a : {}),
                    });
                }
                getDynamicPlaysDataByPlayId(e) {
                    var t, a, i;
                    let r = this.dynamicPlaysDataByEntitiesPlayId.get(e);
                    return {
                        seek: null != (t = null == r ? void 0 : r.seek) && t,
                        pause: null != (a = null == r ? void 0 : r.pause) && a,
                        maxPlayerStage:
                            null != (i = null == r ? void 0 : r.maxPlayerStage)
                                ? i
                                : y.PREPARE,
                        startTimestamp: null == r ? void 0 : r.startTimestamp,
                        radioSessionId: null == r ? void 0 : r.radioSessionId,
                        radioBatchId: null == r ? void 0 : r.radioBatchId,
                        isFromAutoflow: null == r ? void 0 : r.isFromAutoflow,
                        isFromPumpkin: null == r ? void 0 : r.isFromPumpkin,
                        changeReason: null == r ? void 0 : r.changeReason,
                    };
                }
                constructor(e) {
                    (0, w._)(
                        this,
                        "dynamicPlaysDataByEntitiesPlayId",
                        new Map(),
                    ),
                        (0, w._)(this, "sendingInProgressForPlayId", new Map()),
                        (0, w._)(this, "sentPlayIds", new Set()),
                        (0, w._)(this, "sentPartialPlayReportIds", new Set()),
                        (0, w._)(this, "alreadyDislikedPlayIds", new Set()),
                        (0, w._)(this, "playsResource", void 0),
                        (0, w._)(this, "playsStore", void 0),
                        (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "storePlaysProgressIntervalMs", void 0),
                        (0, w._)(this, "isSendingPlays", void 0),
                        (0, w._)(this, "hooks", void 0);
                    let {
                        httpClient: t,
                        playsResourceConfig: a,
                        variables: i,
                    } = e;
                    (this.playsResource = new e8(t, a)),
                        (this.variables = i || {}),
                        (this.storePlaysProgressIntervalMs =
                            e.storePlaysProgressIntervalMs || 1e4);
                    let r = this.variables.limitOfStoredPlaysData || 100;
                    (this.playsStore = new tW(r)),
                        (this.isSendingPlays = new et.cJ(!1));
                }
            }
            let tH = null;
            function tQ(e, t) {
                let a,
                    i,
                    r = e.state.queueState.order.value,
                    s = e.state.queueState.index.value,
                    l = e.state.currentContext.value,
                    n = e.state.queueState.entityList.value,
                    o = e.state.queueState.repeat.value === O.pM.CONTEXT;
                for (let e = s - 1; e >= 0; e--) {
                    let t = r[e];
                    if ("number" != typeof t) break;
                    let i = n[t];
                    if (void 0 !== i && !i.entity.hidden) {
                        a = i.entity;
                        break;
                    }
                }
                let d = !!a || o;
                for (let e = s + 1; e < r.length; e++) {
                    let t = r[e];
                    if ("number" != typeof t) break;
                    let a = n[t];
                    if (void 0 !== a && !a.entity.hidden) {
                        i = a.entity;
                        break;
                    }
                }
                let u = !!i || (o && !!a) || (!o && t);
                l &&
                    ((l.availableActions.moveBackward.value = d),
                    (l.availableActions.moveForward.value = u && !(0, e2.S)(l)),
                    a ||
                        i ||
                        !o ||
                        ((l.availableActions.moveBackward.value = !1),
                        (l.availableActions.moveForward.value = !1))),
                    null !== tH && (tH(), (tH = null)),
                    0 !== s ||
                        (0, e2.S)(l) ||
                        (tH = e.state.playerState.progress.onChange((t) => {
                            l &&
                                t &&
                                (((o =
                                    e.state.queueState.repeat.value ===
                                    O.pM.CONTEXT) &&
                                    !a &&
                                    !i) ||
                                    !o) &&
                                (l.availableActions.moveBackward.value =
                                    t.position > O.DS);
                        })),
                    (0, e2.S)(l) ||
                        e.state.queueState.repeat.onChange((e) => {
                            if (l) {
                                if (e === O.pM.CONTEXT) {
                                    (l.availableActions.moveBackward.value =
                                        !!a || (0 === s && !!i)),
                                        (l.availableActions.moveForward.value =
                                            !!i || !!a);
                                    return;
                                }
                                (l.availableActions.moveBackward.value = !!a),
                                    (l.availableActions.moveForward.value =
                                        !!i || t);
                            }
                        });
            }
            let t$ = [G.S.AUDIOBOOK, G.S.FAIRY_TALE, G.S.PODCAST, G.S.COMMENT];
            var tJ = a(15479);
            class tZ {
                apply(e) {
                    let { hooks: t, playback: a } = e,
                        i = () => {
                            let { value: e } = a.state.currentContext,
                                { value: t } = a.state.queueState.currentEntity,
                                i = void 0 !== t;
                            if (void 0 !== e && i) {
                                let { meta: i } = t.entity.data;
                                (window?.SHOW_REPEAT_BUTTON_ON_VIBE()
                                    ? false
                                    : (0, eN.i)(e)) || // is track type Vibe
                                (0, e2.S)(e) || // is track type Generative
                                ("type" in i && i.type && t$.includes(i.type))
                                    ? ((e.availableActions.repeat.value = !1),
                                      a.state.queueState.repeat.value !== O.pM.NONE &&
                                          a.setRepeatMode(O.pM.NONE))
                                    : ((e.availableActions.repeat.value = !0),
                                        (0, eN.i)(e) &&
                                        a.state.queueState.repeat.value === O.pM.CONTEXT &&
                                        a.setRepeatMode(O.pM.NONE));

                                (0, eN.i)(e) || // is track type Vibe
                                (0, e2.S)(e) || // is track type Generative
                                ("type" in i && i.type && t$.includes(i.type))
                                    ? ((e.availableActions.shuffle.value = !1),
                                    a.state.queueState.shuffle.value && a.toggleShuffle())
                                    : (e.availableActions.shuffle.value = !0);
                            }
                            let { value: r } = a.state.currentContext,
                                { value: s } = a.state.queueState.currentEntity,
                                l = void 0 !== s;
                            if (void 0 !== r && l) {
                                let e = ((e) => {
                                    let { meta: t } = e.data,
                                        a =
                                            "albums" in t &&
                                            t.albums &&
                                            t.albums.length > 0 &&
                                            t.albums[0] &&
                                            t.albums[0].type === tJ._.PODCAST;
                                    return !!(
                                        ("type" in t &&
                                            t.type &&
                                            t$.includes(t.type)) ||
                                        a
                                    );
                                })(s.entity);
                                r.availableActions.speed.value = !!e;
                            }
                        };
                    t.afterContextSet.tap("AvailableActionsPlugin", i),
                        t.beforeMediaStartPlaying.tap(
                            "AvailableActionsPlugin",
                            i,
                        ),
                        a.state.queueState.entityList.onChange(() => {
                            i(), tQ(a, this.variables.isAutoflowEnabled);
                        }),
                        a.state.queueState.index.onChange(() => {
                            tQ(a, this.variables.isAutoflowEnabled);
                        });
                }
                constructor({ variables: e }) {
                    (0, w._)(this, "variables", void 0), (this.variables = e);
                }
            }
            class t0 {
                apply(e) {
                    let { hooks: t, playback: a } = e;
                    t.afterContextSet.tap("ApplyContextPlugin", () => {
                        let e = a.state.currentContext.value;
                        e &&
                            e instanceof O.EX &&
                            e.apply({ hooks: t, playback: a });
                    });
                }
            }
            class t1 {
                apply(e) {
                    let { playback: t, hooks: a } = e;
                    t.state.playerState.event.onChange(() => {
                        let { currentEntity: e } = t.state.queueState;
                        if (e.value)
                            switch (t.state.playerState.event.value) {
                                case O.Iu.PAUSED:
                                    e.value.entity.saveTimeStageOfPlayback({
                                        stage: i.NOT_PLAYING,
                                        reason: "event-".concat(O.Iu.PAUSED),
                                    });
                                    break;
                                case O.Iu.WAITING:
                                    e.value.entity.saveTimeStageOfPlayback({
                                        stage: i.NOT_PLAYING,
                                        reason: "event-".concat(O.Iu.WAITING),
                                    });
                                    break;
                                case O.Iu.PLAYING:
                                    e.value.entity.saveTimeStageOfPlayback({
                                        stage: i.PLAYING,
                                        reason: "event-".concat(O.Iu.PLAYING),
                                    });
                                    break;
                                case O.Iu.MEDIA_ELEMENT_ERROR:
                                    e.value.entity.saveTimeStageOfPlayback({
                                        stage: i.NOT_PLAYING,
                                        reason: "event-".concat(
                                            O.Iu.MEDIA_ELEMENT_ERROR,
                                        ),
                                    });
                            }
                    }),
                        a.beforeEntityPlayingProcessStart.tapPromise(
                            "TotalPlayedTimePlugin",
                            () => {
                                let { currentEntity: e } = t.state.queueState;
                                return (
                                    e.value &&
                                        e.value.entity.clearTimeStagesOfPlayback(),
                                    Promise.resolve()
                                );
                            },
                        ),
                        a.afterMediaStartPlaying.tapPromise(
                            "TotalPlayedTimePlugin",
                            () => {
                                let { currentEntity: e } = t.state.queueState;
                                return (
                                    e.value &&
                                        e.value.entity.saveTimeStageOfPlayback({
                                            stage: i.PLAYING,
                                            reason: "hook-afterMediaStartPlaying",
                                        }),
                                    Promise.resolve()
                                );
                            },
                        ),
                        a.afterMediaEndPlaying.tapPromise(
                            "TotalPlayedTimePlugin",
                            () => {
                                let { currentEntity: e } = t.state.queueState;
                                return (
                                    e.value &&
                                        e.value.entity.saveTimeStageOfPlayback({
                                            stage: i.NOT_PLAYING,
                                            reason: "hook-afterMediaEndPlaying",
                                        }),
                                    Promise.resolve()
                                );
                            },
                        ),
                        a.beforeEntityChange.tapPromise(
                            "TotalPlayedTimePlugin",
                            () => {
                                let { currentEntity: e } = t.state.queueState;
                                return (
                                    e.value &&
                                        e.value.entity.saveTimeStageOfPlayback({
                                            stage: i.NOT_PLAYING,
                                            reason: "hook-beforeEntityChange",
                                        }),
                                    Promise.resolve()
                                );
                            },
                        ),
                        a.beforeContextSet.tapPromise(
                            "TotalPlayedTimePlugin",
                            () => {
                                let { currentEntity: e } = t.state.queueState;
                                return (
                                    e.value &&
                                        e.value.entity.saveTimeStageOfPlayback({
                                            stage: i.NOT_PLAYING,
                                            reason: "hook-beforeContextSet",
                                        }),
                                    Promise.resolve()
                                );
                            },
                        );
                }
            }
            function t3(e) {
                return (null == e ? void 0 : e.data.type) === M.R.Generative;
            }
            !(function (e) {
                (e.PLAY = "play"),
                    (e.PAUSE = "pause"),
                    (e.NEXT = "nexttrack"),
                    (e.PREV = "previoustrack"),
                    (e.SEEK = "seekto"),
                    (e.STOP = "stop");
            })(v || (v = {}));
            let t6 = [40, 50, 80, 100, 200, 300, 400],
                t8 = [v.PLAY, v.PAUSE, v.STOP, v.SEEK];
            class t9 {
                isSupported() {
                    return (
                        "mediaSession" in window.navigator &&
                        "MediaMetadata" in window
                    );
                }
                handleMediaActionEvents(e, t) {
                    let { action: a } = e;
                    switch (a) {
                        case v.PLAY:
                            t.resume();
                            break;
                        case v.PAUSE:
                        case v.STOP:
                            t.pause();
                            break;
                        case v.NEXT:
                            t.moveForward();
                            break;
                        case v.PREV:
                            t.moveBackward();
                            break;
                        case v.SEEK: {
                            var i;
                            if (
                                t3(
                                    null ==
                                        (i =
                                            t.state.queueState.currentEntity
                                                .value)
                                        ? void 0
                                        : i.entity,
                                )
                            )
                                return;
                            let { seekTime: a } = e;
                            a && t.setProgress(a);
                        }
                    }
                }
                prepareMetadata(e) {
                    let t,
                        a,
                        i = { title: e.title };
                    if (
                        ("artists" in e &&
                            (i.artist = (e.artists || [])
                                .map((e) => e.name)
                                .join(", ")),
                        "albums" in e)
                    ) {
                        var r, s;
                        i.album =
                            null == (s = e.albums) || null == (r = s[0])
                                ? void 0
                                : r.title;
                    }
                    return (
                        "coverUri" in e && (t = e.coverUri),
                        "imageUrl" in e && (t = e.imageUrl),
                        t &&
                            (a = t6.map((e) => {
                                let a = "".concat(e, "x").concat(e);
                                "Safari" === this.browserName &&
                                    (a = "".concat(2 * e, "x").concat(2 * e));
                                let i = "";
                                return (
                                    "string" == typeof t &&
                                        (i = t.startsWith("blob:")
                                            ? t
                                            : "https://".concat(
                                                  t.replace("%%", a),
                                              )),
                                    { sizes: a, src: i, type: "image/jpg" }
                                );
                            })),
                        (i.artwork = a),
                        i
                    );
                }
                updateMetadata(e) {
                    if (!e) return;
                    let t = this.prepareMetadata(e);
                    window.navigator.mediaSession.metadata = new MediaMetadata(
                        t,
                    );
                }
                handlePlayerEvents(e) {
                    let t, a;
                    e.state.playerState.event.onChange(() => {
                        if (
                            e.state.playerState.event.value ===
                            O.Iu.UPDATING_PROGRESS
                        ) {
                            var t, a;
                            this.updateMetadata(
                                null ==
                                    (t = e.state.queueState.currentEntity.value)
                                    ? void 0
                                    : t.entity.data.meta,
                            ),
                                t3(
                                    null ==
                                        (a =
                                            e.state.queueState.currentEntity
                                                .value)
                                        ? void 0
                                        : a.entity,
                                )
                                    ? navigator.mediaSession.setPositionState({
                                          duration: 0,
                                          position: 0,
                                      })
                                    : navigator.mediaSession.setPositionState(),
                                t8.forEach((t) => {
                                    try {
                                        window.navigator.mediaSession.setActionHandler(
                                            t,
                                            (t) =>
                                                this.handleMediaActionEvents(
                                                    t,
                                                    e,
                                                ),
                                        );
                                    } catch (e) {
                                        console.log(
                                            'The media session action "'.concat(
                                                t,
                                                '" is not supported yet.',
                                            ),
                                        );
                                    }
                                });
                        }
                    }),
                        e.state.currentContext.onChange(() => {
                            var i, r;
                            null == t || t(),
                                null == a || a(),
                                (t =
                                    null == (i = e.state.currentContext.value)
                                        ? void 0
                                        : i.availableActions.moveBackward.onChange(
                                              () => {
                                                  var t, a;
                                                  let i =
                                                      null !=
                                                          (a =
                                                              null ==
                                                              (t =
                                                                  e.state
                                                                      .currentContext
                                                                      .value)
                                                                  ? void 0
                                                                  : t
                                                                        .availableActions
                                                                        .moveBackward
                                                                        .value) &&
                                                      a;
                                                  window.navigator.mediaSession.setActionHandler(
                                                      v.PREV,
                                                      i
                                                          ? (t) =>
                                                                this.handleMediaActionEvents(
                                                                    t,
                                                                    e,
                                                                )
                                                          : null,
                                                  );
                                              },
                                          )),
                                (a =
                                    null == (r = e.state.currentContext.value)
                                        ? void 0
                                        : r.availableActions.moveForward.onChange(
                                              () => {
                                                  var t, a;
                                                  let i =
                                                      null !=
                                                          (a =
                                                              null ==
                                                              (t =
                                                                  e.state
                                                                      .currentContext
                                                                      .value)
                                                                  ? void 0
                                                                  : t
                                                                        .availableActions
                                                                        .moveForward
                                                                        .value) &&
                                                      a;
                                                  window.navigator.mediaSession.setActionHandler(
                                                      v.NEXT,
                                                      i
                                                          ? (t) =>
                                                                this.handleMediaActionEvents(
                                                                    t,
                                                                    e,
                                                                )
                                                          : null,
                                                  );
                                              },
                                          ));
                        });
                }
                apply(e) {
                    let { playback: t } = e;
                    this.isSupported() && this.handlePlayerEvents(t);
                }
                constructor({ browserName: e, browserVersion: t }) {
                    (0, w._)(this, "browserName", void 0),
                        (0, w._)(this, "browserVersion", void 0),
                        (this.browserName = e),
                        (this.browserVersion = t);
                }
            }
            class t2 {
                apply(e) {
                    let { hooks: t, playback: a } = e;
                    t.afterError.tapPromise("LoggerPlugin", (e) => {
                        let t,
                            i = a.state.queueState.currentEntity.value
                                ? a.state.queueState.currentEntity.value.entity
                                      .mediaSourceData
                                : null;
                        (t =
                            e instanceof Y.t
                                ? e
                                : new Y.t("Error in Sonata player", {
                                      code: "E_SONATA",
                                      cause: e,
                                  })).name = "[Sonata] ".concat(t.name);
                        let r =
                            t.cause instanceof Error
                                ? (0, A.y0)(t.cause)
                                : t.cause;
                        return (
                            this.logger.error(t, {
                                ...t.data,
                                ...(i || {}),
                                code: t.code,
                                cause: r,
                                stack: t.stack,
                                message: t.message,
                            }),
                            Promise.resolve()
                        );
                    });
                }
                constructor(e) {
                    (0, w._)(this, "logger", void 0);
                    let { logger: t } = e;
                    this.logger = t;
                }
            }
            (S || (S = {})).QUALITY_CHANGE = "QUALITY_CHANGE";
            class t7 {
                apply(e) {
                    let { playback: t, hooks: a } = e;
                    this.quality.onChange(() => {
                        t.state.playerState.status.value !== O.MT.IDLE &&
                            t.reloadEntity(S.QUALITY_CHANGE).catch((e) => {
                                a.afterError.promise(e);
                            });
                    });
                }
                constructor(e) {
                    (0, w._)(this, "quality", void 0), (this.quality = e);
                }
            }
            var t5 = a(71068);
            let t4 = (e) =>
                "object" == typeof e &&
                e &&
                "rememberPosition" in e &&
                "boolean" == typeof e.rememberPosition;
            class ae {
                apply(e) {
                    let { hooks: t, playback: a } = e;
                    t.beforeEntityChange.tapPromise(
                        "ContinuePlayingPlugin",
                        () => {
                            let { position: e, duration: t } =
                                this.getTimingsFromPlayback(a);
                            return new Promise((i) => {
                                e !== t && this.checkBeforeProgressSync(a), i();
                            });
                        },
                    ),
                        a.state.playerState.status.onChange((e) => {
                            (e === O.MT.PAUSED || e === O.MT.STOPPED) &&
                                (this.clearTimeout(),
                                this.checkBeforeProgressSync(a)),
                                e === O.MT.PLAYING &&
                                    this.shouldSendProgressSync(a) &&
                                    this.setTimeout(a);
                        }),
                        a.state.playerState.event.onChange(() => {
                            if (
                                a.state.playerState.event.value ===
                                O.Iu.SET_PROGRESS
                            ) {
                                let e = a.state.queueState.currentEntity.value,
                                    t =
                                        a.state.playerState.progress.value
                                            .position;
                                if (!e) return;
                                let { entity: i } = e;
                                t4(i.data.meta) &&
                                    i.data.meta.rememberPosition &&
                                    (e.lastSeekPosition = t);
                            }
                        }),
                        a.state.queueState.currentEntity.onChange(() => {
                            let e = a.state.queueState.currentEntity.value;
                            if (!e) return;
                            let { entity: t } = e;
                            if (
                                t4(t.data.meta) &&
                                t.data.meta.rememberPosition &&
                                X(t.data.meta)
                            ) {
                                let { endPositionSec: a } =
                                    t.data.meta.streamProgress;
                                t.everFinished
                                    ? (e.positionSec = a)
                                    : (e.positionSec =
                                          void 0 !== e.lastSeekPosition
                                              ? e.lastSeekPosition
                                              : a);
                            }
                        });
                }
                checkBeforeProgressSync(e) {
                    var t;
                    if ((this.clearTimeout(), !this.shouldSendProgressSync(e)))
                        return;
                    let { position: a, duration: i } =
                            this.getTimingsFromPlayback(e),
                        r =
                            null == (t = e.state.queueState.currentEntity.value)
                                ? void 0
                                : t.entity.data.meta.id;
                    Number.isFinite(i) &&
                        Number.isFinite(a) &&
                        i &&
                        a &&
                        r &&
                        (this.sendProgressSync({
                            duration: i,
                            position: a,
                            trackId: r,
                        }),
                        e.state.playerState.status.value === O.MT.PLAYING &&
                            this.setTimeout(e));
                }
                sendProgressSync(e) {
                    let t = new Date().toISOString(),
                        { duration: a, position: i, trackId: r } = e;
                    this.streamsResource.progressSync({
                        lastSyncTimestamp: t,
                        trackStreams: [
                            {
                                trackId: r,
                                positionSec: i,
                                trackLengthSec: a,
                                finished: i === a,
                                timestamp: t,
                            },
                        ],
                    });
                }
                shouldSendProgressSync(e) {
                    var t;
                    if (!this.variables.isEnabled) return !1;
                    let a =
                        null == (t = e.state.queueState.currentEntity.value)
                            ? void 0
                            : t.entity.data.meta;
                    return !!(
                        a &&
                        "rememberPosition" in a &&
                        a.rememberPosition
                    );
                }
                setTimeout(e) {
                    this.clearTimeout(),
                        (this.timeoutId = window.setTimeout(() => {
                            this.checkBeforeProgressSync(e);
                        }, 3e4));
                }
                clearTimeout() {
                    window.clearTimeout(this.timeoutId);
                }
                getTimingsFromPlayback(e) {
                    return {
                        duration: Math.floor(
                            e.state.playerState.progress.value.duration,
                        ),
                        position: Math.floor(
                            e.state.playerState.progress.value.position,
                        ),
                    };
                }
                constructor(e) {
                    (0, w._)(this, "streamsResource", void 0),
                        (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "timeoutId", 0);
                    let {
                        httpClient: t,
                        streamsResourceConfig: a,
                        variables: i,
                    } = e;
                    (this.streamsResource = new t5.c(t, a)),
                        (this.variables = i);
                }
            }
            var at = a(55845),
                aa = a(20282);
            let ai = {
                [aa.N.AACMP4]: "mp4a.40.2",
                [aa.N.HEAACMP4]: "mp4a.40.5",
                [aa.N.FLACMP4]: "flac",
            };
            class ar {
                get src() {
                    var e, t;
                    if ("error" in this.data)
                        throw new Y.t("Error in DownloadInfoSource data", {
                            data: { error: this.data.error },
                        });
                    if (!this.data.urls[0])
                        throw new Y.t("No urls in DownloadInfoSource");
                    let a = this.getQueryParamsString();
                    return a
                        ? ""
                              .concat(this.data.urls[0])
                              .concat(a, "#t=")
                              .concat(null != (e = this.positionSec) ? e : 0)
                        : ""
                              .concat(this.data.urls[0], "#t=")
                              .concat(null != (t = this.positionSec) ? t : 0);
                }
                get mirrorUrls() {
                    if ("error" in this.data)
                        throw new Y.t("Error in DownloadInfoSource data", {
                            data: { error: this.data.error },
                        });
                    let e = this.getQueryParamsString(),
                        t = this.data.urls.slice(1);
                    return e ? t.map((t) => "".concat(t).concat(e)) : t;
                }
                get key() {
                    if ("error" in this.data)
                        throw new Y.t("Error in DownloadInfoSource data", {
                            data: { error: this.data.error },
                        });
                    if (this.data.transport === at.o.ENCRAW)
                        return this.data.key;
                }
                get canBePreloaded() {
                    if ("error" in this.data)
                        throw new Y.t("Error in DownloadInfoSource data", {
                            data: { error: this.data.error },
                        });
                    return [aa.N.FLACMP4, aa.N.AACMP4, aa.N.HEAACMP4].includes(
                        this.data.codec,
                    );
                }
                getQueryParamsString() {
                    if ("error" in this.data)
                        throw new Y.t("Error in DownloadInfoSource data", {
                            data: { error: this.data.error },
                        });
                    let e = ai[this.data.codec],
                        t = e ? "mp4" : void 0,
                        a =
                            void 0 === this.sourceIndex
                                ? void 0
                                : String(this.sourceIndex),
                        i = new URLSearchParams();
                    t && i.append("container", t),
                        e && i.append("codec", e),
                        this.vsid && i.append("vsid", this.vsid),
                        a && i.append("source_index", a);
                    let r = i.toString();
                    return r ? "?".concat(r) : void 0;
                }
                constructor(e) {
                    (0, w._)(this, "type", "downloadInfoSource"),
                        (0, w._)(this, "data", void 0),
                        (0, w._)(this, "vsid", void 0),
                        (0, w._)(this, "sourceIndex", void 0),
                        (0, w._)(this, "loadingTime", void 0),
                        (0, w._)(this, "getFileInfoResponseTime", void 0),
                        (0, w._)(this, "url", void 0),
                        (0, w._)(this, "positionSec", void 0),
                        (this.data = e.data),
                        (this.vsid = e.vsid),
                        (this.loadingTime = e.loadingTime),
                        (this.getFileInfoResponseTime =
                            e.getFileInfoResponseTime),
                        (this.url = e.url),
                        (this.sourceIndex = e.sourceIndex);
                }
            }
            !(function (e) {
                (e.WANT_PLAY_TRACK = "WANT_PLAY_TRACK"),
                    (e.TRACK_IS_BUFFERING = "TRACK_IS_BUFFERING"),
                    (e.TRACK_IS_PLAYING = "TRACK_IS_PLAYING"),
                    (e.TRACK_IS_PLAYING_MISSED = "TRACK_IS_PLAYING_MISSED"),
                    (e.TRACK_ERROR_PREPARE = "TRACK_ERROR_PREPARE"),
                    (e.TRACK_ERROR_INITIAL_BUFFERING =
                        "TRACK_ERROR_INITIAL_BUFFERING"),
                    (e.TRACK_ERROR_PLAYING = "TRACK_ERROR_PLAYING"),
                    (e.REQUEST_TIME = "REQUEST_TIME");
            })(P || (P = {})),
                ((E || (E = {})).GET_FILE_INFO = "get_file_info"),
                (function (e) {
                    (e.E_GET_MEDIA_SRC = "E_GET_MEDIA_SRC"),
                        (e.E_CREATE_SIGN = "E_CREATE_SIGN"),
                        (e.E_UNSUITABLE_ENTITY_TYPE =
                            "E_UNSUITABLE_ENTITY_TYPE");
                })(b || (b = {})),
                (function (e) {
                    (e.NETWORK = "NETWORK"), (e.OTHER = "OTHER");
                })(f || (f = {})),
                !(function (e) {
                    (e.BAD_RESPONSE_4XX = "BAD_RESPONSE_4XX"),
                        (e.BAD_RESPONSE_5XX = "BAD_RESPONSE_5XX"),
                        (e.OTHER = "OTHER");
                })(I || (I = {}));
            var as = a(493),
                al = a(43090);
            function an(e) {
                switch (e) {
                    case as.e.LOSSLESS:
                    case al.e.HIGH_QUALITY:
                        return k.LOSSLESS;
                    case as.e.NQ:
                    case al.e.BALANCED:
                        return k.NQ;
                    case as.e.LQ:
                    case al.e.EFFICIENT:
                        return k.LQ;
                    case as.e.PREVIEW:
                    case al.e.PREVIEW:
                        return k.PREVIEW;
                    case as.e.SMART_PREVIEW:
                        return k.SMART_PREVIEW;
                    default:
                        return;
                }
            }
            !(function (e) {
                (e.LOSSLESS = "Lossless"),
                    (e.NQ = "NQ"),
                    (e.LQ = "LQ"),
                    (e.PREVIEW = "Preview"),
                    (e.SMART_PREVIEW = "SmartPreview");
            })(k || (k = {})),
                (function (e) {
                    (e.SKIPPED = "SKIPPED"),
                        (e.NEXT = "NEXT"),
                        (e.FROM_QUEUE = "FROM_QUEUE"),
                        (e.OTHER = "OTHER");
                })(_ || (_ = {}));
            class ao {
                getEntityQualityInfo(e) {
                    let t, a, i;
                    return (
                        !e.mediaSourceData ||
                            "error" in e.mediaSourceData.data ||
                            "downloadInfoSource" !== e.mediaSourceData.type ||
                            ((t = e.mediaSourceData.data.codec),
                            (a = e.mediaSourceData.data.bitrate)),
                        e.expectedQuality && (i = an(e.expectedQuality)),
                        { codec: t, bitrate: a, expectedQuality: i }
                    );
                }
                logEvent(e) {
                    let { event: t, eventName: a } = e;
                    this.enableDebugMode &&
                        (t
                            ? (console.group(
                                  "".concat(
                                      null != a
                                          ? a
                                          : "Untitled Log Metrics Event Info",
                                  ),
                              ),
                              console.table(t.data),
                              console.group("Raw event"),
                              console.dir(t),
                              console.groupEnd(),
                              console.groupEnd())
                            : console.error(
                                  "Event in logEvent method not provided",
                              ));
                }
                requestTime(e) {
                    var t, a;
                    if (!(e.mediaSourceData instanceof ar)) return null;
                    let i = String(e.data.meta.id),
                        r =
                            null == (t = e.mediaSourceData)
                                ? void 0
                                : t.getFileInfoResponseTime,
                        s = null == (a = e.mediaSourceData) ? void 0 : a.url,
                        l = null;
                    return (
                        "number" == typeof r &&
                            s &&
                            (l = {
                                name: P.REQUEST_TIME,
                                data: {
                                    trackId: i,
                                    urlType: E.GET_FILE_INFO,
                                    url: s,
                                    time: r,
                                },
                            }),
                        this.logEvent({
                            event: l,
                            eventName: null == l ? void 0 : l.name,
                        }),
                        l && this.transport.send(l),
                        l
                    );
                }
                wantPlayTrack(e) {
                    let t = String(e.data.meta.id),
                        a = Math.trunc(performance.now()),
                        i = {
                            name: P.WANT_PLAY_TRACK,
                            data: {
                                trackId: t,
                                uuid: e.playId,
                                expectedQuality: an(
                                    this.mediaConfigController.quality.value,
                                ),
                            },
                        };
                    return (
                        this.wantPlayTracksEvents.size > 0 &&
                            this.sendTrackIsPlayingMissed(),
                        this.wantPlayTracksEvents.set(e.playId, {
                            time: a,
                            event: i,
                            trackId: t,
                        }),
                        this.logEvent({
                            event: i,
                            eventName: null == i ? void 0 : i.name,
                        }),
                        this.transport.send(i),
                        i
                    );
                }
                trackError(e, t) {
                    let {
                            codec: a,
                            bitrate: i,
                            expectedQuality: r,
                        } = this.getEntityQualityInfo(t),
                        s = null;
                    return (
                        e instanceof tA
                            ? (s = {
                                  name: P.TRACK_ERROR_PREPARE,
                                  data: {
                                      trackId: String(t.data.meta.id),
                                      uuid: t.playId,
                                      type:
                                          e.code === b.E_GET_MEDIA_SRC
                                              ? f.NETWORK
                                              : f.OTHER,
                                      subType: (function (e) {
                                          let t = I.OTHER;
                                          if (e.cause instanceof e9.GX)
                                              switch (
                                                  String(e.cause.statusCode)[0]
                                              ) {
                                                  case "4":
                                                      t = I.BAD_RESPONSE_4XX;
                                                      break;
                                                  case "5":
                                                      t = I.BAD_RESPONSE_5XX;
                                              }
                                          return t;
                                      })(e),
                                      name: e.name,
                                      code: e.code,
                                      bitrate: i,
                                      codec: a,
                                      expectedQuality: r,
                                  },
                              })
                            : e instanceof O.LI && e.code === O.QC.PLAY
                              ? (s = {
                                    name: P.TRACK_ERROR_INITIAL_BUFFERING,
                                    data: {
                                        trackId: String(t.data.meta.id),
                                        uuid: t.playId,
                                        name: e.name,
                                        code: e.code,
                                        bitrate: i,
                                        codec: a,
                                        expectedQuality: r,
                                        ...(e.cause instanceof DOMException
                                            ? {
                                                  causeCode: e.cause.code,
                                                  causeMessage: e.cause.message,
                                                  causeName: e.cause.name,
                                              }
                                            : {
                                                  causeCode: -1,
                                                  causeMessage:
                                                      "Unknown error message",
                                                  causeName:
                                                      "Unknown error name",
                                              }),
                                    },
                                })
                              : e instanceof O.LI &&
                                e.code === O.QC.MEDIA_ELEMENT_ERROR &&
                                (s = {
                                    name: P.TRACK_ERROR_PLAYING,
                                    data: {
                                        trackId: String(t.data.meta.id),
                                        uuid: t.playId,
                                        name: e.name,
                                        code: e.code,
                                        bitrate: i,
                                        codec: a,
                                        expectedQuality: r,
                                        ...(e.cause instanceof MediaError
                                            ? {
                                                  causeCode: e.cause.code,
                                                  causeMessage: e.cause.message,
                                              }
                                            : {
                                                  causeCode: -1,
                                                  causeMessage: "Unknown cause",
                                              }),
                                    },
                                }),
                        e instanceof O.LI &&
                            this.wantPlayTracksEvents.has(t.playId) &&
                            (!s ||
                                !("causeCode" in s.data) ||
                                ("causeCode" in s.data &&
                                    (null == s ? void 0 : s.data.causeCode) !==
                                        20)) &&
                            this.wantPlayTracksEvents.delete(t.playId),
                        s && this.transport.send(s),
                        this.logEvent({
                            event: s,
                            eventName: null == s ? void 0 : s.name,
                        }),
                        s
                    );
                }
                trackIsBuffering(e) {
                    let t = String(e.data.meta.id),
                        { codec: a, bitrate: i } = this.getEntityQualityInfo(e);
                    if (0 === e.totalPlayedSeconds) return null;
                    let r = {
                        name: P.TRACK_IS_BUFFERING,
                        data: {
                            trackId: t,
                            uuid: e.playId,
                            codec: a,
                            bitrate: i,
                        },
                    };
                    return (
                        this.transport.send(r),
                        this.logEvent({ event: r, eventName: r.name }),
                        r
                    );
                }
                trackIsPlaying(e) {
                    var t, a;
                    let i = String(e.data.meta.id),
                        r =
                            this.wantPlayTracksEvents.has(e.playId) &&
                            (null ==
                            (t = this.wantPlayTracksEvents.get(e.playId))
                                ? void 0
                                : t.time),
                        s = (function (e) {
                            switch (e) {
                                case O.So.SET_INDEX:
                                case O.So.MOVE_BACKWARD:
                                    return _.FROM_QUEUE;
                                case O.So.AUTO_MOVE_FORWARD:
                                    return _.NEXT;
                                case O.So.MOVE_FORWARD:
                                    return _.SKIPPED;
                                default:
                                    return _.OTHER;
                            }
                        })(
                            null ==
                                (a = this.addtionalInfoByPlayId.get(
                                    this.lastAdditionalInfoKey,
                                ))
                                ? void 0
                                : a.entityChangeMethod,
                        ),
                        {
                            codec: l,
                            bitrate: n,
                            expectedQuality: o,
                        } = this.getEntityQualityInfo(e),
                        d = null;
                    return (
                        "number" == typeof r &&
                            ((d = {
                                name: P.TRACK_IS_PLAYING,
                                data: {
                                    trackId: i,
                                    time: Math.trunc(performance.now() - r),
                                    uuid: e.playId,
                                    codec: l,
                                    bitrate: n,
                                    expectedQuality: o,
                                    extraTrackType: s,
                                },
                            }),
                            this.addtionalInfoByPlayId.delete(
                                this.lastAdditionalInfoKey,
                            ),
                            this.wantPlayTracksEvents.delete(e.playId),
                            (this.lastAdditionalInfoKey = null)),
                        d && this.transport.send(d),
                        this.logEvent({
                            event: d,
                            eventName: null == d ? void 0 : d.name,
                        }),
                        d
                    );
                }
                sendTrackIsPlayingMissed() {
                    let [e, { trackId: t }] = Array.from(
                            this.wantPlayTracksEvents.entries(),
                        )[0],
                        a = {
                            name: P.TRACK_IS_PLAYING_MISSED,
                            data: { trackId: t, uuid: e },
                        };
                    return (
                        this.wantPlayTracksEvents.delete(e),
                        this.transport.send(a),
                        this.logEvent({ event: a, eventName: a.name }),
                        a
                    );
                }
                trackHasBeenChanged(e, t) {
                    let { method: a } = t;
                    this.addtionalInfoByPlayId.size &&
                        this.addtionalInfoByPlayId.clear(),
                        (this.lastAdditionalInfoKey = e.playId),
                        this.addtionalInfoByPlayId.set(e.playId, {
                            entityChangeMethod: a,
                        });
                }
                constructor(e) {
                    var t;
                    (0, w._)(this, "mediaConfigController", void 0),
                        (0, w._)(this, "wantPlayTracksEvents", new Map()),
                        (0, w._)(this, "addtionalInfoByPlayId", new Map()),
                        (0, w._)(this, "lastAdditionalInfoKey", null),
                        (0, w._)(this, "enableDebugMode", void 0),
                        (0, w._)(this, "transport", void 0),
                        (this.enableDebugMode =
                            null == (t = e.variables)
                                ? void 0
                                : t.enableDebugMode),
                        (this.mediaConfigController = e.mediaConfigController),
                        (this.transport = e.transport);
                }
            }
            class ad {
                apply(e) {
                    let { hooks: t, playback: a } = e;
                    a.state.playerState.event.onChange(() => {
                        let e = a.state.playerState.event.value;
                        if (
                            e === O.Iu.WAITING &&
                            this.recentMediaPlayerEventType !==
                                O.Iu.SETTING_PROGRESS
                        ) {
                            let e = a.state.queueState.currentEntity.value;
                            e &&
                                this.metricsEventsStore.trackIsBuffering(
                                    e.entity,
                                );
                        }
                        this.recentMediaPlayerEventType = e;
                    }),
                        t.beforeEntityChange.tapPromise(
                            "MetricsPlugin",
                            (e) => {
                                let t = a.state.queueState.currentEntity.value;
                                return (
                                    t &&
                                        this.metricsEventsStore.trackHasBeenChanged(
                                            t.entity,
                                            e,
                                        ),
                                    Promise.resolve()
                                );
                            },
                        ),
                        t.beforeEntityPlayingProcessStart.tapPromise(
                            "MetricsPlugin",
                            () => {
                                let e = a.state.queueState.currentEntity.value;
                                return (
                                    e &&
                                        this.metricsEventsStore.wantPlayTrack(
                                            e.entity,
                                        ),
                                    Promise.resolve()
                                );
                            },
                        ),
                        t.afterError.tapPromise("MetricsPlugin", (e) => {
                            let t = a.state.queueState.currentEntity.value;
                            return (
                                t &&
                                    this.metricsEventsStore.trackError(
                                        e,
                                        t.entity,
                                    ),
                                Promise.resolve()
                            );
                        }),
                        t.afterMediaStartPlaying.tapPromise(
                            "MetricsPlugin",
                            () => {
                                let e = a.state.queueState.currentEntity.value;
                                return (
                                    e &&
                                        this.metricsEventsStore.trackIsPlaying(
                                            e.entity,
                                        ),
                                    Promise.resolve()
                                );
                            },
                        ),
                        t.beforeMediaStartPlaying.tapPromise(
                            "MetricsPlugin",
                            () => {
                                let e = a.state.queueState.currentEntity.value;
                                return (
                                    e &&
                                        this.metricsEventsStore.requestTime(
                                            e.entity,
                                        ),
                                    Promise.resolve()
                                );
                            },
                        );
                }
                constructor(e) {
                    (0, w._)(this, "metricsEventsStore", void 0),
                        (0, w._)(this, "recentMediaPlayerEventType", null),
                        (this.metricsEventsStore = new ao(e));
                }
            }
            var au = a(36998);
            function ac(e, t, a) {
                return (
                    !(e instanceof q) &&
                    !!e.isAvailable &&
                    (null === e.mediaSourceData ||
                        (!(
                            "downloadInfoSource" !== e.mediaSourceData.type ||
                            "error" in e.mediaSourceData.data ||
                            tu(e)
                        ) &&
                            (!!(
                                performance.now() -
                                    e.mediaSourceData.loadingTime >
                                t
                            ) ||
                                (function (e) {
                                    switch (e) {
                                        case as.e.LOSSLESS:
                                        case as.e.HQ:
                                            return al.e.HIGH_QUALITY;
                                        case as.e.NQ:
                                            return al.e.BALANCED;
                                        case as.e.LQ:
                                    }
                                    return al.e.EFFICIENT;
                                })(e.mediaSourceData.data.quality) !==
                                    a.quality.value)))
                );
            }
            class ag {
                apply(e) {
                    let { hooks: t, playback: a } = e,
                        i = (0, au.A)(
                            () => {
                                this.releaseAllPreloadedSrc(a),
                                    this.preload(a, t);
                            },
                            1e3,
                            { trailing: !0 },
                        );
                    this.variables.isMediaSourcePreloadEnabled &&
                        (a.state.queueState.nextEntity.onChange(i),
                        this.mediaConfigController.quality.onChange(() => {
                            this.releaseAllPreloadedSrc(a), this.preload(a, t);
                        }));
                }
                preloadStrmUrls(e) {
                    let {
                        queueState: { order: t, entityList: a, nextIndex: i },
                    } = e.state;
                    if (null !== i.value) {
                        let e = (function (e) {
                                let {
                                        preloadCount: t,
                                        contextEntityPairs: a,
                                        index: i,
                                        order: r,
                                    } = e,
                                    s = 0,
                                    l = i,
                                    n = [];
                                for (; s < t && !(l >= r.length); ) {
                                    let e = r[l];
                                    void 0 !== e && n.push(e),
                                        (l += 1),
                                        (s += 1);
                                }
                                return n.map((e) => a[e]);
                            })({
                                contextEntityPairs: a.value,
                                index: i.value,
                                order: t.value,
                                preloadCount:
                                    this.config.entitiesToPreloadStrmUrlsCount,
                            }),
                            r = (function (e) {
                                let {
                                    contextEntityPairs: t,
                                    mediaSourceTtlMs: a,
                                    mediaConfigController: i,
                                } = e;
                                return t.filter((e) => ac(e.entity, a, i));
                            })({
                                contextEntityPairs: e,
                                mediaSourceTtlMs: this.config.strmUrlsTtlMs,
                                mediaConfigController:
                                    this.mediaConfigController,
                            }).map((e) => e.entity);
                        return 0 === r.length
                            ? Promise.resolve([])
                            : this.mediaProvider
                                  .getMediaSourceBatch({ entities: r })
                                  .then(() => e);
                    }
                    return Promise.resolve([]);
                }
                preloadSources(e, t, a) {
                    return 0 === a.length
                        ? Promise.resolve()
                        : Promise.allSettled(
                              a
                                  .slice(
                                      0,
                                      this.config.entitiesToPreloadSourceCount,
                                  )
                                  .map((a) =>
                                      e
                                          .preloadSrc({
                                              entity: a.entity,
                                              bufferGoal:
                                                  this.config.bufferGoal,
                                              positionSec: a.positionSec,
                                          })
                                          .then(() => {
                                              this.preloadedSrcArray.push(
                                                  structuredClone(
                                                      a.entity.mediaSourceData,
                                                  ),
                                              );
                                          })
                                          .catch((e) =>
                                              t.afterError.promise(e),
                                          ),
                                  ),
                          ).then(() => Promise.resolve());
                }
                preload(e, t) {
                    this.preloadStrmUrls(e)
                        .then((a) => {
                            this.preloadSources(e, t, a).catch((e) =>
                                t.afterError.promise(e),
                            );
                        })
                        .catch((e) => t.afterError.promise(e));
                }
                releaseRedundantPreloadedSrc(e, t) {
                    if (
                        !(
                            this.preloadedSrcArray.length + t <=
                            this.config.preloadedSourcesMaxCount
                        )
                    )
                        for (
                            ;
                            this.preloadedSrcArray.length + t !==
                            this.config.preloadedSourcesMaxCount;

                        ) {
                            let t = this.preloadedSrcArray.shift();
                            t && e.releaseSrc(t);
                        }
                }
                releaseAllPreloadedSrc(e) {
                    for (; this.preloadedSrcArray.length; ) {
                        let t = this.preloadedSrcArray.shift();
                        t && e.releaseSrc(t);
                    }
                }
                constructor({
                    mediaProvider: e,
                    config: t,
                    mediaConfigController: a,
                    variables: i,
                }) {
                    var r;
                    (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "mediaProvider", void 0),
                        (0, w._)(this, "config", void 0),
                        (0, w._)(this, "mediaConfigController", void 0),
                        (0, w._)(this, "preloadedSrcArray", []),
                        (this.variables = {
                            isMediaSourcePreloadEnabled:
                                null !=
                                    (r =
                                        null == i
                                            ? void 0
                                            : i.isMediaSourcePreloadEnabled) &&
                                r,
                        }),
                        (this.mediaProvider = e),
                        (this.mediaConfigController = a),
                        (this.config = t);
                }
            }
            class ah {
                apply() {
                    this.trailerPlayback.hooks.afterContextEnd.tapPromise(
                        "TrailerPlugin",
                        () => (
                            this.trailerPlayback.restartContext({
                                playAfterRestart: !1,
                            }),
                            Promise.resolve()
                        ),
                    ),
                        this.trailerPlayback.hooks.afterMediaPause.tapPromise(
                            "TrailerPlugin",
                            () => (this.onTrailerPaused(), Promise.resolve()),
                        ),
                        this.trailerPlayback.hooks.afterMediaStartPlaying.tapPromise(
                            "TrailerPlugin",
                            () => (this.onTrailerPlaying(), Promise.resolve()),
                        ),
                        this.trailerPlayback.hooks.afterMediaResume.tapPromise(
                            "TrailerPlugin",
                            () => (this.onTrailerPlaying(), Promise.resolve()),
                        );
                }
                constructor({
                    onTrailerPaused: e,
                    onTrailerPlaying: t,
                    playbackController: a,
                    trailerPlaybackParams: i,
                }) {
                    if (
                        ((0, w._)(this, "onTrailerPaused", void 0),
                        (0, w._)(this, "onTrailerPlaying", void 0),
                        (0, w._)(this, "trailerPlayback", void 0),
                        (this.onTrailerPaused = e),
                        (this.onTrailerPlaying = t),
                        a.createPlayback(i.id, {
                            factory: i.factory,
                            entityProvider: i.entityProvider,
                            playbackConfig: i.playbackConfig,
                            mediaPlayerParams: i.mediaPlayerParams,
                            syncVolumeWithMainPlayback: !0,
                        }),
                        (this.trailerPlayback = a.getPlayback(i.id)),
                        i.plugins)
                    )
                        for (let e of i.plugins)
                            e.apply({
                                playback: this.trailerPlayback,
                                hooks: this.trailerPlayback.hooks,
                            });
                }
            }
            var am = a(54960);
            (T || (T = {})).START = "start";
            class ay {
                apply(e) {
                    let { playback: t } = e;
                    this.channel &&
                        ((this.channel.onmessage = (e) => {
                            let { type: a, id: i } = e.data;
                            t.state.playerState.status.value === O.MT.PLAYING &&
                                a === T.START &&
                                i !== this.activeStreamId &&
                                t.pause();
                        }),
                        t.state.playerState.status.onChange((e) => {
                            if (e === O.MT.PLAYING) {
                                var t;
                                null == (t = this.channel) ||
                                    t.postMessage({
                                        type: T.START,
                                        id: this.activeStreamId,
                                    });
                            }
                        }));
                }
                constructor() {
                    (0, w._)(this, "channel", void 0),
                        (0, w._)(this, "activeStreamId", void 0),
                        (this.activeStreamId = (0, am.A)()),
                        (this.channel = new BroadcastChannel(
                            "ya_music_playback",
                        ));
                }
            }
            class ap {
                push(e) {
                    this.callbacks.push(e);
                }
                exec() {
                    let e = [];
                    for (let t of this.callbacks)
                        if (0 === e.length) e.push(t());
                        else {
                            let a = e[e.length - 1].then(t);
                            e.push(a);
                        }
                    return Promise.allSettled(e).then(() => Promise.resolve());
                }
                constructor() {
                    (0, w._)(this, "callbacks", []);
                }
            }
            let av = {
                ynisonToPlayback: (e) => {
                    switch (e) {
                        case A.ot.ONE:
                            return O.pM.ONE;
                        case A.ot.ALL:
                            return O.pM.CONTEXT;
                        default:
                            return O.pM.NONE;
                    }
                },
            };
            class aS extends Y.t {
                constructor(e, { code: t = "E_YNISON", ...a } = {}) {
                    super(e, { code: t, ...a }),
                        (0, w._)(this, "name", "YnisonException"),
                        Object.setPrototypeOf(this, aS.prototype);
                }
            }
            let aP = (e, t) =>
                    new aS("[YnisonException] ".concat(e), {
                        cause: (0, A.y0)(t),
                    }),
                aE = (e) => {
                    let {
                            playableList: t,
                            getEntityData: a,
                            restoredParams: { currentPlayableIndex: i } = {},
                        } = e,
                        r = t
                            .filter((e) => {
                                let { playable_type: t, playable_id: a } = e;
                                return t === A.yi.TRACK && a;
                            })
                            .map(a),
                        s = "number" == typeof i && r[i];
                    return s && (s.isRestored = !0), r;
                };
            function ab(e) {
                return {
                    type: O.z4.Unloaded,
                    meta: { id: e.playable_id, albumId: e.album_id_optional },
                };
            }
            function af(e) {
                var t, a;
                return {
                    type: M.R.VibeTrack,
                    meta: { id: e.playable_id, albumId: e.album_id_optional },
                    loadEntityMeta: !0,
                    wasPlayed: !0,
                    batchId:
                        null !=
                        (a =
                            null == (t = e.track_info)
                                ? void 0
                                : t.batch_id_optional)
                            ? a
                            : void 0,
                };
            }
            let aI = (e) => !isNaN(Number(e)) && Number(e) > 0,
                ak = (e) => {
                    var t, a;
                    let i =
                            null == (t = e.player_state)
                                ? void 0
                                : t.player_queue,
                        r = (null == i ? void 0 : i.playable_list) || [];
                    return (
                        i.from_optional ||
                        (null == (a = r[0]) ? void 0 : a.from) ||
                        "embedded-radio"
                    );
                },
                a_ = (e) => {
                    var t, a, i, r;
                    let s =
                            null == (t = e.player_state)
                                ? void 0
                                : t.player_queue,
                        l = (null == s ? void 0 : s.playable_list) || [],
                        n =
                            null ==
                            (r =
                                l[
                                    null == (i = e.player_state) ||
                                    null == (a = i.player_queue)
                                        ? void 0
                                        : a.current_playable_index
                                ])
                                ? void 0
                                : r.playable_id;
                    return n && l.length
                        ? { type: Z.K.Various, from: ak(e), meta: { id: n } }
                        : null;
                },
                aT = (e) => {
                    var t, a, i, r, s;
                    let l =
                        null !=
                        (s =
                            null == (a = e.player_state) ||
                            null == (t = a.player_queue)
                                ? void 0
                                : t.current_playable_index)
                            ? s
                            : 0;
                    return (
                        (null == (r = e.player_state) ||
                        null == (i = r.player_queue)
                            ? void 0
                            : i.playable_list) || []
                    ).slice(0, l + 1);
                },
                aC = "user:onyourwave";
            function aD(e) {
                let t =
                    !(arguments.length > 1) ||
                    void 0 === arguments[1] ||
                    arguments[1];
                switch (e.state.playerState.status.value) {
                    case O.MT.PLAYING:
                        return !1;
                    case O.MT.PAUSED:
                    case O.MT.STOPPED:
                    case O.MT.IDLE:
                        return !0;
                    default:
                        return t;
                }
            }
            const electronBridge = a(77575);
            window.onRemoteDeviceConnected = [];
            window.onRemoteDeviceDisconnected = [];
            class aA {
                onYnisonStateUpdated(e) {

                    const isRemoteControlEnabled = window.ENABLE_YNISON_REMOTE_CONTROL;
                    const allowedStatuses1 = [
                        O.MT.ENDED,
                        O.MT.IDLE,
                        O.MT.PAUSED,
                        O.MT.STOPPED,
                        O.MT.MEDIA_ELEMENT_ERROR,
                    ];
                    const allowedStatuses2 = [
                        O.MT.ENDED,
                        O.MT.IDLE,
                        O.MT.STOPPED,
                        O.MT.MEDIA_ELEMENT_ERROR,
                    ];
                    const current_device_id = JSON.parse(localStorage.getItem('ynisonDeviceId'))?.value;
                    const currentStatus = this.playback.state.playerState.status.value;
                    const shouldApplyState = this.variables.shouldApplyState;
                    const isDeviceMatch = e.state.active_device_id_optional === current_device_id;
                    const selfStateDuped = e.state.player_state.status.version.device_id === current_device_id;

                    if (!selfStateDuped) {
                        // Отправляем состояние Ynison в main процесс
                        electronBridge.sendYnisonState({ rawData: e.state });
                    }

                    if (isRemoteControlEnabled
                            ? shouldApplyState &&
                            ((!selfStateDuped && isDeviceMatch) || allowedStatuses2.includes(currentStatus))
                            : allowedStatuses1.includes(currentStatus) && shouldApplyState
                    ) {
                        if (isRemoteControlEnabled && !selfStateDuped) {
                            const currentDevice = e.state.devices.find(
                                (device) =>
                                    device.info.device_id ===
                                    e.state.player_state.status.version.device_id,
                            );
                            window.onRemoteDeviceConnected.forEach((listener) =>
                                listener(currentDevice),
                            );
                            window.remoteDeviceConnected = true;
                        }
                    } else if (isRemoteControlEnabled && !isDeviceMatch) {
                        window.onRemoteDeviceDisconnected.forEach((listener) => listener());
                        window.remoteDeviceConnected = false;
                    }

                    this.variables.shouldApplyState && this.applyYnisonDiff(e);
                }
                applyYnisonDiff(e) {
                    var t, a, i, r, s, l, n;
                    let o = new ap();
                    if (
                        ((
                            (l = e.diff).player_state &&
                            l.player_state.player_queue &&
                            (l.player_state.player_queue.playable_list ||
                                l.player_state.player_queue.entity_id)
                                ? 0
                                : 1
                        )
                            ? (n = e.diff).player_state &&
                              n.player_state.player_queue &&
                              (("number" ==
                                  typeof n.player_state.player_queue
                                      .current_playable_index &&
                                  !n.player_state.player_queue.playable_list &&
                                  !n.player_state.player_queue.entity_id) ||
                                  0) &&
                              o.push(() =>
                                  this.changeEntityInCurrentContext(e.state),
                              )
                            : o.push(() => this.changeContext(e.state)),
                        null == (a = e.diff.player_state) ||
                        null == (t = a.player_queue)
                            ? void 0
                            : t.shuffle_optional)
                    ) {
                        let t =
                            e.diff.player_state.player_queue.shuffle_optional;
                        o.push(() => this.changeShuffle(t));
                    }
                    if (
                        null == (r = e.diff.player_state) ||
                        null == (i = r.player_queue)
                            ? void 0
                            : i.options
                    ) {
                        let t = e.diff.player_state.player_queue.options;
                        e.state.player_state.player_queue.entity_type ===
                            A.$P.RADIO && (t = { repeat_mode: A.ot.NONE }),
                            o.push(() => this.changeOptions(t));
                    }
                    if (null == (s = e.diff.player_state) ? void 0 : s.status) {
                        let t = e.diff.player_state.status;
                        o.push(() => this.changeStatus(t));
                    }
                    return o.exec();
                }
                changeOptions(e) {
                    let t = av.ynisonToPlayback(e.repeat_mode);
                    return this.playback.setRepeatMode(t), Promise.resolve();
                }
                changeShuffle(e) {
                    let t = !!(
                        Array.isArray(e.playable_indices) &&
                        e.playable_indices.length
                    );
                    return this.playback.setShuffle(t), Promise.resolve();
                }
                changeStatus(e) {
                    let t = new ap(),
                        a = Number(e.playback_speed),
                        i = Number(e.progress_ms) / 1e3;
                    return (
                        Number.isNaN(a) ||
                            t.push(() =>
                                this.playback
                                    .setSpeed(a)
                                    .then(() => Promise.resolve()),
                            ),
                        Number.isNaN(i) ||
                            t.push(() => {
                                let e =
                                        this.playback.state.playerState.status
                                            .value === O.MT.PLAYING,
                                    t = Math.abs(
                                        this.playback.state.playerState.progress
                                            .value.position - i,
                                    );
                                if (e && t > A.O5)
                                    return this.playback
                                        .setProgress(i)
                                        .then(() => Promise.resolve());
                                let {
                                    currentEntity: { value: a },
                                } = this.playback.state.queueState;
                                return (
                                    a && (a.positionSec = i), Promise.resolve()
                                );
                            }),
                        void 0 !== e.paused &&
                            e.paused !== aD(this.playback, e.paused) &&
                            t.push(() => this.playback.togglePause()),
                        t.exec()
                    );
                }
                changeContext(e) {
                    let t = this.getContextParams(e);
                    return t
                        ? this.playback
                              .setContext(t)
                              .then(() => {
                                  let e =
                                      this.playback.state.queueState
                                          .currentEntity.value;
                                  return (
                                      e &&
                                          !e.entity.hasPlayId() &&
                                          (e.entity.playId = (0, am.A)()),
                                      this.playback.stop()
                                  );
                              })
                              .then(() => {
                                  void 0 !== e.player_state.status.paused &&
                                      e.player_state.status.paused !==
                                          aD(
                                              this.playback,
                                              e.player_state.status.paused,
                                          ) &&
                                      this.playback.togglePause();
                              })
                              .catch((e) => {
                                  this.playback.hooks.afterError.promise(
                                      aP("PlaybackSetContextError", e),
                                  );
                              })
                        : Promise.resolve();
                }
                changeEntityInCurrentContext(e) {
                    let t = e.player_state.player_queue.current_playable_index;
                    return this.playback.setEntityByIndex(t);
                }
                getContextParams(e) {
                    try {
                        var t, a;
                        let i = ((e, t) => {
                            var a;
                            let i =
                                    null == (a = e.player_state)
                                        ? void 0
                                        : a.player_queue,
                                r = null == i ? void 0 : i.entity_type;
                            if (!r) return null;
                            if (t.includes(r))
                                return {
                                    type: Z.K.Vibe,
                                    from: ak(e),
                                    seeds: [aC],
                                    includeTracksInResponse: !0,
                                    meta: { id: aC },
                                };
                            switch (r) {
                                case A.$P.ALBUM:
                                    var s,
                                        l = e;
                                    let n =
                                            null == (s = l.player_state)
                                                ? void 0
                                                : s.player_queue,
                                        o = null == n ? void 0 : n.entity_id;
                                    return aI(o)
                                        ? {
                                              type: Z.K.Album,
                                              from: ak(l),
                                              meta: { id: o },
                                          }
                                        : a_(l);
                                case A.$P.ARTIST:
                                    var d,
                                        u = e;
                                    let c =
                                            null == (d = u.player_state)
                                                ? void 0
                                                : d.player_queue,
                                        g = null == c ? void 0 : c.entity_id;
                                    return aI(g)
                                        ? {
                                              type: Z.K.Artist,
                                              from: ak(u),
                                              meta: { id: g },
                                          }
                                        : a_(u);
                                case A.$P.PLAYLIST:
                                    return ((e) => {
                                        var t;
                                        let a =
                                                null == (t = e.player_state)
                                                    ? void 0
                                                    : t.player_queue,
                                            i =
                                                null == a
                                                    ? void 0
                                                    : a.entity_id,
                                            r = ak(e),
                                            [s, l] = String(i).split(":");
                                        if (aI(s) && aI(l)) {
                                            let e = { uid: Number(s) };
                                            return {
                                                type: Z.K.Playlist,
                                                from: r,
                                                meta: {
                                                    id: i,
                                                    kind: Number(l),
                                                    owner: e,
                                                },
                                            };
                                        }
                                        return a_(e);
                                    })(e);
                                case A.$P.RADIO:
                                    return ((e) => {
                                        var t, a, i, r, s;
                                        let l =
                                                null == (t = e.player_state)
                                                    ? void 0
                                                    : t.player_queue,
                                            n = aT(e),
                                            o =
                                                null == l
                                                    ? void 0
                                                    : l.entity_id,
                                            d =
                                                null == (s = l.queue) ||
                                                null == (r = s.wave_queue) ||
                                                null ==
                                                    (i = r.entity_options) ||
                                                null ==
                                                    (a = i.wave_entity_optional)
                                                    ? void 0
                                                    : a.session_id,
                                            u = n.map((e) =>
                                                e.album_id_optional
                                                    ? ""
                                                          .concat(
                                                              e.playable_id,
                                                              ":",
                                                          )
                                                          .concat(
                                                              e.album_id_optional,
                                                          )
                                                    : e.playable_id,
                                            );
                                        return "string" == typeof o || d
                                            ? {
                                                  type: Z.K.Vibe,
                                                  from: ak(e),
                                                  seeds: String(o).split(","),
                                                  includeTracksInResponse: !0,
                                                  cloneSessionId: d,
                                                  meta: { id: o },
                                                  queue: u,
                                                  interactive: !1,
                                              }
                                            : a_(e);
                                    })(e);
                                case A.$P.GENERATIVE:
                                    var h,
                                        m,
                                        y = e;
                                    let p =
                                            null == (h = y.player_state)
                                                ? void 0
                                                : h.player_queue,
                                        [v, S] =
                                            (null == p ||
                                            null == (m = p.entity_id)
                                                ? void 0
                                                : m.split(" ")) || [];
                                    return v
                                        ? {
                                              type: Z.K.Generative,
                                              from: ak(y),
                                              meta: {
                                                  id: v,
                                                  stream: S
                                                      ? { id: v, url: S }
                                                      : void 0,
                                              },
                                          }
                                        : null;
                                case A.$P.VARIOUS:
                                    return a_(e);
                                default:
                                    return null;
                            }
                        })(e, this.fallbackTypesQueueToVibe);
                        if (!i) return null;
                        let r = this.factory.createContext({ data: i }),
                            s =
                                null == (a = e.player_state) ||
                                null == (t = a.player_queue)
                                    ? void 0
                                    : t.playable_list,
                            l = ((e, t) => {
                                var a;
                                let i =
                                        null == (a = e.player_state)
                                            ? void 0
                                            : a.player_queue,
                                    r =
                                        (null == i
                                            ? void 0
                                            : i.current_playable_index) || 0,
                                    s = ((null == i
                                        ? void 0
                                        : i.playable_list) || [])[r],
                                    l = null == i ? void 0 : i.entity_type;
                                return !s || t.includes(l)
                                    ? { index: 0 }
                                    : { entityId: s.playable_id, index: r };
                            })(e, this.fallbackTypesQueueToVibe);
                        if ((0, eN.i)(r)) {
                            let t = aE({
                                playableList: aT(e),
                                getEntityData: af,
                                restoredParams: {
                                    currentPlayableIndex:
                                        e.player_state.player_queue
                                            .current_playable_index,
                                },
                            });
                            return {
                                context: r,
                                entitiesData: t.length ? t : void 0,
                                loadContextMeta: !0,
                                queueParams: l,
                            };
                        }
                        let n = aE({
                            playableList: s,
                            getEntityData: ab,
                            restoredParams: {
                                currentPlayableIndex:
                                    e.player_state.player_queue
                                        .current_playable_index,
                            },
                        });
                        if ((0, tS.p)(r))
                            return {
                                context: r,
                                entitiesData: n,
                                loadContextMeta: !1,
                                queueParams: l,
                            };
                        if ((0, e2.S)(r))
                            return { context: r, loadContextMeta: !0 };
                        if (200 === s.length)
                            return {
                                context: r,
                                loadContextMeta: !0,
                                queueParams: l,
                            };
                        return {
                            context: r,
                            entitiesData: n,
                            loadContextMeta: !0,
                            queueParams: l,
                        };
                    } catch (e) {
                        return (
                            this.playback.hooks.afterError.promise(
                                aP("GetContextParamsError", e),
                            ),
                            null
                        );
                    }
                }
                destroy() {
                    this.unlisteners.forEach((e) => e());
                }
                constructor({
                    factory: e,
                    playback: t,
                    ynisonStateController: a,
                    variables: i,
                    fallbackTypesQueueToVibe: r,
                }) {
                    (0, w._)(this, "factory", void 0),
                        (0, w._)(this, "playback", void 0),
                        (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "unlisteners", void 0),
                        (0, w._)(this, "fallbackTypesQueueToVibe", void 0),
                        (this.factory = e),
                        (this.playback = t),
                        (this.variables = i),
                        (this.unlisteners = []),
                        (this.fallbackTypesQueueToVibe = null != r ? r : []);
                    let s = a.on(
                        A.p$.UPDATED,
                        this.onYnisonStateUpdated.bind(this),
                        "YnisonPlugin",
                    );
                    this.unlisteners.push(s),
                        this.onYnisonStateUpdated(a.fullState);
                }
            }
            let aL = (e) => {
                    var t, a, i, r, s, l, n;
                    switch (
                        null == (t = e.state.queueState.currentEntity.value)
                            ? void 0
                            : t.entity.data.type
                    ) {
                        case M.R.Music:
                        case M.R.VibeTrack:
                            return (
                                null == (a = e.state.currentContext.value)
                                    ? void 0
                                    : a.data.meta.id
                            )
                                ? String(
                                      null == (i = e.state.currentContext.value)
                                          ? void 0
                                          : i.data.meta.id,
                                  )
                                : "";
                        case M.R.Generative:
                            return (
                                null == (r = e.state.currentContext.value)
                                    ? void 0
                                    : r.data.meta.id
                            )
                                ? String(
                                      null == (s = e.state.currentContext.value)
                                          ? void 0
                                          : s.data.meta.id,
                                  )
                                : "";
                        default:
                            return (
                                null == (l = e.state.currentContext.value)
                                    ? void 0
                                    : l.data.meta.id
                            )
                                ? String(
                                      null == (n = e.state.currentContext.value)
                                          ? void 0
                                          : n.data.meta.id,
                                  )
                                : "";
                    }
                },
                aN = (e) => {
                    switch (e) {
                        case Z.K.Album:
                            return A.$P.ALBUM;
                        case Z.K.Playlist:
                            return A.$P.PLAYLIST;
                        case Z.K.Artist:
                            return A.$P.ARTIST;
                        case Z.K.Vibe:
                            return A.$P.RADIO;
                        case Z.K.Various:
                            return A.$P.VARIOUS;
                        case Z.K.Generative:
                            return A.$P.GENERATIVE;
                        default:
                            return A.$P.VARIOUS;
                    }
                },
                aR = (e) => {
                    var t, a, i;
                    return ((e) =>
                        "object" == typeof e &&
                        e &&
                        "durationMs" in e &&
                        "number" == typeof e.durationMs)(
                        null == (t = e.state.queueState.currentEntity.value)
                            ? void 0
                            : t.entity.data.meta,
                    ) &&
                        null !=
                            (i =
                                null ==
                                (a = e.state.queueState.currentEntity.value)
                                    ? void 0
                                    : a.entity.data.meta.durationMs)
                        ? i
                        : 0;
                },
                aw = function (e) {
                    var t, a, i, r, s, l, n, o, d, u, c, g;
                    let { entity: h } = e,
                        m =
                            arguments.length > 1 && void 0 !== arguments[1]
                                ? arguments[1]
                                : "";
                    switch (h.data.type) {
                        case M.R.Music:
                            return {
                                album_id_optional:
                                    "number" ==
                                    typeof (null == (a = h.data.meta.albums) ||
                                    null == (t = a[0])
                                        ? void 0
                                        : t.id)
                                        ? String(
                                              null == (i = h.data.meta.albums)
                                                  ? void 0
                                                  : i[0].id,
                                          )
                                        : null,
                                from: m,
                                playable_id: String(h.data.meta.id),
                                playable_type: A.yi.TRACK,
                                title: null != (r = h.data.meta.title) ? r : "",
                                cover_url_optional:
                                    null != (s = h.data.meta.coverUri)
                                        ? s
                                        : null,
                                navigation_id_optional: null,
                                playback_action_id_optional: null,
                            };
                        case M.R.Generative:
                            return {
                                album_id_optional: null,
                                from: m,
                                playable_id: "",
                                playable_type: A.yi.INFINITE,
                                title: null != (l = h.data.meta.title) ? l : "",
                                cover_url_optional: null,
                                navigation_id_optional: null,
                                playback_action_id_optional: null,
                            };
                        case M.R.VibeTrack:
                            return {
                                album_id_optional:
                                    "number" ==
                                    typeof (null == (o = h.data.meta.albums) ||
                                    null == (n = o[0])
                                        ? void 0
                                        : n.id)
                                        ? String(
                                              null == (d = h.data.meta.albums)
                                                  ? void 0
                                                  : d[0].id,
                                          )
                                        : null,
                                from: m,
                                playable_id: String(h.data.meta.id),
                                playable_type: A.yi.TRACK,
                                title: null != (u = h.data.meta.title) ? u : "",
                                cover_url_optional:
                                    null != (c = h.data.meta.coverUri)
                                        ? c
                                        : null,
                                track_info: {
                                    batch_id_optional:
                                        null != (g = h.data.batchId) ? g : null,
                                    track_source_key: 0,
                                },
                                navigation_id_optional: null,
                                playback_action_id_optional: null,
                            };
                        default:
                            return {
                                album_id_optional: null,
                                from: m,
                                playable_id: String(h.data.meta.id),
                                playable_type: A.yi.TRACK,
                                title: "",
                                cover_url_optional: null,
                                navigation_id_optional: null,
                                playback_action_id_optional: null,
                            };
                    }
                };
            function ax(e) {
                return e.entity.hidden;
            }
            class aO {
                subscribeOnPlayerEvents() {
                    let e = this.playback.state.playerState.status.onChange(
                            (e) => {
                                switch (e) {
                                    case O.MT.PLAYING:
                                    case O.MT.PAUSED:
                                        this.updateYnisonState();
                                }
                            },
                        ),
                        t = this.playback.state.playerState.event.onChange(
                            (e) => {
                                switch (e) {
                                    case O.Iu.SET_PROGRESS:
                                        this.ynisonStateController.currentState
                                            .player_state.status.progress_ms /
                                            1e3 !==
                                            this.playback.state.playerState
                                                .progress.value.position &&
                                            this.updateYnisonState();
                                        break;
                                    case O.Iu.SET_SPEED:
                                        this.ynisonStateController.currentState
                                            .player_state.status
                                            .playback_speed !==
                                            this.playback.state.playerState
                                                .speed.value &&
                                            this.updateYnisonState();
                                }
                            },
                        ),
                        a = this.playback.state.playerState.speed.onChange(
                            () => {
                                this.updateYnisonState();
                            },
                        ),
                        i = this.playback.state.queueState.repeat.onChange(
                            () => {
                                this.updateYnisonState();
                            },
                        ),
                        r = this.playback.state.queueState.shuffle.onChange(
                            () => {
                                this.updateYnisonState();
                            },
                        ),
                        s = this.playback.state.queueState.entityList.onChange(
                            () => {
                                this.updateYnisonState({ useYnisonStatus: !0 });
                            },
                        ),
                        l = this.playback.state.queueState.order.onChange(
                            () => {
                                this.updateYnisonState({ useYnisonStatus: !0 });
                            },
                        );
                    this.unsubscribeFromPlayerEvents = () => {
                        e(), t(), i(), r(), a(), s(), l();
                    };
                }
                updateYnisonState(e) {
                    setTimeout(() => {
                        let t = (function (e) {
                            var t, a, i, r, s, l, n, o, d, u;
                            let {
                                    playback: c,
                                    ynisonStateController: g,
                                    deviceId: h,
                                    variables: m,
                                } = e,
                                {
                                    devices: y,
                                    active_device_id_optional: p,
                                    player_state: {
                                        player_queue_inject_optional: v,
                                        status: S,
                                    },
                                } = g.currentState,
                                P = (function (e, t) {
                                    let a = e.state.queueState.index.value,
                                        i = e.state.queueState.entityList.value;
                                    return (
                                        t.enableSendLimitedEntityListToYnison &&
                                            (i = i.filter((e) => !ax(e))),
                                        (0, eN.i)(
                                            e.state.currentContext.value,
                                        ) &&
                                            t.enableSendLimitedEntityListToYnison &&
                                            (i = eh(
                                                e.state.queueState.entityList
                                                    .value,
                                                a,
                                            )),
                                        i
                                    );
                                })(c, m),
                                E =
                                    ((l =
                                        null ==
                                        (t = c.state.currentContext.value)
                                            ? void 0
                                            : t.from),
                                    P.map((e) => aw(e, l))),
                                {
                                    playableIndices: b,
                                    currentPlayableIndex: f,
                                    playableList: I,
                                } = (function (e) {
                                    let {
                                            playableList: t,
                                            currentPlayableIndex: a,
                                            playback: i,
                                            newIndexOrderMap: r,
                                            variables: s,
                                        } = e,
                                        l = i.state.queueState.order.value;
                                    if (
                                        (s.enableSendLimitedEntityListToYnison &&
                                            (l = l
                                                .filter((e) => r.has(e))
                                                .map((e) => r.get(e))),
                                        t.length <= 200)
                                    )
                                        return {
                                            playableList: t,
                                            currentPlayableIndex: a,
                                            playableIndices: l,
                                        };
                                    if (i.state.queueState.shuffle.value) {
                                        let e = l.indexOf(a),
                                            i = l.slice(e, 200),
                                            r = [...i]
                                                .sort((e, t) => e - t)
                                                .map((e) => t[e]),
                                            s = new Map(),
                                            n = i.map((e) => {
                                                var a;
                                                let i = t[e].playable_id,
                                                    l =
                                                        null != (a = s.get(i))
                                                            ? a
                                                            : -1,
                                                    n = r.findIndex(
                                                        (e, t) =>
                                                            t > l &&
                                                            e.playable_id === i,
                                                    );
                                                return s.set(i, n), n;
                                            }),
                                            o = r.findIndex(
                                                (e) =>
                                                    e.playable_id ===
                                                    t[a].playable_id,
                                            );
                                        return {
                                            playableList: r,
                                            currentPlayableIndex: o,
                                            playableIndices: n,
                                        };
                                    }
                                    let n = t[a].playable_id,
                                        o = Math.max(0, a - 100);
                                    o + 200 > t.length && (o = t.length - 200);
                                    let d = t.slice(o, o + 200),
                                        u = d.findIndex(
                                            (e) => e.playable_id === n,
                                        );
                                    return {
                                        playableList: d,
                                        currentPlayableIndex: u,
                                        playableIndices: l,
                                    };
                                })({
                                    playableList: E,
                                    currentPlayableIndex: (function (e, t) {
                                        let {
                                                order: { value: a },
                                                index: { value: i },
                                                entityList: { value: r },
                                            } = e.state.queueState,
                                            s = a[i];
                                        if ("number" != typeof s) return -1;
                                        let l = r[s];
                                        return t.findIndex((e) => {
                                            let { entity: t } = e;
                                            return (
                                                t.data.meta.id ===
                                                (null == l
                                                    ? void 0
                                                    : l.entity.data.meta.id)
                                            );
                                        });
                                    })(c, P),
                                    newIndexOrderMap: (function (e, t) {
                                        let a = new Map(),
                                            i = 0;
                                        for (let r = 0; r < e.length; r++) {
                                            let s = e[r];
                                            s && !t(s) && (a.set(r, i), i++);
                                        }
                                        return a;
                                    })(c.state.queueState.entityList.value, ax),
                                    playback: c,
                                    variables: m,
                                }),
                                k =
                                    null != (r = m.forcePause)
                                        ? r
                                        : aD(c, S.paused),
                                _ = {
                                    duration_ms: aR(c),
                                    progress_ms: ((e) => {
                                        var t;
                                        let a =
                                                1e3 *
                                                Math.floor(
                                                    e.state.playerState.progress
                                                        .value.position,
                                                ),
                                            i = aR(e);
                                        return (null ==
                                        (t =
                                            e.state.queueState.currentEntity
                                                .value)
                                            ? void 0
                                            : t.context.data.type) ===
                                            Z.K.Generative
                                            ? 0
                                            : a < i
                                              ? a
                                              : 0;
                                    })(c),
                                    paused: k,
                                    playback_speed:
                                        c.state.playerState.speed.value,
                                    version: (0, A.fD)(h, 0),
                                };
                            return {
                                active_device_id_optional: p,
                                devices: y,
                                player_state: {
                                    player_queue_inject_optional: v,
                                    status: m.useYnisonStatus ? S : _,
                                    player_queue: {
                                        entity_id: aL(c),
                                        entity_type: aN(
                                            null ==
                                                (a =
                                                    c.state.currentContext
                                                        .value)
                                                ? void 0
                                                : a.data.type,
                                        ),
                                        current_playable_index: f,
                                        playable_list: I,
                                        shuffle_optional: c.state.queueState
                                            .shuffle.value
                                            ? { playable_indices: b }
                                            : null,
                                        options: {
                                            repeat_mode: ((e) => {
                                                switch (e) {
                                                    case O.pM.NONE:
                                                        return A.ot.NONE;
                                                    case O.pM.ONE:
                                                        return A.ot.ONE;
                                                    case O.pM.CONTEXT:
                                                        return A.ot.ALL;
                                                    default:
                                                        return A.ot.NONE;
                                                }
                                            })(c.state.queueState.repeat.value),
                                        },
                                        entity_context:
                                            A.oh.BASED_ON_ENTITY_BY_DEFAULT,
                                        from_optional:
                                            null !=
                                            (s =
                                                null ==
                                                (i =
                                                    c.state.currentContext
                                                        .value)
                                                    ? void 0
                                                    : i.from)
                                                ? s
                                                : null,
                                        initial_entity_optional: (0, e2.S)(
                                            null ==
                                                (n =
                                                    c.state.queueState
                                                        .currentEntity.value)
                                                ? void 0
                                                : n.context,
                                        )
                                            ? {
                                                  entity_id: aL(c),
                                                  entity_type: aN(
                                                      null ==
                                                          (o =
                                                              c.state
                                                                  .currentContext
                                                                  .value)
                                                          ? void 0
                                                          : o.data.type,
                                                  ),
                                              }
                                            : null,
                                        adding_options_optional:
                                            (0, eN.i)(
                                                null ==
                                                    (d =
                                                        c.state.queueState
                                                            .currentEntity
                                                            .value)
                                                    ? void 0
                                                    : d.context,
                                            ) &&
                                            (null ==
                                            (u =
                                                c.state.queueState.currentEntity
                                                    .value)
                                                ? void 0
                                                : u.context.data.meta.session)
                                                ? {
                                                      radio_options: {
                                                          session_id:
                                                              c.state.queueState
                                                                  .currentEntity
                                                                  .value.context
                                                                  .data.meta
                                                                  .session
                                                                  .radioSessionId,
                                                      },
                                                  }
                                                : null,
                                        queue: null,
                                        version: (0, A.fD)(h, 0),
                                    },
                                },
                            };
                        })({
                            playback: this.playback,
                            ynisonStateController: this.ynisonStateController,
                            deviceId: this.deviceConfig.info.device_id,
                            variables: { ...this.variables, ...e },
                        });
                        this.ynisonStateController.updateState({
                            newState: t,
                            skipVersionCompare: !0,
                            trigger: "YnisonPlugin",
                        });
                    }, 0);
                }
                destroy() {
                    var e;
                    null == (e = this.unsubscribeFromPlayerEvents) ||
                        e.call(this),
                        this.updateYnisonState({ forcePause: !0 });
                }
                constructor({
                    playback: e,
                    ynisonStateController: t,
                    deviceConfig: a,
                    variables: i,
                }) {
                    (0, w._)(this, "unsubscribeFromPlayerEvents", void 0),
                        (0, w._)(this, "playback", void 0),
                        (0, w._)(this, "ynisonStateController", void 0),
                        (0, w._)(this, "deviceConfig", void 0),
                        (0, w._)(this, "variables", void 0),
                        (this.playback = e),
                        (this.ynisonStateController = t),
                        (this.deviceConfig = a),
                        (this.variables = i),
                        this.subscribeOnPlayerEvents(),
                        this.updateYnisonState();
                }
            }
            class aG {
                apply(e) {
                    let { playback: t, hooks: a } = e,
                        i = new aA({
                            playback: t,
                            factory: this.factory,
                            ynisonStateController: this.ynisonStateController,
                            variables: this.variables,
                            fallbackTypesQueueToVibe:
                                this.fallbackTypesQueueToVibe,
                        }),
                        r = new aO({
                            playback: t,
                            ynisonStateController: this.ynisonStateController,
                            deviceConfig: this.deviceConfig,
                            variables: this.variables,
                        });
                    a.beforeEntityChange.tapPromise("YnisonPlugin", () => {
                        let {
                            currentEntity: { value: e },
                        } = t.state.queueState;
                        return e && (e.positionSec = void 0), Promise.resolve();
                    }),
                        a.beforeDestroy.tapPromise(
                            "YnisonPlugin",
                            () => (i.destroy(), r.destroy(), Promise.resolve()),
                        );
                }
                constructor({
                    factory: e,
                    deviceConfig: t,
                    ynisonStateController: a,
                    variables: i,
                    fallbackTypesQueueToVibe: r,
                }) {
                    (0, w._)(this, "factory", void 0),
                        (0, w._)(this, "deviceConfig", void 0),
                        (0, w._)(this, "ynisonStateController", void 0),
                        (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "fallbackTypesQueueToVibe", void 0),
                        (this.factory = e),
                        (this.deviceConfig = t),
                        (this.ynisonStateController = a),
                        (this.variables = i),
                        (this.fallbackTypesQueueToVibe = null != r ? r : []);
                }
            }
            class aM {
                subscribeOnPlayerEvents() {
                    let e = this.playback.state.playerState.volume.onChange(
                        () => {
                            this.updateYnisonState();
                        },
                    );
                    this.unsubscribeFromPlayerEvents = () => {
                        e();
                    };
                }
                updateYnisonState() {
                    this.ynisonStateController.updateState({
                        trigger: "YnisonValuePlugin",
                        newState: {
                            ...this.ynisonStateController.currentState,
                            devices: this.createDevices(),
                        },
                    });
                }
                createDevices() {
                    return this.ynisonStateController.currentState.devices.map(
                        (e) => {
                            var t;
                            return (
                                (null == (t = e.info)
                                    ? void 0
                                    : t.device_id) ===
                                    this.deviceConfig.info.device_id &&
                                    (e.volume_info = {
                                        volume: (0, A.F4)(
                                            this.playback.state.playerState
                                                .exponentVolume.value,
                                            this.deviceConfig.volumeGranularity,
                                        ),
                                        version: (0, A.fD)(
                                            this.deviceConfig.info.device_id,
                                        ),
                                    }),
                                e
                            );
                        },
                    );
                }
                destroy() {
                    var e;
                    null == (e = this.unsubscribeFromPlayerEvents) ||
                        e.call(this);
                }
                constructor({
                    playback: e,
                    ynisonStateController: t,
                    deviceConfig: a,
                }) {
                    (0, w._)(this, "unsubscribeFromPlayerEvents", void 0),
                        (0, w._)(this, "playback", void 0),
                        (0, w._)(this, "ynisonStateController", void 0),
                        (0, w._)(this, "deviceConfig", void 0),
                        (this.playback = e),
                        (this.ynisonStateController = t),
                        (this.deviceConfig = a),
                        this.subscribeOnPlayerEvents(),
                        this.updateYnisonState();
                }
            }
            class aK {
                onYnisonStateUpdated(e) {
                    this.variables.shouldApplyState && this.applyYnisonDiff(e);
                }
                applyYnisonDiff(e) {
                    if (e.diff.deviceVolume) {
                        let t = e.diff.deviceVolume.volume;
                        if (void 0 !== t) return this.changeVolume(t);
                    }
                    return Promise.resolve();
                }
                changeVolume(e) {
                    return (
                        this.playback.setExponentVolume(e), Promise.resolve()
                    );
                }
                destroy() {
                    this.unlisteners.forEach((e) => e());
                }
                constructor({
                    playback: e,
                    ynisonStateController: t,
                    variables: a,
                }) {
                    (0, w._)(this, "playback", void 0),
                        (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "unlisteners", void 0),
                        (this.playback = e),
                        (this.variables = a),
                        (this.unlisteners = []);
                    let i = t.on(
                        A.p$.UPDATED,
                        this.onYnisonStateUpdated.bind(this),
                        "YnisonVolumePlugin",
                    );
                    this.unlisteners.push(i),
                        this.onYnisonStateUpdated(t.fullState);
                }
            }
            class aF {
                apply(e) {
                    let { playback: t, hooks: a } = e,
                        i = new aK({
                            playback: t,
                            ynisonStateController: this.ynisonStateController,
                            variables: this.variables,
                        }),
                        r = new aM({
                            playback: t,
                            ynisonStateController: this.ynisonStateController,
                            deviceConfig: this.deviceConfig,
                        });
                    a.beforeDestroy.tapPromise(
                        "YnisonVolumePlugin",
                        () => (i.destroy(), r.destroy(), Promise.resolve()),
                    );
                }
                constructor({
                    deviceConfig: e,
                    ynisonStateController: t,
                    variables: a,
                }) {
                    (0, w._)(this, "deviceConfig", void 0),
                        (0, w._)(this, "ynisonStateController", void 0),
                        (0, w._)(this, "variables", void 0),
                        (this.deviceConfig = e),
                        (this.ynisonStateController = t),
                        (this.variables = a);
                }
            }
            let aX = [Z.K.Album, Z.K.Artist, Z.K.Playlist, Z.K.Various];
            class aj {
                apply(e) {
                    let { playback: t, hooks: a } = e;
                    a.afterContextEnd.tapPromise("AutoflowPlugin", () => {
                        var e, a, i;
                        if (!this.variables.enabled) return Promise.resolve();
                        let r =
                            null == (e = t.state.currentContext.value)
                                ? void 0
                                : e.data.type;
                        return (
                            (null == (a = t.state.currentContext.value)
                                ? void 0
                                : a.data) &&
                                "enableVariousAutoFlow" in
                                    t.state.currentContext.value.data &&
                                (null == (i = t.state.currentContext.value)
                                    ? void 0
                                    : i.data.enableVariousAutoFlow) &&
                                (r = Z.K.Various),
                            r && aX.includes(r) && this.playAutoflow(t),
                            Promise.resolve()
                        );
                    });
                }
                playAutoflow(e) {
                    if (!(window.ENABLE_ENDLESS_MUSIC?.() ?? true)) return;
                    var t, a, i;
                    let r =
                        null == (t = e.state.currentContext.value)
                            ? void 0
                            : t.data.type;
                    (null == (a = e.state.currentContext.value)
                        ? void 0
                        : a.data) &&
                        "enableVariousAutoFlow" in
                            e.state.currentContext.value.data &&
                        (null == (i = e.state.currentContext.value)
                            ? void 0
                            : i.data.enableVariousAutoFlow) &&
                        (r = Z.K.Various);
                    let s = ((e, t) => {
                            var a, i, r, s;
                            let l =
                                null == (a = t.state.currentContext.value)
                                    ? void 0
                                    : a.data;
                            if (l) {
                                if (e === Z.K.Album)
                                    return ["album:".concat(l.meta.id)];
                                if (e === Z.K.Artist)
                                    return ["artist:".concat(l.meta.id)];
                                if (
                                    e === Z.K.Playlist &&
                                    "owner" in l.meta &&
                                    (null == (i = l.meta.owner)
                                        ? void 0
                                        : i.uid) &&
                                    "kind" in l.meta &&
                                    l.meta.kind
                                )
                                    return [
                                        "playlist:"
                                            .concat(
                                                null == (r = l.meta.owner)
                                                    ? void 0
                                                    : r.uid,
                                                "_",
                                            )
                                            .concat(l.meta.kind),
                                    ];
                                if (e === Z.K.Various) {
                                    if (
                                        "overrideAutoflowSeeds" in l &&
                                        l.overrideAutoflowSeeds
                                    )
                                        return l.overrideAutoflowSeeds;
                                    let e =
                                        null ==
                                        (s =
                                            t.state.queueState.currentEntity
                                                .value)
                                            ? void 0
                                            : s.entity.data.meta.id;
                                    return ["track:".concat(e)];
                                }
                            }
                        })(r, e),
                        l = e.state.currentContext.value,
                        n = Object.create(null != l ? l : null);
                    if (!(r && s)) return;
                    let o = this.factory.createContext({
                        data: {
                            type: Z.K.Vibe,
                            meta: { id: (0, ey.f)(s) },
                            seeds: s,
                            from: ((e, t, a) => {
                                var i;
                                let r =
                                    null == (i = t.state.currentContext.value)
                                        ? void 0
                                        : i.data;
                                if (!r) return "";
                                let s = e,
                                    l =
                                        t.state.queueState.entityList.value
                                            .length || 0;
                                return (
                                    s === Z.K.Various &&
                                        1 === l &&
                                        (s = "track"),
                                    e === Z.K.Various &&
                                        "overrideContextType" in r &&
                                        r.overrideContextType &&
                                        (s = r.overrideContextType),
                                    ""
                                        .concat(a, "-radio-")
                                        .concat(s, "-autoflow")
                                );
                            })(r, e, this.platform),
                            includeTracksInResponse: !0,
                            parentContext: n,
                            interactive: !1,
                        },
                    });
                    e.playContext({ context: o, loadContextMeta: !0 });
                }
                constructor({ platform: e, factory: t, variables: a }) {
                    (0, w._)(this, "platform", void 0),
                        (0, w._)(this, "factory", void 0),
                        (0, w._)(this, "variables", void 0),
                        (this.platform = e),
                        (this.factory = t),
                        (this.variables = a);
                }
            }
            class aU {
                apply(e) {
                    let { playback: t, hooks: a } = e;
                    this.telemetry.createTelemetry(t),
                        this.telemetry.setStaticParams(
                            {
                                labels: { from: this.telemetry.from },
                                puid: this.puid ? String(this.puid) : void 0,
                                yaspVersion: this.yaspVersion,
                            },
                            !0,
                        ),
                        t.state.playerState.status.onChange(() => {
                            this.telemetry.setPlayingState(t.state.playerState);
                        }),
                        t.state.playerState.event.onChange((e) => {
                            e &&
                                e !== O.Iu.UPDATING_PROGRESS &&
                                this.telemetry.logEvent({ name: e });
                        }),
                        a.afterError.tapPromise(
                            "TelemetryPlugin",
                            (e) => (
                                e instanceof O.LI &&
                                    this.telemetry.logError({
                                        error: { ...e, isFatal: !1 },
                                    }),
                                Promise.resolve()
                            ),
                        ),
                        a.beforeMediaStartPlaying.tapPromise(
                            "TelemetryPlugin",
                            () => {
                                let { value: e } =
                                    t.state.queueState.currentEntity;
                                return (
                                    this.beforeMediaHandler(
                                        null == e ? void 0 : e.entity,
                                    ),
                                    Promise.resolve()
                                );
                            },
                        ),
                        a.beforeMediaSourceContentReload.tapPromise(
                            "TelemetryPlugin",
                            () => {
                                let { value: e } =
                                    t.state.queueState.currentEntity;
                                return (
                                    this.beforeMediaHandler(
                                        null == e ? void 0 : e.entity,
                                    ),
                                    Promise.resolve()
                                );
                            },
                        ),
                        a.beforeMediaSourceContentPreload.tapPromise(
                            "TelemetryPlugin",
                            (e) => (
                                this.beforeMediaHandler(e), Promise.resolve()
                            ),
                        );
                }
                beforeMediaHandler(e) {
                    if (!e || tu(e)) return;
                    let { mediaSourceData: t } = e;
                    t &&
                        "vsid" in t &&
                        void 0 === t.vsid &&
                        (t.vsid = this.telemetry.vsid),
                        t &&
                            "sourceIndex" in t &&
                            void 0 === t.sourceIndex &&
                            (t.sourceIndex =
                                this.telemetry.onBeforeSetSource());
                    let a = (function (e) {
                        let { mediaSourceData: t } = e;
                        if (!t) return;
                        let { data: a } = t;
                        return { streamUrl: t.src, ...a };
                    })(e);
                    a &&
                        (this.telemetry.setStaticParams(
                            {
                                labels: { from: this.telemetry.from },
                                puid: this.puid ? String(this.puid) : void 0,
                                yaspVersion: this.yaspVersion,
                                testIds: this.telemetryTestIds,
                                ...a,
                            },
                            !0,
                        ),
                        this.telemetry.onSetSource(a));
                }
                constructor({
                    telemetry: e,
                    puid: t,
                    yaspVersion: a,
                    telemetryTestIds: i,
                }) {
                    (0, w._)(this, "telemetry", void 0),
                        (0, w._)(this, "puid", void 0),
                        (0, w._)(this, "yaspVersion", void 0),
                        (0, w._)(this, "telemetryTestIds", void 0),
                        (this.telemetry = e),
                        (this.puid = t),
                        (this.yaspVersion = a),
                        (this.telemetryTestIds = i);
                }
            }
            class aB {
                setQuality(e) {
                    switch (e) {
                        case al.e.HIGH_QUALITY:
                            (this.qualityConfig.lossless.value = !0),
                                (this.qualityConfig.hq.value = !0),
                                (this.qualityConfig.nq.value = !0),
                                (this.qualityConfig.lq.value = !0),
                                (this.qualityConfig.preview.value = !1),
                                (this.quality.value = al.e.HIGH_QUALITY);
                            break;
                        case al.e.BALANCED:
                            (this.qualityConfig.lossless.value = !1),
                                (this.qualityConfig.hq.value = !0),
                                (this.qualityConfig.nq.value = !0),
                                (this.qualityConfig.lq.value = !0),
                                (this.qualityConfig.preview.value = !1),
                                (this.quality.value = al.e.BALANCED);
                            break;
                        case al.e.EFFICIENT:
                            (this.qualityConfig.lossless.value = !1),
                                (this.qualityConfig.hq.value = !1),
                                (this.qualityConfig.nq.value = !0),
                                (this.qualityConfig.lq.value = !0),
                                (this.qualityConfig.preview.value = !1),
                                (this.quality.value = al.e.EFFICIENT);
                            break;
                        case al.e.PREVIEW:
                            (this.qualityConfig.lossless.value = !1),
                                (this.qualityConfig.hq.value = !1),
                                (this.qualityConfig.nq.value = !1),
                                (this.qualityConfig.lq.value = !1),
                                (this.qualityConfig.preview.value = !0),
                                (this.quality.value = al.e.PREVIEW);
                    }
                }
                constructor(e) {
                    (0, w._)(this, "qualityConfig", {
                        lossless: new et.cJ(!1),
                        hq: new et.cJ(!0),
                        nq: new et.cJ(!0),
                        lq: new et.cJ(!0),
                        preview: new et.cJ(!0),
                        smart_preview: new et.cJ(!1),
                    }),
                        (0, w._)(this, "quality", new et.cJ(al.e.BALANCED)),
                        this.setQuality(e);
                }
            }
            function aV(e) {
                return (null == e ? void 0 : e.data.type) === M.R.Radio;
            }
            class aq {
                get src() {
                    let e = this.getQueryParamsString();
                    return e
                        ? "".concat(this.data.url).concat(e)
                        : this.data.url;
                }
                getQueryParamsString() {
                    let e = new URLSearchParams();
                    this.vsid && e.append("vsid", this.vsid),
                        void 0 !== this.sourceIndex &&
                            e.append("source_index", String(this.sourceIndex));
                    let t = e.toString();
                    return t ? "?".concat(t) : void 0;
                }
                constructor(e) {
                    (0, w._)(this, "type", "generativeSource"),
                        (0, w._)(this, "data", void 0),
                        (0, w._)(this, "vsid", void 0),
                        (0, w._)(this, "sourceIndex", void 0),
                        (0, w._)(this, "getFileInfoResponseTime", void 0),
                        (0, w._)(this, "url", void 0),
                        (this.data = e.data),
                        (this.vsid = e.vsid),
                        (this.sourceIndex = e.sourceIndex);
                }
            }
            class aY extends tA {
                constructor(
                    e,
                    { code: t = "E_GENERATIVE_MEDIA_PROVIDER", ...a } = {},
                ) {
                    super(e, { code: t, ...a }),
                        (0, w._)(
                            this,
                            "name",
                            "GenerativeMediaProviderException",
                        ),
                        Object.setPrototypeOf(this, aY.prototype);
                }
            }
            class aW {
                getMediaSource(e) {
                    if (t3(e.entity)) {
                        var t;
                        if (
                            null == (t = e.entity.data.meta.stream)
                                ? void 0
                                : t.url
                        ) {
                            let t = new aq({ data: e.entity.data.meta.stream });
                            return (
                                (e.entity.mediaSourceData = t),
                                Promise.resolve(t)
                            );
                        }
                        return Promise.reject(
                            new aY("Failed to create generative src link", {
                                code: b.E_GET_MEDIA_SRC,
                            }),
                        );
                    }
                    return Promise.reject(
                        new aY("Provided entity is not generative entity", {
                            code: b.E_UNSUITABLE_ENTITY_TYPE,
                        }),
                    );
                }
            }
            var az = a(39503),
                aH = a(98369),
                aQ = a(28999);
            function a$(e) {
                return e instanceof Error
                    ? {
                          name: e.name,
                          message: e.message,
                          stack: e.stack,
                          cause: e.cause,
                      }
                    : { data: e };
            }
            class aJ {
                getPreloadedFileInfo(e) {
                    let { entity: t, disableCache: a = !1 } = e;
                    if (
                        !(
                            a ||
                            ac(
                                t,
                                this.mediaSourceTtlMs,
                                this.mediaConfigController,
                            )
                        ) &&
                        t.mediaSourceData &&
                        "downloadInfoSource" === t.mediaSourceData.type
                    )
                        return t.mediaSourceData.data;
                }
                getFileInfoFromResource(e) {
                    let {
                            trackId: t,
                            quality: a,
                            codecs: i,
                            transports: r,
                        } = e,
                        s = (0, az.T)(),
                        l = i.join(""),
                        n = r.join(""),
                        o = ""
                            .concat(s)
                            .concat(t)
                            .concat(a)
                            .concat(l)
                            .concat(n);
                    return new Promise((e, n) => {
                        this.tools
                            .createSign({ data: o, secretKey: this.secretKey })
                            .then((o) => {
                                this.resource
                                    .getFileInfo({
                                        tsInSeconds: s,
                                        trackId: t,
                                        quality: a,
                                        codecs: i,
                                        transports: r,
                                        sign: o,
                                        fromPromoLanding:
                                            this.variables.fromPromoLanding,
                                    })
                                    .then((t) => {
                                        e({
                                            downloadInfo: t.downloadInfo,
                                            responseTime: t.responseTime,
                                            url: t.url,
                                        });
                                    })
                                    .catch((e) => {
                                        n(
                                            new tL(
                                                "Error in get-file-info request",
                                                {
                                                    code: b.E_GET_MEDIA_SRC,
                                                    cause: e,
                                                    data: {
                                                        trackId: t,
                                                        quality: a,
                                                        codecs: l,
                                                        causeAsObject: a$(e),
                                                    },
                                                },
                                            ),
                                        );
                                    });
                            })
                            .catch((e) => {
                                n(
                                    new tL(
                                        "Error in creating sign for get-file-info request",
                                        {
                                            code: b.E_CREATE_SIGN,
                                            cause: e,
                                            data: {
                                                trackId: t,
                                                quality: a,
                                                codecs: l,
                                                causeAsObject: a$(e),
                                            },
                                        },
                                    ),
                                );
                            });
                    });
                }
                getFileInfo(e) {
                    let {
                        entity: t,
                        disableCache: a = !1,
                        codecs: i,
                        quality: r,
                        transports: s,
                    } = e;
                    if (this.variables.isMediaSourcePreloadEnabled)
                        try {
                            let e = this.getPreloadedFileInfo({
                                entity: t,
                                disableCache: a,
                            });
                            if (e) return Promise.resolve({ downloadInfo: e });
                        } catch (e) {
                            return Promise.reject(e);
                        }
                    return this.getFileInfoFromResource({
                        trackId: t.data.meta.id,
                        quality: r,
                        codecs: i,
                        transports: s,
                    });
                }
                getMediaSource(e) {
                    let { entity: t, disableCache: a = !1 } = e,
                        i = (0, aH.i)({
                            productQuality:
                                this.mediaConfigController.quality.value,
                            entity: t,
                        }),
                        r = (0, eM.l)(t) ? at.o.RAW : this.transport;
                    return (
                        (t.expectedQuality = i),
                        this.getFileInfo({
                            entity: t,
                            disableCache: a,
                            quality: i,
                            transports: [r],
                            codecs: this.codecs,
                        }).then((e) => {
                            let {
                                downloadInfo: r,
                                responseTime: s,
                                url: l,
                            } = e;
                            if (
                                !("error" in r) &&
                                !aQ.DM.includes(r.codec) &&
                                r.transport === at.o.ENCRAW
                            )
                                return (
                                    (t.mediaSourceData = null),
                                    this.getFileInfo({
                                        entity: t,
                                        disableCache: a,
                                        quality: i,
                                        transports: [at.o.RAW],
                                        codecs: this.codecs,
                                    })
                                        .then((e) => {
                                            let {
                                                    downloadInfo: a,
                                                    responseTime: r,
                                                    url: s,
                                                } = e,
                                                l = this.createMediaSource({
                                                    downloadInfo: a,
                                                    trackId: t.data.meta.id,
                                                    quality: i,
                                                    codecs: this.codecs,
                                                    getFileInfoResponseTime: r,
                                                    getFileInfoUrl: s,
                                                });
                                            return (
                                                (t.mediaSourceData = l),
                                                (t.expectedQuality = i),
                                                l
                                            );
                                        })
                                        .catch((e) => {
                                            let a = this.createMediaSource({
                                                downloadInfo: r,
                                                trackId: t.data.meta.id,
                                                quality: i,
                                                codecs: this.codecs,
                                                getFileInfoResponseTime: s,
                                            });
                                            throw (
                                                ((t.mediaSourceData = a),
                                                new tL(
                                                    "Error in get-file-info retry enclaw request",
                                                    {
                                                        code: b.E_GET_MEDIA_SRC,
                                                        cause: e,
                                                        data: {
                                                            trackId:
                                                                t.data.meta.id,
                                                            quality: i,
                                                            codecs: this.codecs.join(
                                                                "",
                                                            ),
                                                            causeAsObject:
                                                                a$(e),
                                                        },
                                                    },
                                                ))
                                            );
                                        })
                                );
                            let n = this.createMediaSource({
                                downloadInfo: r,
                                trackId: t.data.meta.id,
                                quality: i,
                                codecs: this.codecs,
                                getFileInfoResponseTime: s,
                                getFileInfoUrl: l,
                            });
                            return (t.mediaSourceData = n), n;
                        })
                    );
                }
                getMediaSourceBatch(e) {
                    let { entities: t } = e,
                        a = (0, az.T)(),
                        i = (0, aH.i)({
                            productQuality:
                                this.mediaConfigController.quality.value,
                            entities: t,
                        }),
                        r = this.codecs.join(""),
                        s = t
                            .reduce(
                                (e, t) =>
                                    "".concat(e).concat(t.data.meta.id, ","),
                                "",
                            )
                            .slice(0, -1),
                        l = t.some((e) => (0, eM.l)(e))
                            ? at.o.RAW
                            : this.transport,
                        n = ""
                            .concat(a)
                            .concat(s)
                            .concat(i)
                            .concat(r)
                            .concat(l);
                    return new Promise((e, o) => {
                        this.tools
                            .createSign({ data: n, secretKey: this.secretKey })
                            .then((n) => {
                                this.resource
                                    .getFileInfoBatch({
                                        tsInSeconds: a,
                                        trackIds: s,
                                        quality: i,
                                        codecs: this.codecs,
                                        transports: [l],
                                        sign: n,
                                        fromPromoLanding:
                                            this.variables.fromPromoLanding,
                                    })
                                    .then((a) => {
                                        try {
                                            for (let e of a.downloadInfos) {
                                                let a = t.find(
                                                    (t) =>
                                                        t.data.meta.id ===
                                                        e.trackId,
                                                );
                                                a &&
                                                    ((a.mediaSourceData =
                                                        this.createMediaSource({
                                                            downloadInfo: e,
                                                            trackId: e.trackId,
                                                            quality: i,
                                                            codecs: this.codecs,
                                                        })),
                                                    (a.expectedQuality = i));
                                            }
                                            e(a.downloadInfos);
                                        } catch (e) {
                                            o(e);
                                        }
                                    })
                                    .catch((e) => {
                                        o(
                                            new tL(
                                                "Error in get-file-info/batch request",
                                                {
                                                    code: b.E_GET_MEDIA_SRC,
                                                    cause: e,
                                                    data: {
                                                        trackId: s,
                                                        quality: i,
                                                        codecs: r,
                                                        causeAsObject: a$(e),
                                                    },
                                                },
                                            ),
                                        );
                                    });
                            })
                            .catch((e) => {
                                o(
                                    new tL(
                                        "Error in creating sign for get-file-info request",
                                        {
                                            code: b.E_CREATE_SIGN,
                                            cause: e,
                                            data: {
                                                trackId: s,
                                                quality: i,
                                                codecs: r,
                                                causeAsObject: a$(e),
                                            },
                                        },
                                    ),
                                );
                            });
                    });
                }
                createMediaSource(e) {
                    let {
                            downloadInfo: t,
                            trackId: a,
                            codecs: i,
                            quality: r,
                            getFileInfoResponseTime: s,
                            getFileInfoUrl: l,
                        } = e,
                        n = i.join("");
                    if ("error" in t)
                        throw new tL(
                            "Error message in get-file-info response",
                            {
                                code: b.E_GET_MEDIA_SRC,
                                data: {
                                    trackId: a,
                                    quality: r,
                                    codecs: n,
                                    mediaSource: t,
                                },
                            },
                        );
                    if (!t.urls[0])
                        throw new tL("No urls in get-file-info response", {
                            code: b.E_GET_MEDIA_SRC,
                            data: {
                                trackId: a,
                                quality: r,
                                codecs: n,
                                mediaSource: t,
                            },
                        });
                    return new ar({
                        data: t,
                        loadingTime: performance.now(),
                        getFileInfoResponseTime: s,
                        url: l,
                    });
                }
                constructor(e) {
                    var t;
                    (0, w._)(this, "secretKey", void 0),
                        (0, w._)(this, "resource", void 0),
                        (0, w._)(this, "mediaConfigController", void 0),
                        (0, w._)(this, "transport", void 0),
                        (0, w._)(this, "codecs", void 0),
                        (0, w._)(this, "variables", void 0),
                        (0, w._)(this, "mediaSourceTtlMs", void 0),
                        (0, w._)(this, "tools", void 0);
                    let {
                        resource: a,
                        secretKey: i,
                        mediaConfigController: r,
                        transport: s,
                        variables: l,
                        mediaSourceTtlMs: n,
                        codecs: o,
                        tools: d,
                    } = e;
                    (this.resource = a),
                        (this.secretKey = i),
                        (this.mediaConfigController = r),
                        (this.transport = s),
                        (this.codecs = o),
                        (this.variables = {
                            isMediaSourcePreloadEnabled:
                                null !=
                                    (t =
                                        null == l
                                            ? void 0
                                            : l.isMediaSourcePreloadEnabled) &&
                                t,
                            fromPromoLanding:
                                null == l ? void 0 : l.fromPromoLanding,
                        }),
                        (this.mediaSourceTtlMs = null != n ? n : 0),
                        (this.tools = d || aQ.$n);
                }
            }
            class aZ {
                get src() {
                    return this.data.src;
                }
                constructor(e) {
                    (0, w._)(this, "type", "clipSource"),
                        (0, w._)(this, "data", void 0),
                        (0, w._)(this, "vsid", void 0),
                        (0, w._)(this, "getFileInfoResponseTime", void 0),
                        (0, w._)(this, "url", void 0),
                        (this.data = e.data);
                }
            }
            class a0 {
                getMediaSource(e) {
                    let { entity: t } = e;
                    if (eH(t)) {
                        let e = new aZ({
                            data: {
                                src: ""
                                    .concat(this.vhUrl)
                                    .concat(t.data.meta.playerId, "?service=")
                                    .concat(this.service, "&from=")
                                    .concat(this.from),
                            },
                        });
                        return (t.mediaSourceData = e), Promise.resolve(e);
                    }
                    return Promise.reject(
                        new Y.t("Provided entity is not clip entity", {
                            code: b.E_UNSUITABLE_ENTITY_TYPE,
                        }),
                    );
                }
                constructor({ service: e, from: t, vhUrl: a }) {
                    (0, w._)(this, "service", void 0),
                        (0, w._)(this, "from", void 0),
                        (0, w._)(this, "vhUrl", void 0),
                        (this.service = e),
                        (this.from = t),
                        (this.vhUrl = a);
                }
            }
            class a1 {
                get src() {
                    let e = this.getQueryParamsString();
                    return e
                        ? "".concat(this.data.streamUrl).concat(e)
                        : this.data.streamUrl;
                }
                getQueryParamsString() {
                    let e = new URLSearchParams();
                    this.vsid && e.append("vsid", this.vsid),
                        void 0 !== this.sourceIndex &&
                            e.append("source_index", String(this.sourceIndex));
                    let t = e.toString();
                    return t ? "?".concat(t) : void 0;
                }
                constructor(e) {
                    (0, w._)(this, "type", "radioSource"),
                        (0, w._)(this, "data", void 0),
                        (0, w._)(this, "vsid", void 0),
                        (0, w._)(this, "sourceIndex", void 0),
                        (0, w._)(this, "getFileInfoResponseTime", void 0),
                        (0, w._)(this, "url", void 0),
                        (this.data = e.data),
                        (this.vsid = e.vsid),
                        (this.sourceIndex = e.sourceIndex);
                }
            }
            class a3 extends tA {
                constructor(
                    e,
                    { code: t = "E_RADIO_MEDIA_PROVIDER", ...a } = {},
                ) {
                    super(e, { code: t, ...a }),
                        (0, w._)(this, "name", "RadioMediaProviderException"),
                        Object.setPrototypeOf(this, a3.prototype);
                }
            }
            class a6 {
                getMediaSource(e) {
                    if (aV(e.entity)) {
                        if (e.entity.data.meta.streamUrl) {
                            let t = new a1({
                                data: {
                                    streamUrl: e.entity.data.meta.streamUrl,
                                },
                            });
                            return (
                                (e.entity.mediaSourceData = t),
                                Promise.resolve(t)
                            );
                        }
                        return Promise.reject(
                            new a3(
                                'Failed to create fm radio src link because the "streamUrl" property is missing in the entity meta',
                                { code: b.E_GET_MEDIA_SRC },
                            ),
                        );
                    }
                    return Promise.reject(
                        new a3("Provided entity is not fm radio entity", {
                            code: b.E_UNSUITABLE_ENTITY_TYPE,
                        }),
                    );
                }
            }
            class a8 {
                async getMediaSource(e) {
                    return t3(e.entity)
                        ? this.generativeProvider.getMediaSource(e)
                        : eH(e.entity)
                          ? this.vhMediaProvider.getMediaSource(e)
                          : aV(e.entity)
                            ? this.radioProvider.getMediaSource(e)
                            : this.getFileInfoProvider.getMediaSource(e);
                }
                getMediaSourceBatch(e) {
                    let { entities: t } = e;
                    return t.some((e) => t3(e))
                        ? Promise.reject(
                              new tA(
                                  "Can not use getMediaSourceBatch for generative entities",
                                  { code: b.E_UNSUITABLE_ENTITY_TYPE },
                              ),
                          )
                        : this.getFileInfoProvider.getMediaSourceBatch({
                              entities: t,
                          });
                }
                constructor(e) {
                    (0, w._)(this, "generativeProvider", new aW()),
                        (0, w._)(this, "radioProvider", new a6()),
                        (0, w._)(this, "getFileInfoProvider", void 0),
                        (0, w._)(this, "vhMediaProvider", void 0),
                        (this.getFileInfoProvider = new aJ(
                            e.getFileInfoProviderParams,
                        )),
                        (this.vhMediaProvider = new a0(
                            e.vhMediaProviderParams,
                        ));
                }
            }
            class a9 {
                async loadEntities(e) {
                    let { trackIds: t } = (function (e) {
                            let t = [];
                            return (
                                e.forEach((e) => {
                                    let { context: a, entity: i } = e,
                                        r = i.data.meta.id,
                                        s =
                                            "string" == typeof r &&
                                            r.includes(":");
                                    if (!i.data.fromCurrentContext || s)
                                        return void t.push(i.data.meta.id);
                                    ex(a) &&
                                        (r = ""
                                            .concat(i.data.meta.id, ":")
                                            .concat(a.data.meta.id)),
                                        "albumId" in i.data.meta &&
                                            i.data.meta.albumId &&
                                            (r = ""
                                                .concat(i.data.meta.id, ":")
                                                .concat(i.data.meta.albumId)),
                                        t.push(r);
                                }, {}),
                                { trackIds: t }
                            );
                        })(e),
                        a = e.some((e) => {
                            let { context: t } = e;
                            return (0, eN.i)(t);
                        });
                    return this.resource
                        .getTracksMeta({
                            trackIds: t,
                            withProgress: !0,
                            withMixData: a,
                        })
                        .then((t) => {
                            let a = [];
                            for (let i of t) {
                                let t = e.find((e) =>
                                    String(e.entity.data.meta.id).includes(
                                        String(i.id),
                                    ),
                                );
                                if (t) {
                                    let e =
                                        t.entity.data.type === O.z4.Unloaded
                                            ? M.R.Unknown
                                            : t.entity.data.type;
                                    e !== M.R.Clip &&
                                        a.push({
                                            ...t.entity.data,
                                            type: e,
                                            meta: i,
                                            loadEntityMeta: !1,
                                        });
                                }
                            }
                            return a;
                        })
                        .catch((e) => {
                            throw new Y.t("Failed to get track meta", {
                                code: "E_TRACK_META_PROVIDER",
                                cause: a$(e),
                            });
                        });
                }
                constructor(e) {
                    (0, w._)(this, "resource", void 0);
                    let { tracksResource: t } = e;
                    this.resource = t;
                }
            }
            class a2 {
                loadEntities(e) {
                    let t = e.map((e) => e.entity.data.meta.id);
                    return this.resource
                        .getClip({ clipIds: t })
                        .then((t) => {
                            let a = [];
                            for (let i of t) {
                                let t = e.find(
                                    (e) =>
                                        String(e.entity.data.meta.id) ===
                                        String(i.clipId),
                                );
                                t &&
                                    a.push({
                                        ...t.entity.data,
                                        type: M.R.Clip,
                                        meta: { id: i.clipId, ...i },
                                        loadEntityMeta: !1,
                                    });
                            }
                            return a;
                        })
                        .catch((e) => {
                            throw new Y.t("Failed to get clip meta", {
                                code: "E_CLIP_META_PROVIDER",
                                cause: a$(e),
                            });
                        });
                }
                constructor(e) {
                    (0, w._)(this, "resource", void 0),
                        (this.resource = e.clipsResource);
                }
            }
            class a7 {
                loadEntities(e) {
                    return e.some((e) => eH(e.entity))
                        ? this.clipMetaProvider.loadEntities(e)
                        : this.trackMetaProvider.loadEntities(e);
                }
                constructor(e) {
                    (0, w._)(this, "trackMetaProvider", void 0),
                        (0, w._)(this, "clipMetaProvider", void 0),
                        (this.trackMetaProvider = new a9({
                            tracksResource: e.tracksResource,
                        })),
                        (this.clipMetaProvider = new a2({
                            clipsResource: e.clipsResource,
                        }));
                }
            }
            var a5 = a(42213);
            (C || (C = {})).MAIN = "MAIN";
            class a4 {
                get availablePlaybacks() {
                    return Array.from(this.playbacks.values());
                }
                afterPlayHandler(e) {
                    return (this.activePlayback.value = e), Promise.resolve();
                }
                beforePlayHandler(e) {
                    return this.activePlayback.value &&
                        this.activePlayback.value !== e
                        ? this.activePlayback.value.pause()
                        : Promise.resolve();
                }
                beforeDestroyHandler(e) {
                    return e.stop();
                }
                getPlayback(e) {
                    if (e) {
                        let t = this.playbacks.get(e);
                        if (t) return t;
                    }
                    let t = this.playbacks.get(C.MAIN);
                    if (void 0 !== t) return t;
                    throw new Y.t("MAIN playback was not created", {
                        code: "NO_MAIN_PLAYBACK",
                    });
                }
                checkPlaybackBlockingStatus() {
                    var e, t;
                    let a =
                            arguments.length > 0 && void 0 !== arguments[0]
                                ? arguments[0]
                                : C.MAIN,
                        i =
                            null == (e = this.activePlayback.value)
                                ? void 0
                                : e.getId(),
                        r = i === a;
                    return ((null == (t = this.activePlayback.value)
                        ? void 0
                        : t.isBlocking) ||
                        r) &&
                        !r
                        ? { status: O.N.BLOCKED, blockingPlaybackId: i }
                        : { status: O.N.UNBLOCKED };
                }
                callIfUnblocked(e, t) {
                    let { status: a, blockingPlaybackId: i } =
                        this.checkPlaybackBlockingStatus(t);
                    return a === O.N.UNBLOCKED
                        ? e()
                        : (this.getPlayback(
                              t,
                          ).hooks.afterPlaybackCheckBlockingStatus.promise({
                              status: a,
                              blockingPlaybackId: i,
                          }),
                          Promise.resolve());
                }
                createPlayback(e, t) {
                    if (!this.playbacks.has(e)) {
                        let a = new O.VE({
                            id: e,
                            isBlocking: t.isBlocking || !1,
                            factory: t.factory,
                            entityProvider: t.entityProvider,
                            mediaPlayerParams: t.mediaPlayerParams,
                            playbackConfig: t.playbackConfig,
                        });
                        this.playbacks.set(e, a),
                            a.hooks.afterMediaStartPlaying.tapPromise(
                                "MusicPlaybackController",
                                () => this.afterPlayHandler(a),
                            ),
                            a.hooks.beforeMediaStartPlaying.tapPromise(
                                "MusicPlaybackController",
                                () => this.beforePlayHandler(a),
                            ),
                            a.hooks.afterMediaResume.tapPromise(
                                "MusicPlaybackController",
                                () => this.afterPlayHandler(a),
                            ),
                            a.hooks.beforeMediaResume.tapPromise(
                                "MusicPlaybackController",
                                () => this.beforePlayHandler(a),
                            ),
                            a.hooks.beforeDestroy.tapPromise(
                                "MusicPlaybackController",
                                () => this.beforeDestroyHandler(a),
                            ),
                            this.syncWithMainPlayback(
                                a,
                                t.syncVolumeWithMainPlayback,
                            );
                    }
                }
                syncWithMainPlayback(e) {
                    let t =
                        arguments.length > 1 &&
                        void 0 !== arguments[1] &&
                        arguments[1];
                    if (e.getId() === C.MAIN)
                        return void this.playbacksWaitingForSync.forEach(
                            (t) => {
                                this.syncVolume(e, t);
                            },
                        );
                    let a = this.playbacks.get(C.MAIN);
                    if (t && a) return void this.syncVolume(a, e);
                    t && !a && this.playbacksWaitingForSync.push(e);
                }
                syncVolume(e, t) {
                    (this.useExponentVolume
                        ? e.state.playerState.exponentVolume
                        : e.state.playerState.volume
                    ).onChange((e) => {
                        void 0 !== e && this.useExponentVolume
                            ? t.setExponentVolume(e)
                            : void 0 === e ||
                              this.useExponentVolume ||
                              t.setVolume(e);
                    });
                }
                constructor(e) {
                    (0, w._)(this, "activePlayback", new et.cJ(null)),
                        (0, w._)(this, "playbacks", new Map()),
                        (0, w._)(this, "playbacksWaitingForSync", []),
                        (0, w._)(this, "useExponentVolume", void 0),
                        (this.useExponentVolume = !!e.useExponentVolume);
                }
            }
            class ie {
                get state() {
                    return this.playbackController.getPlayback().state;
                }
                getState(e) {
                    return this.playbackController.getPlayback(e).state;
                }
                playContext(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    try {
                        let { contextData: i } = e,
                            r = this.factory.createContext({ data: i });
                        return this.playbackController.callIfUnblocked(
                            () =>
                                a
                                    .playContext({
                                        context: r,
                                        entitiesData: e.entitiesData,
                                        loadContextMeta: e.loadContextMeta,
                                        queueParams: e.queueParams,
                                    })
                                    .catch((e) => {
                                        a.hooks.afterError.promise(e);
                                    }),
                            t,
                        );
                    } catch (e) {
                        return a.hooks.afterError.promise(e), Promise.resolve();
                    }
                }
                setContext(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    try {
                        let { contextData: i } = e,
                            r = this.factory.createContext({ data: i });
                        return this.playbackController.callIfUnblocked(
                            () =>
                                a
                                    .setContext({
                                        context: r,
                                        entitiesData: e.entitiesData,
                                        loadContextMeta: e.loadContextMeta,
                                        queueParams: e.queueParams,
                                    })
                                    .catch((e) => {
                                        a.hooks.afterError.promise(e);
                                    }),
                            t,
                        );
                    } catch (e) {
                        return a.hooks.afterError.promise(e), Promise.resolve();
                    }
                }
                restartContext(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a
                                .restartContext({
                                    playAfterRestart: e.playAfterRestart,
                                    entitiesData: e.entitiesData,
                                    queueParams: e.queueParams,
                                })
                                .catch((e) => {
                                    a.hooks.afterError.promise(e);
                                }),
                        t,
                    );
                }
                play(e) {
                    let t = this.playbackController.getPlayback(e);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            t.play().catch((e) => {
                                t.hooks.afterError.promise(e);
                            }),
                        e,
                    );
                }
                stop(e) {
                    let t = this.playbackController.getPlayback(e);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            t.stop().catch((e) => {
                                t.hooks.afterError.promise(e);
                            }),
                        e,
                    );
                }
                pause(e) {
                    let t = this.playbackController.getPlayback(e);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            t.pause().catch((e) => {
                                t.hooks.afterError.promise(e);
                            }),
                        e,
                    );
                }
                resume(e) {
                    let t = this.playbackController.getPlayback(e);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            t.resume().catch((e) => {
                                t.hooks.afterError.promise(e);
                            }),
                        e,
                    );
                }
                setProgress(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a
                                .setProgress(e)
                                .catch(
                                    (e) => (a.hooks.afterError.promise(e), 0),
                                ),
                        t,
                    );
                }
                setExponentVolume(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a
                                .setExponentVolume(e)
                                .catch(
                                    (e) => (a.hooks.afterError.promise(e), 0),
                                ),
                        t,
                    );
                }
                setVolume(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a
                                .setVolume(e)
                                .catch(
                                    (e) => (a.hooks.afterError.promise(e), 0),
                                ),
                        t,
                    );
                }
                setSpeed(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a
                                .setSpeed(e)
                                .catch(
                                    (e) => (a.hooks.afterError.promise(e), 1),
                                ),
                        t,
                    );
                }
                slideForward(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a
                                .slideForward(e)
                                .catch(
                                    (e) => (a.hooks.afterError.promise(e), 0),
                                ),
                        t,
                    );
                }
                slideBackward(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a
                                .slideBackward(e)
                                .catch(
                                    (e) => (a.hooks.afterError.promise(e), 0),
                                ),
                        t,
                    );
                }
                increaseExponentVolume(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a
                                .increaseExponentVolume(e)
                                .catch(
                                    (e) => (a.hooks.afterError.promise(e), 0),
                                ),
                        t,
                    );
                }
                increaseVolume(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a
                                .increaseVolume(e)
                                .catch(
                                    (e) => (a.hooks.afterError.promise(e), 0),
                                ),
                        t,
                    );
                }
                decreaseVolume(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a
                                .decreaseVolume(e)
                                .catch(
                                    (e) => (a.hooks.afterError.promise(e), 0),
                                ),
                        t,
                    );
                }
                decreaseExponentVolume(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a
                                .decreaseExponentVolume(e)
                                .catch(
                                    (e) => (a.hooks.afterError.promise(e), 0),
                                ),
                        t,
                    );
                }
                moveForward(e) {
                    let t = this.playbackController.getPlayback(e);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            t.moveForward().catch((e) => {
                                t.hooks.afterError.promise(e);
                            }),
                        e,
                    );
                }
                moveBackward(e) {
                    let t = this.playbackController.getPlayback(e);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            t.moveBackward().catch((e) => {
                                t.hooks.afterError.promise(e);
                            }),
                        e,
                    );
                }
                setEntityByIndex(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            a.setEntityByIndex(e).catch((e) => {
                                a.hooks.afterError.promise(e);
                            }),
                        t,
                    );
                }
                togglePause(e) {
                    let t = this.playbackController.getPlayback(e);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            t.togglePause().catch((e) => {
                                t.hooks.afterError.promise(e);
                            }),
                        e,
                    );
                }
                toggleShuffle(e) {
                    let t = this.playbackController.getPlayback(e);
                    try {
                        this.playbackController.callIfUnblocked(
                            () => t.toggleShuffle(),
                            e,
                        );
                    } catch (e) {
                        t.hooks.afterError.promise(e);
                    }
                }
                setShuffle(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    try {
                        this.playbackController.callIfUnblocked(
                            () => a.setShuffle(e),
                            t,
                        );
                    } catch (e) {
                        a.hooks.afterError.promise(e);
                    }
                }
                updateFilterParams(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    try {
                        this.playbackController.callIfUnblocked(
                            () => a.updateFilterParams(e),
                            t,
                        );
                    } catch (e) {
                        a.hooks.afterError.promise(e);
                    }
                }
                bindPlayer(e) {
                    this.playbackController.getPlayback(e).bindPlayer();
                }
                unbindPlayer(e) {
                    this.playbackController.getPlayback(e).unbindPlayer();
                }
                setRepeatMode(e, t) {
                    let a = this.playbackController.getPlayback(t);
                    try {
                        this.playbackController.callIfUnblocked(
                            () => a.setRepeatMode(e),
                            t,
                        );
                    } catch (e) {
                        a.hooks.afterError.promise(e);
                    }
                }
                removeAndLoadEntities(e) {
                    let { positions: t, playbackId: a, silent: i } = e,
                        r = this.playbackController.getPlayback(a);
                    return this.playbackController.callIfUnblocked(
                        () =>
                            r.removeAndLoadEntities(t, i).catch((e) => {
                                r.hooks.afterError.promise(e);
                            }),
                        a,
                    );
                }
                remove(e) {
                    let { positions: t, playbackId: a, silent: i } = e,
                        r = this.playbackController.getPlayback(a);
                    this.playbackController.callIfUnblocked(
                        () => r.remove(t, i),
                        a,
                    );
                }
                hide(e) {
                    let { positions: t, playbackId: a, silent: i } = e,
                        r = this.playbackController.getPlayback(a);
                    this.playbackController.callIfUnblocked(
                        () => r.hide(t, i),
                        a,
                    );
                }
                inject(e) {
                    let {
                            entitiesData: t,
                            position: a,
                            playbackId: i,
                            silent: r,
                        } = e,
                        s = this.playbackController.getPlayback(i);
                    this.playbackController.callIfUnblocked(
                        () => s.inject(t, a, r),
                        i,
                    );
                }
                injectNext(e) {
                    let { entitiesData: t, playbackId: a, silent: i } = e,
                        r = this.playbackController.getPlayback(a);
                    this.playbackController.callIfUnblocked(
                        () => r.injectNext(t, i),
                        a,
                    );
                }
                injectLast(e) {
                    let { entitiesData: t, playbackId: a, silent: i } = e,
                        r = this.playbackController.getPlayback(a);
                    this.playbackController.callIfUnblocked(
                        () => r.injectLast(t, i),
                        a,
                    );
                }
                registerMediaPlayer(e) {
                    let { mediaPlayerParams: t, playbackId: a } = e;
                    this.playbackController
                        .getPlayback(a)
                        .registerMediaPlayer(t);
                }
                setVideoCoreContainer(e) {
                    let { container: t, playbackId: a } = e;
                    this.playbackController
                        .getPlayback(a)
                        .setVideoCoreContainer(t);
                }
                destroyVideoCore(e) {
                    this.playbackController.getPlayback(e).destroyVideoCore();
                }
                destroy() {
                    return Promise.allSettled(
                        this.playbackController.availablePlaybacks.map((e) =>
                            e.hooks.beforeDestroy.promise(),
                        ),
                    );
                }
                constructor(e) {
                    if (
                        ((0, w._)(this, "factory", void 0),
                        (0, w._)(this, "playbackController", void 0),
                        (this.factory = e.factory),
                        (this.playbackController = e.playbackController),
                        this.playbackController.createPlayback(C.MAIN, {
                            factory: e.factory,
                            mediaPlayerParams: e.mediaPlayerParams,
                            entityProvider: e.entityProvider,
                            playbackConfig: e.playbackConfig,
                        }),
                        e.plugins)
                    ) {
                        let t = this.playbackController.getPlayback(C.MAIN);
                        for (let a of e.plugins)
                            a.apply({ playback: t, hooks: t.hooks });
                    }
                }
            }
            var it = a(48467),
                ia = a(49444),
                ii = a(81821),
                ir = a(46369),
                is = a(77575),
                il = a(12580),
                io = a(79169),
                id = a(18740);
            let iu = (e) => {
                let { audioLoader: t, children: a } = e;
                return (0, N.use)(t), a;
            };
            var ic = a(29318),
                ig = a(73761);
            let ih = (0, L.PA)(() => {
                let e = (0, ig.Sq)(),
                    t = (0, io.iIU)(),
                    { sonataState: a } = (0, io.Pjs)();
                (0, N.useEffect)(() => {
                    e.loadPresets();
                }, [e]),
                    (0, N.useEffect)(() => {
                        e.isAvailable &&
                            (null == t ? void 0 : t.equalizer.value) &&
                            (e.isEnabled
                                ? (e.currentPreset &&
                                      t.equalizer.value.applyPreset(
                                          (0, ic.HO)(e.currentPreset),
                                      ),
                                  t.equalizer.value.enable())
                                : t.equalizer.value.disable());
                    }, [
                        e.currentPreset,
                        e.isEnabled,
                        null == t ? void 0 : t.equalizer,
                        a.areCoresRegistered,
                        e.isAvailable,
                    ]);
            });
            var im = a(73827);
            let iy = (0, L.PA)((e) => {
                    let { isYnisonDisabled: t } = e,
                        { experiments: a, slam: i } = (0, io.Pjs)(),
                        r = (0, io.NFA)(),
                        s = t || i.isOfflineModeEnabled,
                        l = a.checkExperiment(
                            io.zal.WebNextYnisonActivityInterception,
                            "on",
                        );
                    (0, N.useEffect)(() => {
                        let e = r.get(io.ooW),
                            t = r.get(io.byd),
                            a = (t) => {
                                t.diff.deviceVolume &&
                                    e.set(
                                        io.cYZ.YmPlayerVolume,
                                        t.diff.deviceVolume.volume,
                                        { expires: 365 },
                                    );
                            };
                        return (
                            t.stateController.on(A.p$.UPDATED, a, "App"),
                            () => {
                                t.stateController.off(A.p$.UPDATED, a);
                            }
                        );
                    }, [r]),
                        (0, N.useEffect)(() => {
                            r.get(io.byd).updateVariables({ isShadow: !l });
                        }, [r, l]),
                        ((e) => {
                            let t = (0, io.NFA)(),
                                { formatMessage: a } = (0, im.A)();
                            (0, N.useEffect)(() => {
                                let e = t.get(io.byd),
                                    i = a(
                                        { id: "ynison.desktop-device-title" },
                                        {
                                            platformName: (0, io.t1V)(
                                                (0, io.uoh)(),
                                            ),
                                            hostname: (0, io.akQ)(),
                                        },
                                    );
                                e.updateDeviceInfo({ title: i });
                            }, [t, a]),
                                (0, N.useEffect)(() => {
                                    let a = t.get(io.byd);
                                    if (e.isConnectionDisabled)
                                        return void a.connector.disconnect();
                                    let i = () => {
                                            document.hidden ||
                                                a.connector.connect({
                                                    oauth: t.get(io.QGx).token,
                                                    multiAuthUserId: t
                                                        .get(io.WA$)
                                                        .getPassportUid(),
                                                });
                                        },
                                        r = (e) => {
                                            a.isActive ||
                                                e.prevState
                                                    .active_device_id_optional !==
                                                    a.deviceConfig.info
                                                        .device_id ||
                                                i();
                                        };
                                    return (
                                        a.stateController.on(
                                            A.p$.UPDATED,
                                            r,
                                            "App",
                                        ),
                                        document.addEventListener(
                                            "visibilitychange",
                                            i,
                                        ),
                                        i(),
                                        () => {
                                            a.stateController.off(
                                                A.p$.UPDATED,
                                                r,
                                            ),
                                                document.removeEventListener(
                                                    "visibilitychange",
                                                    i,
                                                );
                                        }
                                    );
                                }, [
                                    t,
                                    e.isConnectionDisabled,
                                    e.isYnisonActivityInterceptionEnabled,
                                ]),
                                ((e) => {
                                    let t = (0, io.NFA)(),
                                        a = (0, N.useRef)(0);
                                    (0, N.useEffect)(() => {
                                        if (!e.isEnabled) return;
                                        let i = setInterval(() => {
                                            let e = t.get(io.byd),
                                                i = e.isActive,
                                                r =
                                                    Date.now() - a.current >
                                                    9e5,
                                                s =
                                                    e.stateController
                                                        .currentState
                                                        .player_state.status
                                                        .paused;
                                            i && r && s && e.becomePassive();
                                        }, 6e4);
                                        return () => {
                                            clearInterval(i);
                                        };
                                    }, [t, e.isEnabled]),
                                        (0, N.useEffect)(() => {
                                            if (!e.isEnabled) return;
                                            let i = t.get(io.byd),
                                                r = (e) => {
                                                    var t;
                                                    (null == (t = e.diff)
                                                        ? void 0
                                                        : t.player_state) &&
                                                        (a.current =
                                                            Date.now());
                                                };
                                            return (
                                                i.stateController.on(
                                                    A.p$.UPDATED,
                                                    r,
                                                    "App",
                                                ),
                                                () => {
                                                    i.stateController.off(
                                                        A.p$.UPDATED,
                                                        r,
                                                    );
                                                }
                                            );
                                        }, [t, e.isEnabled]);
                                })({
                                    isEnabled:
                                        !e.isConnectionDisabled ||
                                        !e.isYnisonActivityInterceptionEnabled,
                                });
                        })({
                            isConnectionDisabled: s,
                            isYnisonActivityInterceptionEnabled: l,
                        }),
                        (0, N.useEffect)(() => {
                            if (s || !l) return;
                            let e = r.get(io.byd),
                                t = () => {
                                    var t, a;
                                    let i =
                                        (null ==
                                            (a =
                                                e.stateController.fullState.diff
                                                    .player_state) ||
                                        null == (t = a.status)
                                            ? void 0
                                            : t.paused) === !1;
                                    !e.isActive && i && e.interceptActivity();
                                };
                            return (
                                e.stateController.on(A.p$.UPDATED, t, "App"),
                                () => {
                                    e.stateController.off(A.p$.UPDATED, t);
                                }
                            );
                        }, [r, s, l]);
                }),
                ip = (e) => {
                    let { children: t } = e,
                        a = (0, io.iIU)(),
                        i = (0, io.Yx9)(),
                        [r] = (0, N.useState)(() =>
                            ig.ML.create({ isEnabled: !1, modal: {} }, i),
                        );
                    return (
                        (0, N.useEffect)(() => {
                            let e =
                                null == a
                                    ? void 0
                                    : a.equalizer.onChange((e) => {
                                          r.setIsAvailable(!!e);
                                      });
                            return () => {
                                null == e || e();
                            };
                        }, [r, null == a ? void 0 : a.equalizer]),
                        (0, D.jsx)(ig.iV.Provider, { value: r, children: t })
                    );
                },
                iv = !1;
            var iS = a(10663);
            let iP = null,
                iE = null,
                ib = null,
                iI = null,
                ik = null,
                i_ = null,
                iT = null,
                iC = null,
                iD = null,
                iA = null,
                iL = [
                    io.cYZ.YmPlayerQuality,
                    io.cYZ.YmPlayerShuffle,
                    io.cYZ.YmPlayerPrevVolume,
                    io.cYZ.YmPlayerVolume,
                    io.cYZ.YmPlayerRepeatMode,
                ],
                iN = (e) => {
                    var t;
                    let {
                            children: i,
                            hostTld: r,
                            quality: s,
                            withPromoLandingPlayback: l,
                        } = e,
                        n = (0, io.NFA)(),
                        {
                            sonataState: o,
                            experiments: d,
                            library: u,
                            trailer: c,
                            user: g,
                            advert: h,
                            settings: m,
                            promolanding: { state: y },
                            album: p,
                            albumCPA: { isPlusCPAPlayerBarEnabled: v },
                        } = (0, io.Pjs)(),
                        { isPassToProduct: S, isFreemium: P } = (0, io.XCI)(),
                        E = (0, io.UlF)(),
                        b = n.get(io.ooW),
                        f = n.get(io.QGx),
                        I = n.get(io.twC),
                        k = n.get(io.P0Z),
                        { language: _ } = (0, io.h6b)(),
                        T = (0, io.rs2)(),
                        C = (0, ia.j)(),
                        L = (0, io.Gdz)(),
                        w = d.checkExperiment(
                            io.zal.WebNextCrossMediaPlayer,
                            "on",
                        ),
                        x = !g.isAuthorized || S || P,
                        O = g.isAuthorized && !P,
                        G = k.get(io.qVS),
                        M = k.get(io.W4E),
                        K = !!G && !!b.get(io.cYZ.EnableMetricsPluginDebugMode),
                        X = (0, N.useMemo)(
                            () => (iP || (iP = new aB(s)), iP),
                            [s],
                        ),
                        j = m.browserInfo,
                        U = "Safari" !== j.name && "iOS" !== j.OSFamily,
                        B =
                            (null == j ? void 0 : j.isTouch) &&
                            v(
                                p.id,
                                null == (t = p.meta) ? void 0 : t.isNonMusic,
                            ),
                        V = (0, N.useMemo)(
                            () =>
                                ib ||
                                (ib = new ez({
                                    useAnalyser: U,
                                    useEqualizer: U,
                                    useFade: !1,
                                    useCrossFade: U && w,
                                })),
                            [U, w],
                        ),
                        q = (0, N.useMemo)(() => {
                            if (null !== iI) return iI;
                            let e = n.get(io.gdC);
                            return (iI = new eQ({
                                advertModule: T,
                                afterTrackResource: n.get(io.EN6),
                                adsResource: e,
                                variables: {
                                    get enabled() {
                                        return !g.hasPlus;
                                    },
                                },
                            }));
                        }, [T, n, g.hasPlus]),
                        Y = (0, N.useMemo)(() => {
                            if (i_) return i_;
                            let e = n.get(io.qTR),
                                { transport: t, codecs: a } = (0, io.EKQ)(j);
                            return (i_ = new a8({
                                getFileInfoProviderParams: {
                                    resource: e,
                                    secretKey: I.player.secretKey,
                                    mediaConfigController: X,
                                    transport: t,
                                    codecs: a,
                                    variables: {
                                        get fromPromoLanding() {
                                            return !0;
                                        },
                                    },
                                    mediaSourceTtlMs:
                                        I.player
                                            .configVariablesPromoLandingPlayback
                                            .strmUrlsTtlMs,
                                },
                                vhMediaProviderParams: I.player.vhMediaProvider,
                            }));
                        }, [
                            j,
                            I.player.configVariablesPromoLandingPlayback
                                .strmUrlsTtlMs,
                            I.player.secretKey,
                            I.player.vhMediaProvider,
                            n,
                            X,
                        ]),
                        W = (0, N.useMemo)(() => {
                            if (ik) return ik;
                            let e = n.get(io.qTR),
                                { transport: t, codecs: a } = (0, io.EKQ)(j);
                            return (ik = new a8({
                                getFileInfoProviderParams: {
                                    resource: e,
                                    secretKey: I.player.secretKey,
                                    mediaConfigController: X,
                                    transport: t,
                                    codecs: a,
                                    variables: {
                                        get isMediaSourcePreloadEnabled() {
                                            return d.checkExperiment(
                                                io.zal.WebNextTracksPreload,
                                                "on",
                                            );
                                        },
                                    },
                                    mediaSourceTtlMs:
                                        I.player.configVariablesMainPlayback
                                            .strmUrlsTtlMs,
                                },
                                vhMediaProviderParams: I.player.vhMediaProvider,
                            }));
                        }, [
                            j,
                            I.player.configVariablesMainPlayback.strmUrlsTtlMs,
                            I.player.secretKey,
                            I.player.vhMediaProvider,
                            n,
                            d,
                            X,
                        ]),
                        z = (0, N.useMemo)(
                            () =>
                                iT || (iT = new a4({ useExponentVolume: !0 })),
                            [],
                        );
                    (0, N.useEffect)(() => {
                        T &&
                            z &&
                            (T.createAudioAdvertPlayback({
                                playbackController: z,
                            }),
                            h.setIsAdvertPlaybackCreated(!0));
                    }, [h, T, z]);
                    let H = (0, N.useMemo)(
                            () =>
                                iC
                                    ? iC
                                    : (iC = new a7({
                                          tracksResource: n.get(io.Ooh),
                                          clipsResource: n.get(io.jQD),
                                      })),
                            [n],
                        ),
                        Q = (0, N.useMemo)(() => {
                            if (iD) return iD;
                            let e = n.get(io.Ooh),
                                t = n.get(io._19),
                                a = n.get(io.ok0),
                                i = n.get(io.qNr),
                                r = n.get(io.tzI),
                                s = n.get(io.O9U);
                            return (iD = new eG({
                                contextFactoryParams: {
                                    logger: E,
                                    variables: {
                                        vibe: {
                                            get sendFeedbackToSessionTracks() {
                                                return d.checkExperiment(
                                                    io.zal
                                                        .WebNextWaveNewFeedbacks,
                                                    "on",
                                                );
                                            },
                                            get sendInteractiveToSession() {
                                                return d.checkExperiment(
                                                    io.zal
                                                        .WebNextInteractiveSessionNew,
                                                    "on",
                                                );
                                            },
                                        },
                                    },
                                    tracksResource: e,
                                    usersResource: t,
                                    rotorResource: a,
                                    playlistResource: i,
                                    albumsResource: r,
                                    artistsResource: s,
                                },
                                entityFactoryParams: { likeStore: u },
                                variables: {
                                    get isCrossFadeEnabled() {
                                        return o.isCrossFadeEnabled;
                                    },
                                },
                            }));
                        }, [n, d, u, E, o]),
                        $ = (0, N.useMemo)(
                            () =>
                                iA ||
                                (iA = new e0({
                                    telemetryResource: n.get(io.LCy),
                                    ...I.player.telemetry,
                                })),
                            [n, I.player.telemetry],
                        ),
                        J = (() => {
                            let e = (0, io.NFA)(),
                                { experiments: t } = (0, io.Pjs)(),
                                a = e.get(io.twC),
                                i = a.player.yaspExpName,
                                r = a.player.yaspCandidateVersion;
                            return i && r && t.checkExperiment(i, "on")
                                ? r
                                : a.player.yaspVersionStable;
                        })(),
                        Z = (0, N.useMemo)(() => {
                            if (!W || !z || !H || !Q) return null;
                            if (iE) return iE;
                            let e = n.get(io.A4B)({ credentials: "include" }),
                                {
                                    player: {
                                        prefixUrl: t,
                                        configVariablesMainPlayback: a,
                                        configVariablesTrailerPlayback: i,
                                    },
                                } = I,
                                s = new e1(C),
                                l = d.checkExperiment(
                                    io.zal.WebNextEnablePlaysPluginV2,
                                    "on",
                                )
                                    ? tF
                                    : tz,
                                u = [
                                    new tZ({
                                        variables: {
                                            get isAutoflowEnabled() {
                                                return O;
                                            },
                                        },
                                    }),
                                    new t0(),
                                    new t1(),
                                    new l({
                                        httpClient: e,
                                        playsResourceConfig: {
                                            params: {
                                                common: {
                                                    client: (0, il._)(),
                                                    device: (0, io.V7X)(),
                                                    language: _,
                                                    oauth: f.token,
                                                    get multiAuthUserId() {
                                                        return n
                                                            .get(io.WA$)
                                                            .getPassportUid();
                                                    },
                                                },
                                            },
                                            prefixUrl: (0, R.getTldHost)(
                                                t,
                                                r,
                                                io.BEZ,
                                            ),
                                        },
                                        variables: {
                                            get disableSendPlaysOnTrackStart() {
                                                return d.checkExperiment(
                                                    io.zal
                                                        .WebNextDisableSendPlaysOnTrackStart,
                                                    "on",
                                                );
                                            },
                                            get enableLocalStoredPlaysData() {
                                                return d.checkExperiment(
                                                    io.zal
                                                        .WebNextPlayAudioHeartBeat,
                                                    "on",
                                                );
                                            },
                                            get shouldDeletePlaysObjectStore() {
                                                return d.checkExperiment(
                                                    io.zal
                                                        .WebNextDeleteIndexedDbPlaysStore,
                                                    "on",
                                                );
                                            },
                                            get enableRemoveDuplicatePlays() {
                                                return d.checkExperiment(
                                                    io.zal
                                                        .WebNextRemoveDuplicatePlays,
                                                    "on",
                                                );
                                            },
                                        },
                                    }),
                                    new t9({
                                        browserName: j.name,
                                        browserVersion: j.version,
                                    }),
                                    new t2({ logger: E }),
                                    new t7(X.quality),
                                    new ae({
                                        httpClient: e,
                                        streamsResourceConfig: {
                                            params: {
                                                common: {
                                                    client: (0, il._)(),
                                                    device: (0, io.V7X)(),
                                                    language: _,
                                                    oauth: f.token,
                                                    get multiAuthUserId() {
                                                        return n
                                                            .get(io.WA$)
                                                            .getPassportUid();
                                                    },
                                                },
                                            },
                                            prefixUrl: (0, R.getTldHost)(
                                                t,
                                                r,
                                                io.BEZ,
                                            ),
                                        },
                                        variables: {
                                            get isEnabled() {
                                                return g.isAuthorized;
                                            },
                                        },
                                    }),
                                    new ad({
                                        mediaConfigController: X,
                                        transport: s,
                                        variables: {
                                            get enableDebugMode() {
                                                return K;
                                            },
                                        },
                                    }),
                                    new ag({
                                        mediaProvider: W,
                                        mediaConfigController: X,
                                        config: {
                                            entitiesToPreloadStrmUrlsCount:
                                                a.entitiesToPreloadStrmUrlsCount,
                                            entitiesToPreloadSourceCount:
                                                a.entitiesToPreloadSourceCount,
                                            preloadedSourcesMaxCount:
                                                a.preloadedSourcesMaxCount,
                                            strmUrlsTtlMs: a.strmUrlsTtlMs,
                                            bufferGoal: a.bufferGoal,
                                        },
                                        variables: {
                                            get isMediaSourcePreloadEnabled() {
                                                return d.checkExperiment(
                                                    io.zal.WebNextTracksPreload,
                                                    "on",
                                                );
                                            },
                                        },
                                    }),
                                    new ah({
                                        onTrailerPaused: () => {
                                            c.setIsManuallyPaused(!0);
                                        },
                                        onTrailerPlaying: () => {
                                            c.setIsManuallyPaused(!1);
                                        },
                                        playbackController: z,
                                        trailerPlaybackParams: {
                                            id: io.V_r.TRAILER,
                                            plugins: [
                                                new ez({
                                                    useFade: U,
                                                    useSmartPreview: !0,
                                                }),
                                                new tZ({
                                                    variables: {
                                                        get isAutoflowEnabled() {
                                                            return !1;
                                                        },
                                                    },
                                                }),
                                                new t2({ logger: E }),
                                                new t1(),
                                                new ad({
                                                    mediaConfigController: X,
                                                    transport: s,
                                                    variables: {
                                                        get enableDebugMode() {
                                                            return K;
                                                        },
                                                    },
                                                }),
                                                new l({
                                                    httpClient: e,
                                                    playsResourceConfig: {
                                                        params: {
                                                            common: {
                                                                client: (0,
                                                                il._)(),
                                                                device: (0,
                                                                io.V7X)(),
                                                                language: _,
                                                                oauth: f.token,
                                                                get multiAuthUserId() {
                                                                    return n
                                                                        .get(
                                                                            io.WA$,
                                                                        )
                                                                        .getPassportUid();
                                                                },
                                                            },
                                                        },
                                                        prefixUrl: (0,
                                                        R.getTldHost)(
                                                            t,
                                                            r,
                                                            io.BEZ,
                                                        ),
                                                    },
                                                    variables: {
                                                        get disableSendPlaysOnTrackStart() {
                                                            return d.checkExperiment(
                                                                io.zal
                                                                    .WebNextDisableSendPlaysOnTrackStart,
                                                                "on",
                                                            );
                                                        },
                                                        get enableLocalStoredPlaysData() {
                                                            return d.checkExperiment(
                                                                io.zal
                                                                    .WebNextPlayAudioHeartBeat,
                                                                "on",
                                                            );
                                                        },
                                                        get shouldDeletePlaysObjectStore() {
                                                            return d.checkExperiment(
                                                                io.zal
                                                                    .WebNextDeleteIndexedDbPlaysStore,
                                                                "on",
                                                            );
                                                        },
                                                    },
                                                    storePlaysProgressIntervalMs: 5e3,
                                                }),
                                                new ay(),
                                            ],
                                            factory: Q,
                                            entityProvider: H,
                                            playbackConfig: {
                                                mediaElementErrorReloadCount:
                                                    i.mediaElementErrorReloadCount,
                                                windowSize: i.windowSize,
                                                setupQueueWindowSize:
                                                    i.setupQueueWindowSize,
                                            },
                                        },
                                    }),
                                    q,
                                    new ay(),
                                ];
                            if ((V && u.push(V), !x)) {
                                let e = n.get(io.byd),
                                    t = new aG({
                                        factory: Q,
                                        deviceConfig: e.deviceConfig,
                                        ynisonStateController:
                                            e.stateController,
                                        fallbackTypesQueueToVibe: [
                                            A.$P.UNSPECIFIED,
                                            A.$P.FM_RADIO,
                                            A.$P.VIDEO_WAVE,
                                            A.$P.LOCAL_TRACKS,
                                        ],
                                        variables: {
                                            get shouldApplyState() {
                                                return o.shouldApplyYnisonState;
                                            },
                                            get enableSendLimitedEntityListToYnison() {
                                                return d.checkExperiment(
                                                    io.zal
                                                        .WebNextEnableSendLimitedEntityListToYnison,
                                                    "on",
                                                );
                                            },
                                        },
                                    }),
                                    a = new aF({
                                        deviceConfig: e.deviceConfig,
                                        ynisonStateController:
                                            e.stateController,
                                        variables: {
                                            get shouldApplyState() {
                                                return o.shouldApplyYnisonState;
                                            },
                                        },
                                    });
                                u.push(a), u.push(t);
                            }
                            return (
                                u.push(
                                    new aj({
                                        factory: Q,
                                        platform: "desktop",
                                        variables: {
                                            get enabled() {
                                                return O;
                                            },
                                        },
                                    }),
                                ),
                                $ &&
                                    u.push(
                                        new aU({
                                            telemetry: $,
                                            get puid() {
                                                return g.puid;
                                            },
                                            yaspVersion: J,
                                            get telemetryTestIds() {
                                                return L();
                                            },
                                        }),
                                    ),
                                (iE = new ie({
                                    factory: Q,
                                    playbackController: z,
                                    plugins: u,
                                    entityProvider: H,
                                    playbackConfig: {
                                        mediaElementErrorReloadCount:
                                            a.mediaElementErrorReloadCount,
                                        windowSize: a.windowSize,
                                        setupQueueWindowSize:
                                            a.setupQueueWindowSize,
                                    },
                                }))
                            );
                        }, [
                            W,
                            z,
                            H,
                            Q,
                            n,
                            I,
                            C,
                            _,
                            f.token,
                            r,
                            j.name,
                            j.version,
                            E,
                            X,
                            U,
                            V,
                            q,
                            x,
                            $,
                            O,
                            d,
                            g.isAuthorized,
                            g.puid,
                            K,
                            c,
                            o.shouldApplyYnisonState,
                            J,
                            L,
                        ]);
                    (0, is.H)(Z);
                    let ee = (0, a5.c)((e) => {
                            null == Z || Z.setExponentVolume(e),
                                null == Z ||
                                    Z.setExponentVolume(e, io.V_r.TRAILER),
                                o.setVolume(e),
                                l &&
                                    (null == Z ||
                                        Z.setExponentVolume(
                                            e,
                                            io.V_r.PROMO_LANDING,
                                        ),
                                    y.setVolume(e));
                        }),
                        et = (0, a5.c)(() => {
                            let e = b.get(io.cYZ.YmPlayerVolume);
                            "number" == typeof e ? ee(e) : ee(1);
                        });
                    ((e) => {
                        let {
                                mediaProvider: t,
                                playbackController: a,
                                factory: i,
                                entityProvider: r,
                                mediaConfigController: s,
                                isEnabled: l,
                                isMetricsDebugEnabled: n,
                                hostTld: o,
                                browserInfo: d,
                            } = e,
                            u = (0, io.NFA)(),
                            c = (0, io.UlF)(),
                            g = (0, ia.j)(),
                            { experiments: h } = (0, io.Pjs)(),
                            { language: m } = (0, io.h6b)();
                        if (!l || !a || !i || !t || !r || !s || iv) return;
                        let y = u.get(io.QGx),
                            p = u.get(io.twC),
                            v = u.get(io.A4B)({ credentials: "include" }),
                            S = new e1(g),
                            {
                                player: {
                                    configVariablesPromoLandingPlayback: P,
                                    prefixUrl: E,
                                },
                            } = p;
                        null == a ||
                            a.createPlayback(io.V_r.PROMO_LANDING, {
                                factory: i,
                                entityProvider: r,
                                playbackConfig: {
                                    mediaElementErrorReloadCount:
                                        P.mediaElementErrorReloadCount,
                                    windowSize: P.windowSize,
                                    setupQueueWindowSize:
                                        P.setupQueueWindowSize,
                                },
                            });
                        let b = a.getPlayback(io.V_r.PROMO_LANDING);
                        for (let e of [
                            new tZ({
                                variables: {
                                    get isAutoflowEnabled() {
                                        return !1;
                                    },
                                },
                            }),
                            new t0(),
                            new t1(),
                            new tz({
                                httpClient: v,
                                playsResourceConfig: {
                                    params: {
                                        common: {
                                            client: (0, il._)(),
                                            device: (0, io.V7X)(),
                                            language: m,
                                            oauth: y.token,
                                            get multiAuthUserId() {
                                                return u
                                                    .get(io.WA$)
                                                    .getPassportUid();
                                            },
                                        },
                                    },
                                    prefixUrl: (0, R.getTldHost)(E, o, io.BEZ),
                                },
                                variables: {
                                    get disableSendPlaysOnTrackStart() {
                                        return h.checkExperiment(
                                            io.zal
                                                .WebNextDisableSendPlaysOnTrackStart,
                                            "on",
                                        );
                                    },
                                    get enableLocalStoredPlaysData() {
                                        return h.checkExperiment(
                                            io.zal.WebNextPlayAudioHeartBeat,
                                            "on",
                                        );
                                    },
                                    get shouldDeletePlaysObjectStore() {
                                        return h.checkExperiment(
                                            io.zal
                                                .WebNextDeleteIndexedDbPlaysStore,
                                            "on",
                                        );
                                    },
                                    get enablePartialPlayReporting() {
                                        return !0;
                                    },
                                },
                            }),
                            new t9({
                                browserName: d.name,
                                browserVersion: d.version,
                            }),
                            new t2({ logger: c }),
                            new ad({
                                mediaConfigController: s,
                                transport: S,
                                variables: {
                                    get enableDebugMode() {
                                        return n;
                                    },
                                },
                            }),
                            new ay(),
                        ])
                            e.apply({ playback: b, hooks: b.hooks });
                        iv = !0;
                    })({
                        isEnabled: !!l,
                        playbackController: z,
                        entityProvider: H,
                        factory: Q,
                        mediaConfigController: X,
                        isNonSafariBrowser: U,
                        isMetricsDebugEnabled: K,
                        browserInfo: j,
                        hostTld: r,
                        mediaProvider: Y,
                    }),
                        (0, N.useEffect)(() => {
                            Z && M && (window.sonataState = Z.state);
                        }, [M, Z]),
                        (0, N.useEffect)(() => {
                            Z &&
                                W &&
                                Y &&
                                $ &&
                                !o.areCoresRegistered &&
                                (Promise.all([a.e(2200), a.e(4371)])
                                    .then(a.bind(a, 14371))
                                    .then((e) => {
                                        let {
                                                YaspCoreAdapter: t,
                                                YaspLoader: a,
                                                HlsCoreAdapter: i,
                                                HtmlAudioCoreAdapter: r,
                                            } = e,
                                            s = new a({
                                                logger: E,
                                                yaspTelemetry: $,
                                                get telemetryTestIds() {
                                                    return L();
                                                },
                                            }),
                                            n = U
                                                ? new i({
                                                      hlsErrorRetryLimit:
                                                          I.player
                                                              .hlsErrorRetryLimit,
                                                  })
                                                : new r();
                                        Z.registerMediaPlayer({
                                            mediaPlayerParams: {
                                                core: n,
                                                mediaProvider: W,
                                                contentKind: "audio",
                                                contentType: F.e.HLS,
                                            },
                                        }),
                                            T &&
                                                Z.registerMediaPlayer({
                                                    mediaPlayerParams: {
                                                        core: new r(),
                                                        mediaProvider:
                                                            new io.Uvn(),
                                                        contentKind: "audio",
                                                        contentType: F.e.AUDIO,
                                                    },
                                                    playbackId: io.V_r.ADVERT,
                                                }),
                                            Z.registerMediaPlayer({
                                                mediaPlayerParams: {
                                                    core: new r(),
                                                    mediaProvider: W,
                                                    contentKind: "audio",
                                                    contentType:
                                                        F.e.DOWNLOADED_AUDIO,
                                                },
                                            });
                                        let o = async () =>
                                            s
                                                .loadYasp({
                                                    version: J,
                                                    sourceLimit:
                                                        I.player
                                                            .yaspSourceLimit,
                                                })
                                                .then(() => {
                                                    let e =
                                                        s.getYaspAudioElement();
                                                    Z.registerMediaPlayer({
                                                        mediaPlayerParams: {
                                                            core: new t({
                                                                yaspAudioElement:
                                                                    e,
                                                                yaspTelemetry:
                                                                    $,
                                                            }),
                                                            mediaProvider: W,
                                                            contentKind:
                                                                "audio",
                                                            contentType:
                                                                F.e.AUDIO,
                                                            additionalCore:
                                                                U && w
                                                                    ? new t({
                                                                          yaspAudioElement:
                                                                              e,
                                                                          yaspTelemetry:
                                                                              $,
                                                                      })
                                                                    : void 0,
                                                        },
                                                    }),
                                                        Z.registerMediaPlayer({
                                                            mediaPlayerParams: {
                                                                core: new t({
                                                                    yaspAudioElement:
                                                                        e,
                                                                }),
                                                                mediaProvider:
                                                                    W,
                                                                contentKind:
                                                                    "audio",
                                                                contentType:
                                                                    F.e.AUDIO,
                                                            },
                                                            playbackId:
                                                                io.V_r.TRAILER,
                                                        }),
                                                        l &&
                                                            Y &&
                                                            Z.registerMediaPlayer(
                                                                {
                                                                    mediaPlayerParams:
                                                                        {
                                                                            core: new t(
                                                                                {
                                                                                    yaspAudioElement:
                                                                                        e,
                                                                                },
                                                                            ),
                                                                            mediaProvider:
                                                                                Y,
                                                                            contentKind:
                                                                                "audio",
                                                                            contentType:
                                                                                F
                                                                                    .e
                                                                                    .AUDIO,
                                                                        },
                                                                    playbackId:
                                                                        io.V_r
                                                                            .PROMO_LANDING,
                                                                },
                                                            ),
                                                        et();
                                                })
                                                .catch(() => {
                                                    setTimeout(o, 1e3);
                                                });
                                        o();
                                    }),
                                o.setCoresAsRegistered(!0));
                        }, [
                            T,
                            I.player.hlsErrorRetryLimit,
                            J,
                            U,
                            E,
                            W,
                            Y,
                            et,
                            Z,
                            o,
                            l,
                            n,
                            o.areCoresRegistered,
                            $,
                            w,
                            U,
                            L,
                            I.player.yaspSourceLimit,
                        ]),
                        (0, N.useEffect)(() => {
                            a.e(4211)
                                .then(a.bind(a, 34211))
                                .then((e) => {
                                    let {
                                        loadVHPlayerSdk: t,
                                        VHPlayerCoreAdapter: a,
                                    } = e;
                                    if (!Z || !W || !z || !H || !Q) return;
                                    let i = new a({ hideAds: !0 }),
                                        { configVariablesMainPlayback: r } =
                                            I.player,
                                        s = async () =>
                                            t(I.player.vhPlayerSdkVersion)
                                                .then(() => {
                                                    z.createPlayback(
                                                        io.V_r.CLIP,
                                                        {
                                                            mediaPlayerParams: {
                                                                core: i,
                                                                mediaProvider:
                                                                    W,
                                                                contentKind:
                                                                    "video",
                                                                contentType:
                                                                    F.e.CLIP,
                                                            },
                                                            entityProvider: H,
                                                            factory: Q,
                                                            playbackConfig: {
                                                                mediaElementErrorReloadCount:
                                                                    r.mediaElementErrorReloadCount,
                                                                windowSize:
                                                                    r.windowSize,
                                                                setupQueueWindowSize:
                                                                    r.setupQueueWindowSize,
                                                            },
                                                            syncVolumeWithMainPlayback:
                                                                !0,
                                                        },
                                                    );
                                                    let e = z.getPlayback(
                                                        io.V_r.CLIP,
                                                    );
                                                    for (let t of [
                                                        new tZ({
                                                            variables: {
                                                                get isAutoflowEnabled() {
                                                                    return !1;
                                                                },
                                                            },
                                                        }),
                                                        new t1(),
                                                        q,
                                                    ])
                                                        t.apply({
                                                            playback: e,
                                                            hooks: e.hooks,
                                                        });
                                                    o.setIsVHCoreRegistered(!0);
                                                })
                                                .catch(() => {
                                                    setTimeout(s, 1e3);
                                                });
                                    s();
                                });
                        }, [q, I.player, n, H, Q, W, z, Z, o, g.hasPlus]),
                        (0, is.OM)({ sonata: Z }),
                        (0, ir.rb)({ sonata: Z }),
                        ((e) => {
                            let {
                                    sonata: t,
                                    playbackId: a,
                                    withStorage: i,
                                    sonataState: r,
                                } = e,
                                s = (0, io.NFA)().get(io.ooW);
                            (0, N.useEffect)(() => {
                                var e;
                                let l,
                                    n,
                                    o,
                                    d,
                                    u,
                                    c =
                                        null == t
                                            ? void 0
                                            : t
                                                  .getState(a)
                                                  .queueState.currentEntity.onChange(
                                                      (e) => {
                                                          let t =
                                                                  null == e
                                                                      ? void 0
                                                                      : e
                                                                            .context
                                                                            .data
                                                                            .type,
                                                              a =
                                                                  null == e
                                                                      ? void 0
                                                                      : e
                                                                            .context
                                                                            .data
                                                                            .meta
                                                                            .id,
                                                              i =
                                                                  null == e
                                                                      ? void 0
                                                                      : e.entity;
                                                          i &&
                                                              r.setEntityMeta(
                                                                  i,
                                                              ),
                                                              t &&
                                                                  r.setContextType(
                                                                      t,
                                                                  ),
                                                              a &&
                                                                  r.setContextId(
                                                                      a,
                                                                  );
                                                      },
                                                  ),
                                    g =
                                        null == t
                                            ? void 0
                                            : t
                                                  .getState(a)
                                                  .playerState.status.onChange(
                                                      (e) => {
                                                          e && r.setStatus(e);
                                                      },
                                                  ),
                                    h =
                                        null == t
                                            ? void 0
                                            : t
                                                  .getState(a)
                                                  .currentContext.onChange(
                                                      () => {
                                                          var e, c, g, h, m, y;
                                                          if (
                                                              (null == l || l(),
                                                              null == n || n(),
                                                              null == o || o(),
                                                              null == d || d(),
                                                              null == u || u(),
                                                              i)
                                                          ) {
                                                              let e =
                                                                  null !=
                                                                  (y = s.get(
                                                                      io.cYZ
                                                                          .YmPlayerRepeatMode,
                                                                  ))
                                                                      ? y
                                                                      : iS.pM
                                                                            .NONE;
                                                              null == t ||
                                                                  t.setRepeatMode(
                                                                      e,
                                                                      a,
                                                                  );
                                                              let i = !!s.get(
                                                                  io.cYZ
                                                                      .YmPlayerShuffle,
                                                              );
                                                              null == t ||
                                                                  t.setShuffle(
                                                                      i,
                                                                      a,
                                                                  );
                                                          }
                                                          (l =
                                                              null == t ||
                                                              null ==
                                                                  (e =
                                                                      t.getState(
                                                                          a,
                                                                      )
                                                                          .currentContext
                                                                          .value)
                                                                  ? void 0
                                                                  : e.availableActions.moveBackward.onChange(
                                                                        (e) => {
                                                                            r.setCanMoveBackward(
                                                                                !!e,
                                                                            );
                                                                        },
                                                                    )),
                                                              (n =
                                                                  null == t ||
                                                                  null ==
                                                                      (c =
                                                                          t.getState(
                                                                              a,
                                                                          )
                                                                              .currentContext
                                                                              .value)
                                                                      ? void 0
                                                                      : c.availableActions.moveForward.onChange(
                                                                            (
                                                                                e,
                                                                            ) => {
                                                                                r.setCanMoveForward(
                                                                                    !!e,
                                                                                );
                                                                            },
                                                                        )),
                                                              (o =
                                                                  null == t ||
                                                                  null ==
                                                                      (g =
                                                                          t.getState(
                                                                              a,
                                                                          )
                                                                              .currentContext
                                                                              .value)
                                                                      ? void 0
                                                                      : g.availableActions.repeat.onChange(
                                                                            (
                                                                                e,
                                                                            ) => {
                                                                                "boolean" ==
                                                                                    typeof e &&
                                                                                    r.setCanChangeRepeatMode(
                                                                                        e,
                                                                                    );
                                                                            },
                                                                        )),
                                                              (d =
                                                                  null == t ||
                                                                  null ==
                                                                      (h =
                                                                          t.getState(
                                                                              a,
                                                                          )
                                                                              .currentContext
                                                                              .value)
                                                                      ? void 0
                                                                      : h.availableActions.shuffle.onChange(
                                                                            (
                                                                                e,
                                                                            ) => {
                                                                                "boolean" ==
                                                                                    typeof e &&
                                                                                    r.setCanShuffle(
                                                                                        e,
                                                                                    );
                                                                            },
                                                                        )),
                                                              (u =
                                                                  null == t ||
                                                                  null ==
                                                                      (m =
                                                                          t.getState(
                                                                              a,
                                                                          )
                                                                              .currentContext
                                                                              .value)
                                                                      ? void 0
                                                                      : m.availableActions.speed.onChange(
                                                                            (
                                                                                e,
                                                                            ) => {
                                                                                "boolean" ==
                                                                                    typeof e &&
                                                                                    (r.setCanSpeed(
                                                                                        e,
                                                                                    ),
                                                                                    e ||
                                                                                        null ==
                                                                                            t ||
                                                                                        t.setSpeed(
                                                                                            1,
                                                                                            a,
                                                                                        ));
                                                                            },
                                                                        ));
                                                      },
                                                  ),
                                    m =
                                        null == t ||
                                        null == (e = t.getState(a).playerState)
                                            ? void 0
                                            : e.progress.onChange((e) => {
                                                  e &&
                                                      (r.setPosition(
                                                          e.position,
                                                      ),
                                                      r.setDuration(
                                                          e.duration,
                                                      ));
                                              }),
                                    y =
                                        null == t
                                            ? void 0
                                            : t
                                                  .getState(a)
                                                  .playerState.volume.onChange(
                                                      () => {
                                                          let e =
                                                              null == t
                                                                  ? void 0
                                                                  : t.getState(
                                                                        a,
                                                                    )
                                                                        .playerState
                                                                        .exponentVolume
                                                                        .value;
                                                          "number" ==
                                                              typeof e &&
                                                              r.setVolume(e);
                                                      },
                                                  ),
                                    p =
                                        null == t
                                            ? void 0
                                            : t
                                                  .getState(a)
                                                  .queueState.repeat.onChange(
                                                      (e) => {
                                                          e &&
                                                              (r.setRepeatMode(
                                                                  e,
                                                              ),
                                                              i &&
                                                                  s.set(
                                                                      io.cYZ
                                                                          .YmPlayerRepeatMode,
                                                                      e,
                                                                      {
                                                                          expires: 365,
                                                                      },
                                                                  ));
                                                      },
                                                  ),
                                    v =
                                        null == t
                                            ? void 0
                                            : t
                                                  .getState(a)
                                                  .queueState.shuffle.onChange(
                                                      (e) => {
                                                          "boolean" ==
                                                              typeof e &&
                                                              (r.setShuffle(e),
                                                              i &&
                                                                  s.set(
                                                                      io.cYZ
                                                                          .YmPlayerShuffle,
                                                                      e,
                                                                      {
                                                                          expires: 365,
                                                                      },
                                                                  ));
                                                      },
                                                  );
                                return () => {
                                    null == c || c(),
                                        null == g || g(),
                                        null == h || h(),
                                        null == y || y(),
                                        null == p || p(),
                                        null == o || o(),
                                        null == d || d(),
                                        null == v || v(),
                                        null == m || m(),
                                        null == l || l(),
                                        null == n || n(),
                                        null == u || u();
                                };
                            }, [a, t, r, s, i]);
                        })({
                            sonata: Z,
                            playbackId: l ? io.V_r.PROMO_LANDING : void 0,
                            withStorage: !l,
                            sonataState: l ? y : o,
                        });
                    let ea = (0, N.useCallback)(() => {
                        if (!g.isAuthorized || S || (!g.hasPlus && B))
                            return al.e.PREVIEW;
                        if (P) return al.e.EFFICIENT;
                        let e = b.get(io.cYZ.YmPlayerQuality);
                        if (e) {
                            if (Object.values(io.lv9).includes(e)) {
                                let t = (0, io.SBI)(e);
                                return (
                                    b.set(io.cYZ.YmPlayerQuality, t, {
                                        expires: 365,
                                    }),
                                    t
                                );
                            }
                            return e;
                        }
                        return (
                            b.set(io.cYZ.YmPlayerQuality, al.e.BALANCED, {
                                expires: 365,
                            }),
                            al.e.BALANCED
                        );
                    }, [b, S, P, g.isAuthorized, g.hasPlus, B]);
                    return (
                        (0, N.useEffect)(
                            () => (
                                l &&
                                    (null == Z || Z.stop(),
                                    Object.values(io.V_r).forEach((e) => {
                                        e !== io.V_r.PROMO_LANDING &&
                                            (null == Z || Z.stop(e));
                                    })),
                                () => {
                                    l &&
                                        (null == Z ||
                                            Z.stop(io.V_r.PROMO_LANDING));
                                }
                            ),
                            [Z, l],
                        ),
                        (0, N.useEffect)(() => {
                            l || (X.setQuality(ea()), o.setQuality(ea()));
                        }, [X, ea, o, l]),
                        (0, N.useEffect)(() => {
                            (0, it.Bx)(b, iL);
                        }, [b]),
                        (0, D.jsx)(io.cdg.Provider, {
                            value: X,
                            children: (0, D.jsxs)(io.GsR.Provider, {
                                value: Z,
                                children: [
                                    (0, D.jsx)(ii.mW, {}),
                                    (0, D.jsx)(iy, { isYnisonDisabled: x }),
                                    (0, D.jsx)(io.WM$.Provider, {
                                        value: V,
                                        children: (0, D.jsxs)(ip, {
                                            children: [(0, D.jsx)(ih, {}), i],
                                        }),
                                    }),
                                ],
                            }),
                        })
                    );
                },
                iR = (0, L.PA)((e) => {
                    let { children: t, hostTld: a, quality: i, ...r } = e,
                        s = (0, io.Dg5)();
                    return (0, D.jsx)(N.Suspense, {
                        fallback: (0, D.jsx)(id.JR, {}),
                        children: (0, D.jsx)(iu, {
                            audioLoader: s,
                            children: (0, D.jsx)(iN, {
                                hostTld: a,
                                quality: i,
                                ...r,
                                children: t,
                            }),
                        }),
                    });
                });
        },
        59646: (e) => {
            e.exports = {
                root: "TopConcertsCarousel_root__opMbb",
                controls: "TopConcertsCarousel_controls__c92PW",
                header: "TopConcertsCarousel_header__3h3Zn",
                carousel: "TopConcertsCarousel_carousel__uMke6",
                item: "TopConcertsCarousel_item__fz8lR",
                important: "TopConcertsCarousel_important__ZcT6Z",
            };
        },
        59745: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { UrlInitializer: () => l });
            var i = a(97531),
                r = a(17846),
                s = a(79169);
            let l = (0, i.PA)((e) => {
                let { host: t } = e,
                    { location: a } = (0, s.Pjs)(),
                    i = (0, r.usePathname)(),
                    l = (0, r.useSearchParams)().toString(),
                    n = window.location.host,
                    o = t || n,
                    d = "https://".concat(o),
                    u = "https://"
                        .concat(o)
                        .concat(i)
                        .concat(l ? "?" : "")
                        .concat(l);
                (d = o),
                    (u = ""
                        .concat(o)
                        .concat(i)
                        .concat(l ? "?" : "")
                        .concat(l)),
                    a.setPathname(i),
                    a.setSearchParams(l),
                    a.setHost(o),
                    a.setTld((0, s.fMM)(o) || s.lYh),
                    a.setOrigin(d),
                    a.setHref(u);
            });
        },
        59938: (e) => {
            e.exports = {
                root: "BrowserUpdateNotification_root__IN495",
                important: "BrowserUpdateNotification_important__6k4Gb",
            };
        },
        60180: (e, t, a) => {
            "use strict";
            a.d(t, { ChartPodcastsNotFoundPage: () => o });
            var i = a(33008),
                r = a(97531),
                s = a(66268),
                l = a(35233),
                n = a(79169);
            let o = (0, r.PA)(() => {
                let {
                    chart: { podcastsSubPage: e },
                } = (0, n.Pjs)();
                return (
                    (0, s.useEffect)(() => {
                        e.reset();
                    }, []),
                    (0, i.jsx)(l.M, {})
                );
            });
        },
        60411: (e, t, a) => {
            "use strict";
            var i;
            a.d(t, { Q: () => i }),
                (function (e) {
                    (e.ALBUMS = "albums"),
                        (e.ARTISTS = "artists"),
                        (e.PLAYLISTS = "playlists");
                })(i || (i = {}));
        },
        61334: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { WebInitializer: () => n });
            var i = a(33008),
                r = a(97531),
                s = a(79169);
            let l = (0, r.PA)((e) => {
                    let { children: t, userIp: a } = e,
                        { location: i } = (0, s.Pjs)();
                    return t;
                }),
                n = (e) => {
                    let { userIp: t } = e;
                    return (0, i.jsx)(l, { userIp: t });
                };
        },
        62289: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { ThemeProvider: () => o });
            var i = a(33008),
                r = a(66268),
                s = a(42213),
                l = a(79169),
                n = a(18740);
            let o = (e) => {
                let { children: t, predefinedTheme: a } = e,
                    o = (0, l.NFA)().get(l.ooW),
                    { getThemeFromStorage: d, setThemeToStorage: u } = (0,
                    l.QDo)(o),
                    [c, g] = (0, r.useState)(() => (null != a ? a : d())),
                    h = (0, s.c)((e) => {
                        d() || a || (u(l.W3W), g(e));
                    });
                (0, r.useLayoutEffect)(() => {
                    a || (0, l.Z8R)(c);
                }, [c, a]),
                    (0, l.kgS)({ onSystemThemeChange: h }),
                    (0, r.useLayoutEffect)(() => {
                        h((0, l.VDQ)());
                    }, [h]);
                let m = (0, r.useMemo)(() => ({ theme: c, setTheme: g }), [c]);
                return (0, i.jsx)(l.Dx0.Provider, {
                    value: m,
                    children: (0, i.jsx)(r.Suspense, {
                        fallback: (0, i.jsx)(n.JR, {}),
                        children: t,
                    }),
                });
            };
        },
        63e3: (e, t, a) => {
            "use strict";
            a.d(t, { ChartPodcastsPage: () => P });
            var i = a(33008),
                r = a(85896),
                s = a(97531),
                l = a(17846),
                n = a(66268),
                o = a(73827),
                d = a(18064),
                u = a(91342),
                c = a(77868),
                g = a(83888),
                h = a(52732),
                m = a(64143),
                y = a(79169),
                p = a(18740),
                v = a(98154),
                S = a.n(v);
            let P = (0, s.PA)((e) => {
                let { categoryId: t } = e,
                    {
                        chart: { podcastsSubPage: a },
                        settings: { isMobile: s },
                    } = (0, y.Pjs)(),
                    { contentScrollRef: v, setContentScrollRef: P } = (0,
                    y.gKY)(),
                    { formatMessage: E } = (0, o.A)(),
                    b = (0, y.W6M)(),
                    f = (0, n.useMemo)(
                        () => ({
                            Footer: () =>
                                (0, i.jsx)(p.A, {
                                    children: (0, i.jsx)(p.wi, {
                                        className: S().footer,
                                    }),
                                }),
                        }),
                        [],
                    ),
                    I = (0, n.useMemo)(
                        () =>
                            a.title
                                ? (0, i.jsx)(c.Heading, {
                                      id: "collection-artists-header",
                                      variant: "h1",
                                      weight: "bold",
                                      size: "xl",
                                      lineClamp: 1,
                                      children: a.title,
                                  })
                                : (0, i.jsx)(u.Shimmer, {
                                      className: S().shimmerTitle,
                                      radius: "l",
                                  }),
                        [a.title],
                    );
                if (
                    ((0, y.Jzs)(a.isResolved),
                    a.isNotFound && (0, l.notFound)(),
                    (0, n.useEffect)(
                        () => () => {
                            a.reset();
                        },
                        [a],
                    ),
                    a.isNeededToLoad && (0, n.use)(a.getData(t)),
                    a.isSomethingWrong)
                )
                    return (0, i.jsx)(g.w, {});
                let k = a.isLoading ? 20 : a.items.length;
                return (0, i.jsx)(y.nVz, {
                    pageId: t
                        ? y._Q$.CHART_PODCASTS_CATEGORY
                        : y._Q$.CHART_PODCASTS,
                    children: (0, i.jsx)(m.hO, {
                        scrollElement: v,
                        outerTitle: a.title,
                        children: (0, i.jsxs)("div", {
                            className: S().root,
                            ...(0, d.Am)(d.Xk.chart.CHART_PODCASTS),
                            children: [
                                (0, i.jsx)(p.Y9, {
                                    variant: p.Vw.TEXT,
                                    withForwardControl: !1,
                                    withBackwardControl: b.canBack,
                                    children: I,
                                }),
                                (0, i.jsx)(p.$$, {
                                    className: (0, r.$)(
                                        S().scrollContainer,
                                        S().important,
                                    ),
                                    listClassName: S().content,
                                    customComponents: f,
                                    itemContentCallback: (e) => {
                                        let t = a.items[e],
                                            r = E(
                                                {
                                                    id: "loading-messages.entity-is-loading",
                                                },
                                                {
                                                    entityName: E({
                                                        id: "entity-names.album",
                                                    }),
                                                },
                                            );
                                        return !t || a.isLoading
                                            ? (0, i.jsx)(p.Vt, {
                                                  "aria-label": r,
                                              })
                                            : (0, i.jsx)(h.aX, {
                                                  album: t,
                                                  contentLinesCount: 3,
                                                  withLikesCount: !0,
                                                  withChart: !0,
                                                  withAddition: !1,
                                              });
                                    },
                                    handleRef: P,
                                    initialItemCount: k,
                                    totalCount: k,
                                    isMobileLayout: s,
                                    useWindowScroll: s,
                                    context: {
                                        listAriaLabel: E({
                                            id: "entity-names.chart-podcasts-list",
                                        }),
                                    },
                                }),
                            ],
                        }),
                    }),
                });
            });
        },
        63661: (e, t, a) => {
            "use strict";
            a.d(t, { bp: () => E, A6: () => M, Bd: () => c });
            var i = a(41028);
            let r = i.gK.model("ConcertDescription", {
                text: i.gK.string,
                genre: i.gK.maybe(i.gK.string),
                source: i.gK.maybe(i.gK.string),
            });
            var s = a(61979),
                l = a(12898),
                n = a(70879),
                o = a(51551),
                d = a(79169),
                u = a(59615);
            let c = i.gK
                .compose(
                    i.gK.model("ConcertPage", {
                        meta: i.gK.maybeNull(o.aR),
                        covers: i.gK.maybeNull(i.gK.array(u.$B)),
                        description: i.gK.maybeNull(r),
                        leadArtistId: i.gK.maybeNull(
                            i.gK.union(i.gK.string, i.gK.number),
                        ),
                        artists: i.gK.maybeNull(i.gK.array(n.PK)),
                        errorStatusCode: i.gK.maybeNull(i.gK.number),
                        landing: l.Ju,
                    }),
                    u.XT,
                    u.pl,
                )
                .views((e) => ({
                    get isShimmerVisible() {
                        return e.isNeededToLoad || e.isLoading || e.isRejected;
                    },
                    get isShimmerActive() {
                        return e.isLoading;
                    },
                    get isNotFound() {
                        return (
                            e.isRejected &&
                            (e.errorStatusCode === s.X1.NOT_FOUND ||
                                e.errorStatusCode === s.X1.BAD_REQUEST)
                        );
                    },
                    get coversUri() {
                        var t, a;
                        return null !=
                            (a =
                                null == (t = e.covers)
                                    ? void 0
                                    : t.map((e) => e.uri).filter((e) => !!e))
                            ? a
                            : [];
                    },
                }))
                .actions((e) => ({
                    getInfo: (0, i.L3)(function* (t) {
                        let { concertId: a } = t,
                            { concertsResource: r, modelActionsLogger: l } = (0,
                            i._$)(e);
                        if (!e.isLoading)
                            try {
                                e.loadingState = d.GuX.PENDING;
                                let {
                                    concert: t,
                                    minPrice: s,
                                    covers: l,
                                    description: u,
                                    leadArtistId: c,
                                    artists: g,
                                } = yield r.getInfo({ concertId: a });
                                (e.meta = (0, o.ho)(t, s)),
                                    (e.covers = (0, i.wg)(
                                        null == l
                                            ? void 0
                                            : l.map((e) => (0, d.pX4)(e)),
                                    )),
                                    (e.description = u ? (0, i.wg)(u) : null),
                                    (e.leadArtistId = c ? (0, i.wg)(c) : null),
                                    (e.artists = (0, i.wg)(
                                        null == g
                                            ? void 0
                                            : g.map((e) => (0, n.dM)(e)),
                                    )),
                                    (e.loadingState = d.GuX.RESOLVE);
                            } catch (t) {
                                l.error(t),
                                    t instanceof s.GX &&
                                        (t.statusCode === s.X1.NOT_FOUND ||
                                            t.statusCode ===
                                                s.X1.BAD_REQUEST) &&
                                        (e.errorStatusCode = s.X1.NOT_FOUND),
                                    (e.loadingState = d.GuX.REJECT);
                            }
                    }),
                    reset() {
                        (e.loadingState = d.GuX.IDLE),
                            e.landing.reset(),
                            (e.leadArtistId = null),
                            e.destroyItems([
                                e.covers,
                                e.description,
                                e.artists,
                            ]);
                    },
                }));
            var g = a(33008),
                h = a(97531),
                m = a(66268),
                y = a(73827),
                p = a(35233),
                v = a(40311),
                S = a.n(v);
            let P = (0, h.PA)(() => {
                    let { experiments: e, concert: t } = (0, d.Pjs)(),
                        { formatMessage: a } = (0, y.A)(),
                        i = e.checkExperiment(d.zal.WebNextConcertPage, "on");
                    if (
                        ((0, d.ACS)(),
                        (0, m.useEffect)(
                            () => () => {
                                t.reset();
                            },
                            [t],
                        ),
                        !i)
                    )
                        return (0, g.jsx)(p.M, {});
                    let r = a({ id: "page-error.concert-page-does-not-exist" }),
                        s = a({
                            id: "page-error.concert-page-does-not-exist-description",
                        });
                    return (0, g.jsx)(p.M, {
                        title: r,
                        description: s,
                        iconVariant: "attention",
                        iconSize: "xxl",
                        iconClassName: S().icon,
                    });
                }),
                E = (0, h.PA)(() =>
                    (0, g.jsx)(d.nVz, {
                        pageId: d._Q$.PAGE_NOT_FOUND_SCREEN,
                        children: (0, g.jsx)(P, {}),
                    }),
                );
            var b = a(17846),
                f = a(54960),
                I = a(93967),
                k = a(43836),
                _ = a(42213),
                T = a(1357),
                C = a(42314),
                D = a(57747),
                A = a(74837),
                L = a(83888),
                N = a(64143),
                R = a(18740),
                w = a(48551),
                x = a(18998),
                O = a.n(x);
            let G = (0, h.PA)((e) => {
                    var t, a, i;
                    let { concertId: r, isWebNextNavigationOn: s } = e,
                        {
                            experiments: n,
                            concert: o,
                            modals: { imageSliderModal: u },
                        } = (0, d.Pjs)(),
                        c = (() => {
                            let e = (0, w.st)(),
                                t = (0, d.UlF)(),
                                { pageId: a } = (0, d.$au)(),
                                { hash: i } = (0, w.gf)();
                            return (0, _.c)((r, s) => {
                                if (!e || !a) return;
                                let l = {
                                        hash: i,
                                        pageId: a,
                                        pageStyle: I.QL.Fullscreen,
                                        pagePlacement: I.c4.Fullscreen,
                                        viewUuid: s,
                                        mainObjectType: I.ky.Concert,
                                    },
                                    n = (0, I.Fx)({
                                        params: l,
                                        logger: t,
                                        context:
                                            "useSendEventOnConcertOpenedOrClosed",
                                    });
                                n &&
                                    (r
                                        ? (0, I.Fn)(e.evgenInstance, n)
                                        : (0, I.PO)(e.evgenInstance, n));
                            });
                        })(),
                        h = (0, m.useRef)(String((0, f.A)())),
                        { setContentScrollRef: y, contentScrollRef: p } = (0,
                        d.gKY)(),
                        { forceUpdateRefCallback: v, offsetY: S } = (0, T.G)(p),
                        P = (0, d.ytd)(
                            null == (a = o.covers) || null == (t = a[0])
                                ? void 0
                                : t.color,
                        ),
                        { topColorStyle: E, headerStyle: x } = (0, N.QZ)(
                            P,
                            S,
                            s,
                        ),
                        G = (0, _.c)(() => {
                            o.coversUri.length > 0 &&
                                u.openImages({
                                    images: o.coversUri,
                                    sizeImage: 800,
                                    withAspectRatio: !1,
                                });
                        }),
                        M = n.checkExperiment(d.zal.WebNextConcertPage, "on");
                    (0, d.ACS)(),
                        (0, m.useEffect)(
                            () => () => {
                                o.reset();
                            },
                            [o],
                        ),
                        (0, m.useEffect)(() => {
                            let e = h.current;
                            return (
                                c(!0, e),
                                () => {
                                    c(!1, e);
                                }
                            );
                        }, [c]),
                        (0, d.Jzs)(o.isResolved);
                    let K = [];
                    if (
                        (o.isNeededToLoad &&
                            K.push(o.getInfo({ concertId: r })),
                        o.landing.isNeededToLoad &&
                            K.push(
                                o.landing.getConcertSkeleton(
                                    {
                                        concertId: r,
                                        skeletonId: k.p.CONCERT_PAGE,
                                    },
                                    { preloadBlocksCount: 2 },
                                ),
                            ),
                        K.length && (0, m.use)(Promise.allSettled(K)),
                        (!M || o.isNotFound) && (0, b.notFound)(),
                        o.isRejected)
                    )
                        return (0, g.jsx)(L.w, {});
                    let F = (0, C.L)(() => {
                        var e, t, a;
                        return o.isLoading || !o.meta || o.isRejected
                            ? (0, g.jsx)(A.c6, {
                                  className: O().header,
                                  isActive: !0,
                              })
                            : (0, g.jsx)(d.Bki, {
                                  objectType: I.ky.Concert,
                                  objectId:
                                      null == (e = o.meta) ? void 0 : e.id,
                                  objectPosX: 1,
                                  objectPosY: 1,
                                  objectsCount: 1,
                                  mainObjectType: I.ky.Concert,
                                  mainObjectId:
                                      null == (t = o.meta) ? void 0 : t.id,
                                  children: (0, g.jsx)(A.Dc, {
                                      description: o.description,
                                      onCoverClick: G,
                                      leadArtistId: o.leadArtistId,
                                      ref: v,
                                      className: O().header,
                                      concert: o.meta,
                                      cover:
                                          null == (a = o.covers)
                                              ? void 0
                                              : a[0],
                                  }),
                              });
                    });
                    return (0, g.jsx)(d.jPc, {
                        children: (0, g.jsxs)(N.hO, {
                            scrollElement: p,
                            children: [
                                (0, g.jsx)(R.Y9, {
                                    style: x,
                                    variant: R.Vw.INNER,
                                    showControls: !1,
                                }),
                                (0, g.jsx)("div", {
                                    className: O().averageColorBackground,
                                    style: E,
                                }),
                                (0, g.jsxs)(D.N, {
                                    ref: y,
                                    className: O().root,
                                    containerClassName: O().container,
                                    children: [
                                        (0, g.jsxs)("div", {
                                            children: [
                                                (0, g.jsx)(d.hjC, {
                                                    tabId: "",
                                                    tabPos: 0,
                                                    isTabSelectedByDefault: !1,
                                                    children: (0, g.jsx)(
                                                        d.FoH,
                                                        {
                                                            blockId:
                                                                I.LA
                                                                    .ConcertHeader,
                                                            blockType:
                                                                I.LA
                                                                    .ConcertHeader,
                                                            blockPosX: 1,
                                                            blockPosY: 1,
                                                            objectsCount: 1,
                                                            mainObjectType:
                                                                I.ky.Concert,
                                                            mainObjectId:
                                                                null ==
                                                                (i = o.meta)
                                                                    ? void 0
                                                                    : i.id,
                                                            children: F,
                                                        },
                                                    ),
                                                }),
                                                (0, g.jsx)(l.EA, {
                                                    containerClassName:
                                                        O().skeleton,
                                                    landing: o.landing,
                                                    errorComponent: (0, g.jsx)(
                                                        L.w,
                                                        {
                                                            className:
                                                                O().error,
                                                            withBackwardControl:
                                                                !1,
                                                        },
                                                    ),
                                                }),
                                            ],
                                        }),
                                        (0, g.jsx)(R.A, {
                                            children: (0, g.jsx)(R.wi, {
                                                className: O().footer,
                                            }),
                                        }),
                                    ],
                                }),
                            ],
                        }),
                    });
                }),
                M = (0, h.PA)((e) =>
                    (0, g.jsx)(d.nVz, {
                        pageId: d._Q$.CONCERT,
                        pageEntityId: e.concertId,
                        children: (0, g.jsx)(G, { ...e }),
                    }),
                );
        },
        66342: (e) => {
            e.exports = { root: "KidsCategoryPageShimmer_root__0V_bC" };
        },
        66513: (e) => {
            e.exports = {
                root: "PostArtists_root__Zxmjq",
                content: "PostArtists_content__JzGOH",
            };
        },
        67956: (e, t, a) => {
            "use strict";
            a.d(t, { ChartTracksPage: () => P });
            var i = a(33008),
                r = a(85896),
                s = a(97531),
                l = a(66268),
                n = a(73827),
                o = a(18064),
                d = a(48509),
                u = a(91342),
                c = a(77868),
                g = a(83888),
                h = a(64143),
                m = a(44078),
                y = a(79169),
                p = a(18740),
                v = a(50270),
                S = a.n(v);
            let P = (0, s.PA)(() => {
                let { formatMessage: e } = (0, n.A)(),
                    {
                        chart: { tracksSubPage: t },
                        settings: { isMobile: a },
                    } = (0, y.Pjs)(),
                    s = (0, y.W6M)(),
                    { contentScrollRef: v, setContentScrollRef: P } = (0,
                    y.gKY)(),
                    E = (0, y.wZZ)(),
                    { from: b } = (0, y.fyy)({ pageId: y._Q$.CHART });
                (0, y.Jzs)(t.isResolved);
                let f = (0, l.useCallback)(
                        (e) => {
                            let a = t.items[e];
                            return a && !t.isLoading && t.playlistMeta
                                ? (0, i.jsx)(m.QB, {
                                      track: a,
                                      playContextParams: E(e, {
                                          contextData: {
                                              type: d.K.Playlist,
                                              meta: {
                                                  id: ""
                                                      .concat(
                                                          t.playlistMeta.uid,
                                                          ":",
                                                      )
                                                      .concat(
                                                          t.playlistMeta.kind,
                                                      ),
                                              },
                                              from: b,
                                          },
                                          queueParams: {
                                              index: e,
                                              entityId: a.id,
                                          },
                                          loadContextMeta: !0,
                                      }),
                                  })
                                : (0, i.jsx)(p.DS, {
                                      isActive: !0,
                                      className: S().shimmerItem,
                                      variant: y.Xjt.PLAYLIST,
                                  });
                        },
                        [b, E, t.isLoading, t.items, t.playlistMeta],
                    ),
                    I = (0, l.useMemo)(
                        () => ({
                            Footer: () =>
                                (0, i.jsx)(p.A, {
                                    children: (0, i.jsx)(p.wi, {
                                        className: S().footer,
                                    }),
                                }),
                        }),
                        [],
                    ),
                    k = (0, l.useMemo)(
                        () =>
                            t.title
                                ? (0, i.jsx)(c.Heading, {
                                      id: "collection-artists-header",
                                      variant: "h1",
                                      weight: "bold",
                                      size: "xl",
                                      lineClamp: 1,
                                      children: t.title,
                                  })
                                : (0, i.jsx)(u.Shimmer, {
                                      className: S().shimmerTitle,
                                      radius: "l",
                                  }),
                        [t.title],
                    );
                return (t.isNeededToLoad && (0, l.use)(t.getTracks()),
                t.isRejected)
                    ? (0, i.jsx)(g.w, {})
                    : (0, i.jsx)(y.nVz, {
                          pageId: y._Q$.CHART,
                          children: (0, i.jsx)(h.hO, {
                              scrollElement: v,
                              ...(t.title && { outerTitle: t.title }),
                              children: (0, i.jsxs)("div", {
                                  className: S().root,
                                  ...(0, o.Am)(o.Xk.chart.CHART_PAGE),
                                  children: [
                                      (0, i.jsx)(p.Y9, {
                                          variant: p.Vw.TEXT,
                                          withForwardControl: !1,
                                          withBackwardControl: s.canBack,
                                          children: k,
                                      }),
                                      (0, i.jsx)(p.$$, {
                                          className: (0, r.$)(
                                              S().scrollContainer,
                                              S().important,
                                          ),
                                          listClassName: S().content,
                                          customComponents: I,
                                          totalCount: t.items.length,
                                          itemContentCallback: f,
                                          debounceDurationInMs: 300,
                                          handleRef: P,
                                          context: {
                                              listAriaLabel: e({
                                                  id: "entity-names.chart-tracks-list",
                                              }),
                                          },
                                          isMobileLayout: a,
                                          useWindowScroll: a,
                                      }),
                                  ],
                              }),
                          }),
                      });
            });
        },
        69132: (e, t, a) => {
            "use strict";
            a.d(t, { ShortcutsProvider: () => d });
            var i = a(33008),
                r = a(97531),
                s = a(66268),
                l = a(79169),
                n = a(87145);
            let o = null,
                d = (0, r.PA)((e) => {
                    let { children: t } = e,
                        { sonataState: a } = (0, l.Pjs)(),
                        r = (0, s.useMemo)(
                            () => (o || (o = new l.G8o(new l.z$B())), o),
                            [],
                        );
                    return (
                        (0, n.E)({
                            controller: r,
                            sonataState: a,
                            groupId: l.Mo.MAIN,
                        }),
                        (0, s.useEffect)(
                            () => (
                                null == r || r.listen(),
                                () => {
                                    null == r || r.stopListening();
                                }
                            ),
                            [r],
                        ),
                        (0, i.jsx)(l.Pic.Provider, { value: r, children: t })
                    );
                });
        },
        69326: (e, t, a) => {
            "use strict";
            a.d(t, { DeeplinkInitializer: () => d });
            var i = a(97531),
                r = a(17846),
                s = a(66268),
                l = a(45415),
                n = a(79169);
            let o = [
                    n.K3F.DEEPLINK,
                    n.K3F.SEEDS,
                    n.K3F.STATION_ID,
                    n.K3F.OPEN_PLAYER,
                    n.K3F.SCREEN,
                ],
                d = (0, i.PA)(
                    () => (
                        (() => {
                            let {
                                    fullscreenPlayer: e,
                                    sonataState: t,
                                    user: a,
                                    location: i,
                                } = (0, n.Pjs)(),
                                d = (0, r.useSearchParams)(),
                                u = (0, n.XJ9)(),
                                c = d.get(n.K3F.SEEDS),
                                g = d.get(n.K3F.STATION_ID),
                                { isFreemium: h } = (0, n.XCI)(),
                                { state: m, toggleTrue: y } = (0, l.e)(!1),
                                p = (0, s.useMemo)(() => {
                                    let e = c ? c.split(",") : [];
                                    return g && e.unshift(g), e;
                                }, [c, g]),
                                { togglePlay: v } = (0, n.B0S)({
                                    seeds: p,
                                    pageIdForFrom: n._Q$.RADIO,
                                    blockIdForFrom: p.join("_"),
                                });
                            (0, s.useEffect)(() => {
                                if (m) {
                                    let e = new URL(window.location.href);
                                    o.forEach((t) => e.searchParams.delete(t)),
                                        u(e.toString()),
                                        i.setHref(window.location.href);
                                }
                            }, [i, u, m, i.href]),
                                (0, s.useEffect)(() => {
                                    if (
                                        d.get(n.K3F.DEEPLINK) ===
                                        n.vEM.PLAY_VIBE
                                    ) {
                                        if (!a.isAuthorized || h)
                                            return void y();
                                        t.setShouldApplyYnisonState(!1),
                                            v(),
                                            "true" ===
                                                d.get(n.K3F.OPEN_PLAYER) &&
                                                e.modal.open(),
                                            y();
                                    }
                                    return () => {
                                        t.setShouldApplyYnisonState(!0);
                                    };
                                }, [e.modal, h, d, y, t, v, a.isAuthorized]);
                        })(),
                        null
                    ),
                );
        },
        69686: (e, t, a) => {
            "use strict";
            a.d(t, { PostPage: () => w });
            var i = a(33008),
                r = a(85896),
                s = a(97531),
                l = a(17846),
                n = a(66268),
                o = a(60411),
                d = a(57747),
                u = a(91342),
                c = a(77868),
                g = a(83888),
                h = a(64143),
                m = a(79169),
                y = a(18740),
                p = a(23724),
                v = a.n(p);
            let S = () =>
                (0, i.jsxs)("div", {
                    className: v().root,
                    children: [
                        (0, i.jsx)(u.Shimmer, {
                            radius: "l",
                            className: v().top,
                        }),
                        (0, i.jsx)(u.Shimmer, {
                            radius: "l",
                            className: v().bottom,
                        }),
                    ],
                });
            var P = a(46052),
                E = a.n(P),
                b = a(52732),
                f = a(4115),
                I = a.n(f);
            let k = (0, s.PA)((e) => {
                let { albums: t = [] } = e;
                return (0, i.jsx)("div", {
                    className: I().root,
                    children: (0, i.jsx)("div", {
                        className: I().content,
                        "aria-labelledby": "post-page-header",
                        tabIndex: 0,
                        children: t.map((e) =>
                            (0, i.jsx)(
                                b.aX,
                                {
                                    className: I().item,
                                    album: e,
                                    contentLinesCount: 3,
                                },
                                e.id,
                            ),
                        ),
                    }),
                });
            });
            var _ = a(90317),
                T = a(66513),
                C = a.n(T);
            let D = (0, s.PA)((e) => {
                let { artists: t = [] } = e;
                return (0, i.jsx)("div", {
                    className: C().root,
                    children: (0, i.jsx)("div", {
                        className: C().content,
                        "aria-labelledby": "post-page-header",
                        tabIndex: 0,
                        children: t.map((e) =>
                            (0, i.jsx)(
                                _.ao,
                                {
                                    className: C().item,
                                    artist: e,
                                    contentLinesCount: 3,
                                },
                                e.id,
                            ),
                        ),
                    }),
                });
            });
            var A = a(45242),
                L = a(40013),
                N = a.n(L);
            let R = (0, s.PA)((e) => {
                    let { playlists: t = [] } = e;
                    return (0, i.jsx)("div", {
                        className: N().root,
                        children: (0, i.jsx)("div", {
                            className: N().content,
                            "aria-labelledby": "post-page-header",
                            tabIndex: 0,
                            children: t.map((e) =>
                                (0, i.jsx)(
                                    A.B6,
                                    {
                                        className: N().item,
                                        playlist: e,
                                        contentLinesCount: 3,
                                    },
                                    e.id,
                                ),
                            ),
                        }),
                    });
                }),
                w = (0, s.PA)((e) => {
                    let { promoId: t } = e,
                        { post: a } = (0, m.Pjs)(),
                        s = (0, m.W6M)(),
                        { contentScrollRef: p, setContentScrollRef: v } = (0,
                        m.gKY)();
                    (0, n.useEffect)(
                        () => () => {
                            a.reset();
                        },
                        [a],
                    ),
                        a.isNotFound && (0, l.notFound)(),
                        (0, m.Jzs)(a.isResolved);
                    let P = (0, n.useMemo)(() => {
                        if (a.isLoading) return (0, i.jsx)(S, {});
                        switch (a.promotionType) {
                            case o.Q.ARTISTS:
                                return (0, i.jsx)(D, { artists: a.artists });
                            case o.Q.ALBUMS:
                                return (0, i.jsx)(k, { albums: a.albums });
                            case o.Q.PLAYLISTS:
                                return (0, i.jsx)(R, {
                                    playlists: a.playlists,
                                });
                            default:
                                (0, l.notFound)();
                        }
                    }, [
                        a.albums,
                        a.artists,
                        a.isLoading,
                        a.playlists,
                        a.promotionType,
                    ]);
                    return (t &&
                        a.isNeededToLoad &&
                        (0, n.use)(a.getData({ promoId: t })),
                    a.isSomethingWrong)
                        ? (0, i.jsx)(g.w, {})
                        : (0, i.jsx)(m.nVz, {
                              pageId: m._Q$.POST,
                              children: (0, i.jsx)(h.hO, {
                                  scrollElement: p,
                                  outerTitle: a.title || void 0,
                                  children: (0, i.jsxs)("div", {
                                      className: E().root,
                                      children: [
                                          (0, i.jsx)(y.Y9, {
                                              variant: y.Vw.TEXT,
                                              withForwardControl: !1,
                                              withBackwardControl: s.canBack,
                                              children: a.title
                                                  ? (0, i.jsx)(c.Heading, {
                                                        id: "post-header",
                                                        variant: "h2",
                                                        weight: "bold",
                                                        size: "xl",
                                                        lineClamp: 1,
                                                        children: a.title,
                                                    })
                                                  : (0, i.jsx)(u.Shimmer, {
                                                        className:
                                                            E().shimmerTitle,
                                                        radius: "l",
                                                    }),
                                          }),
                                          (0, i.jsx)(d.N, {
                                              containerClassName: (0, r.$)(
                                                  E().scrollContainer,
                                                  E().important,
                                              ),
                                              className:
                                                  E().scrollableContainer,
                                              ref: v,
                                              children: (0, i.jsx)("div", {
                                                  className: E().container,
                                                  children: P,
                                              }),
                                          }),
                                      ],
                                  }),
                              }),
                          });
                });
        },
        70286: (e, t, a) => {
            "use strict";
            a.d(t, { oN: () => d.TagPage, vV: () => o });
            var i = a(41028),
                r = a(61979),
                s = a(25911),
                l = a(79169),
                n = a(59615);
            let o = i.gK
                .model("TagPage", {
                    title: i.gK.maybe(i.gK.string),
                    errorStatusCode: i.gK.maybeNull(i.gK.number),
                    tagLoadingState: i.gK.enumeration(Object.values(l.GuX)),
                    playlistsLoadingState: i.gK.enumeration(
                        Object.values(l.GuX),
                    ),
                    playlistsData: i.gK.array(
                        i.gK.model({ uid: i.gK.number, kind: i.gK.number }),
                    ),
                    playlists: i.gK.array(i.gK.maybeNull(s.$o)),
                    pager: i.gK.maybeNull(n.jd),
                    alreadyRequestedPages: i.gK.map(i.gK.number),
                    pendingPages: i.gK.map(i.gK.number),
                    requests: i.gK.maybeNull(i.gK.number),
                })
                .views((e) => {
                    let t = {
                        get isNeededToLoad() {
                            return e.tagLoadingState === l.GuX.IDLE;
                        },
                        get isResolved() {
                            return (
                                e.tagLoadingState === l.GuX.RESOLVE &&
                                e.playlistsLoadingState === l.GuX.RESOLVE
                            );
                        },
                        get isNotFound() {
                            let t =
                                e.playlistsLoadingState === l.GuX.RESOLVE &&
                                0 === e.playlists.length;
                            return (
                                ((e.tagLoadingState === l.GuX.REJECT ||
                                    e.playlistsLoadingState === l.GuX.REJECT) &&
                                    (e.errorStatusCode === r.X1.NOT_FOUND ||
                                        e.errorStatusCode ===
                                            r.X1.BAD_REQUEST)) ||
                                t
                            );
                        },
                        get isSomethingWrong() {
                            return (
                                (e.tagLoadingState === l.GuX.REJECT ||
                                    e.playlistsLoadingState === l.GuX.REJECT) &&
                                !t.isNotFound
                            );
                        },
                    };
                    return t;
                })
                .actions((e) => {
                    let t = {
                        getPlaylists: (0, i.L3)(function* (t) {
                            let { page: a = 0, pageSize: n = 20 } = t,
                                {
                                    playlistsResource: o,
                                    modelActionsLogger: d,
                                } = (0, i._$)(e);
                            if (
                                !(
                                    e.tagLoadingState !== l.GuX.RESOLVE ||
                                    (e.playlistsLoadingState ===
                                        l.GuX.PENDING &&
                                        e.pendingPages.has("".concat(a)))
                                ) &&
                                !e.alreadyRequestedPages.has("".concat(a))
                            ) {
                                e.alreadyRequestedPages.set("".concat(a), a);
                                try {
                                    var u;
                                    (e.playlistsLoadingState = l.GuX.PENDING),
                                        e.pendingPages.set("".concat(a), a);
                                    let t = a * n,
                                        r = e.playlistsData.slice(t, t + n),
                                        d = yield o.getPlaylists({
                                            playlistIds: r.map((e) =>
                                                ""
                                                    .concat(e.uid, ":")
                                                    .concat(e.kind),
                                            ),
                                            resumeStream: !1,
                                        });
                                    e.requests =
                                        (null != (u = e.requests) ? u : 0) + 1;
                                    let c = {
                                        page: a,
                                        perPage: n,
                                        total: e.playlistsData.length,
                                    };
                                    0 === e.playlists.length &&
                                        (e.playlists = (0, i.wg)(
                                            Array.from(
                                                { length: c.total },
                                                () => null,
                                            ),
                                        ));
                                    let g = d.playlists.map(s.jX);
                                    (0, l.Iyy)({
                                        items: e.playlists,
                                        mappedRawItems: g,
                                        page: a,
                                        pageSize: n,
                                    }),
                                        (e.pager = c),
                                        e.playlistsLoadingState !==
                                            l.GuX.IDLE &&
                                            (e.playlistsLoadingState =
                                                l.GuX.RESOLVE);
                                } catch (t) {
                                    d.error(t),
                                        t instanceof r.GX &&
                                            (t.statusCode === r.X1.NOT_FOUND ||
                                                t.statusCode ===
                                                    r.X1.BAD_REQUEST) &&
                                            (e.errorStatusCode =
                                                r.X1.NOT_FOUND),
                                        e.playlistsLoadingState !==
                                            l.GuX.IDLE &&
                                            (e.playlistsLoadingState =
                                                l.GuX.REJECT);
                                } finally {
                                    e.pendingPages.delete("".concat(a));
                                }
                            }
                        }),
                        reset() {
                            (e.tagLoadingState = l.GuX.IDLE),
                                (e.playlistsLoadingState = l.GuX.IDLE),
                                e.alreadyRequestedPages.clear(),
                                e.pendingPages.clear(),
                                (e.title = void 0),
                                (e.playlistsData = (0, i.wg)([])),
                                (e.playlists = (0, i.wg)([])),
                                (e.errorStatusCode = null);
                        },
                        getTag: (0, i.L3)(function* (a) {
                            let { id: s, page: n = 0, pageSize: o = 20 } = a,
                                { tagResource: d, modelActionsLogger: u } = (0,
                                i._$)(e);
                            if (e.tagLoadingState !== l.GuX.PENDING)
                                try {
                                    var c;
                                    e.tagLoadingState = l.GuX.PENDING;
                                    let a = yield d.getPlaylistIds({ id: s });
                                    (e.title =
                                        null == (c = a.tag) ? void 0 : c.name),
                                        (e.playlistsData = (0, i.wg)(
                                            a.ids.map((e) => ({
                                                uid: e.uid,
                                                kind: e.kind,
                                            })),
                                        )),
                                        e.tagLoadingState !== l.GuX.IDLE &&
                                            (e.tagLoadingState = l.GuX.RESOLVE),
                                        yield t.getPlaylists({
                                            page: n,
                                            pageSize: o,
                                        });
                                } catch (t) {
                                    u.error(t),
                                        t instanceof r.GX &&
                                            (t.statusCode === r.X1.NOT_FOUND ||
                                                t.statusCode ===
                                                    r.X1.BAD_REQUEST) &&
                                            (e.errorStatusCode =
                                                r.X1.NOT_FOUND),
                                        e.tagLoadingState !== l.GuX.IDLE &&
                                            (e.tagLoadingState = l.GuX.REJECT);
                                }
                        }),
                    };
                    return t;
                });
            a(84936);
            var d = a(99556);
        },
        70512: (e) => {
            e.exports = {
                root: "UgcUploadCenterNotification_root__K_U0z",
                title: "UgcUploadCenterNotification_title__s3yTL",
                link: "UgcUploadCenterNotification_link__NPz6r",
            };
        },
        71016: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { TranslationsProvider: () => l });
            var i = a(33008),
                r = a(43576),
                s = a(79169);
            let l = (e) => {
                let { children: t } = e,
                    {
                        dictionary: a,
                        language: l,
                        defaultLanguage: n,
                    } = (0, s.h6b)(),
                    o = (0, s.Crf)();
                return (0, i.jsx)(r.A, {
                    onError: o,
                    defaultLocale: n,
                    locale: l,
                    messages: a,
                    children: t,
                });
            };
        },
        72321: (e) => {
            e.exports = {
                toastClassName:
                    "NotificationsInitializer_toastClassName__ZVvrd",
                notificationContainer:
                    "NotificationsInitializer_notificationContainer__oe1ot",
            };
        },
        73258: (e, t, a) => {
            "use strict";
            a.d(t, { UgcUploadInitializer: () => v });
            var i = a(97531),
                r = a(66268),
                s = a(79169),
                l = a(33008),
                n = a(73827),
                o = a(18740),
                d = a(96560),
                u = a(18064),
                c = a(77868),
                g = a(70512),
                h = a.n(g),
                m = (function (e) {
                    return (e.ERROR = "error"), (e.SUCCESS = "success"), e;
                })({});
            let y = (e) => {
                let { playlistName: t, url: a, variant: i } = e,
                    s = (0, r.useMemo)(
                        () =>
                            (0, l.jsx)(o.N_, {
                                href: a,
                                className: h().link,
                                children: (0, l.jsx)(c.Caption, {
                                    className: h().title,
                                    variant: "span",
                                    type: "controls",
                                    size: "m",
                                    lineClamp: 1,
                                    children: t,
                                }),
                            }),
                        [t, a],
                    ),
                    n = (0, r.useMemo)(
                        () =>
                            "error" === i
                                ? (0, l.jsx)(c.Caption, {
                                      variant: "div",
                                      type: "controls",
                                      size: "m",
                                      ...(0, u.Am)(
                                          u.S7
                                              .BASE_NOTIFICATION_UGC_TRACK_ERROR_TEXT,
                                      ),
                                      children: (0, l.jsx)(d.A, {
                                          id: "ugc.notification-unknown-error",
                                          values: { playlistName: s },
                                      }),
                                  })
                                : (0, l.jsxs)(c.Caption, {
                                      variant: "div",
                                      type: "controls",
                                      size: "m",
                                      children: [
                                          (0, l.jsx)(d.A, {
                                              id: "ugc.notification-success",
                                              values: { playlistName: s },
                                          }),
                                          ";",
                                      ],
                                  }),
                        [s, i],
                    );
                return (0, l.jsx)(o.$W, { className: h().root, message: n });
            };
            var p = a(38261);
            let v = (0, i.PA)(() => {
                let { ugcUploadCenter: e } = (0, s.Pjs)(),
                    t = (0, r.useRef)(void 0);
                (() => {
                    var e;
                    let {
                            ugcUploadCenter: { notifications: t },
                            playlist: a,
                        } = (0, s.Pjs)(),
                        { notify: i } = (0, s.lkh)(),
                        { formatMessage: d } = (0, n.A)();
                    (0, r.useEffect)(() => {
                        t.showAllNotifications().forEach((e) => {
                            switch (e.type) {
                                case p.u.FILE_TOO_LARGE:
                                    i(
                                        (0, l.jsx)(o.hT, {
                                            error: d({
                                                id: "ugc.notification-too-large-file-error",
                                            }),
                                        }),
                                        { containerId: s.uQT.ERROR },
                                    );
                                    break;
                                case p.u.TOO_MANY_FILES:
                                    i(
                                        (0, l.jsx)(o.hT, {
                                            error: d({
                                                id: "ugc.notification-too-many-files-error",
                                            }),
                                        }),
                                        { containerId: s.uQT.ERROR },
                                    );
                                    break;
                                case p.u.UNKNOWN_ERROR:
                                    i(
                                        (0, l.jsx)(y, {
                                            url: e.playlist.url,
                                            playlistName: e.playlist.title,
                                            variant: m.ERROR,
                                        }),
                                        { containerId: s.uQT.ERROR },
                                    );
                                    break;
                                case p.u.SUCCESS:
                                    var t;
                                    (null == (t = a.meta) ? void 0 : t.kind) !==
                                        e.playlist.kind &&
                                        i(
                                            (0, l.jsx)(y, {
                                                url: e.playlist.url,
                                                playlistName: e.playlist.title,
                                                variant: m.SUCCESS,
                                            }),
                                            { containerId: s.uQT.INFO },
                                        );
                            }
                        });
                    }, [
                        d,
                        t,
                        t.pairs.length,
                        i,
                        null == (e = a.meta) ? void 0 : e.kind,
                    ]);
                })();
                let a = (0, r.useCallback)(() => {
                        e.checkProcessingTracks();
                    }, [e]),
                    i = (0, r.useCallback)(() => {
                        t.current || (t.current = setInterval(a, 2e3));
                    }, [a]),
                    d = (0, r.useCallback)(() => {
                        clearInterval(t.current), (t.current = void 0);
                    }, []);
                (0, r.useEffect)(() => {
                    e.shouldCheckProcessingTracks ? i() : d();
                }, [d, i, e.shouldCheckProcessingTracks]),
                    (0, r.useEffect)(() => () => d(), [d]);
            });
        },
        74259: (e, t, a) => {
            "use strict";
            a.d(t, { uN: () => d.GenresPage, Zt: () => o });
            var i = a(41028),
                r = a(61979),
                s = a(23031),
                l = a(79169),
                n = a(59615);
            let o = i.gK
                .compose(
                    i.gK.model("GenresPageModel", {
                        title: i.gK.maybeNull(i.gK.string),
                        items: i.gK.array(s.Gc),
                        errorStatusCode: i.gK.maybeNull(i.gK.number),
                    }),
                    n.XT,
                )
                .views((e) => ({
                    get isLoading() {
                        return (
                            e.isNeededToLoad || e.loadingState === l.GuX.PENDING
                        );
                    },
                    get isNotFound() {
                        let t = e.isResolved && 0 === e.items.length;
                        return e.errorStatusCode === r.X1.NOT_FOUND || t;
                    },
                }))
                .actions((e) => ({
                    getData: (0, i.L3)(function* (t) {
                        let { landing3Resource: a, modelActionsLogger: n } = (0,
                        i._$)(e);
                        if (e.loadingState !== l.GuX.PENDING)
                            try {
                                e.loadingState = l.GuX.PENDING;
                                let n = (yield a.getMetatags({})).trees.find(
                                    (e) => e.navigationId === t,
                                );
                                if (!n) {
                                    e.errorStatusCode = r.X1.NOT_FOUND;
                                    return;
                                }
                                (e.title = n.title),
                                    (e.items = (0, i.wg)(n.leaves.map(s.kc))),
                                    e.loadingState !== l.GuX.IDLE &&
                                        (e.loadingState = l.GuX.RESOLVE);
                            } catch (t) {
                                n.error(t),
                                    t instanceof r.GX &&
                                        (t.statusCode === r.X1.NOT_FOUND ||
                                            t.statusCode ===
                                                r.X1.BAD_REQUEST) &&
                                        (e.errorStatusCode = r.X1.NOT_FOUND),
                                    e.loadingState !== l.GuX.IDLE &&
                                        (e.loadingState = l.GuX.REJECT);
                            }
                    }),
                    reset() {
                        (e.loadingState = l.GuX.IDLE),
                            (e.title = null),
                            (e.items = (0, i.wg)([])),
                            (e.errorStatusCode = null);
                    },
                }));
            a(52568);
            var d = a(74270);
        },
        74270: (e, t, a) => {
            "use strict";
            a.d(t, { GenresPage: () => p });
            var i = a(33008),
                r = a(97531),
                s = a(17846),
                l = a(66268),
                n = a(57747),
                o = a(77868),
                d = a(83888),
                u = a(64143),
                c = a(23031),
                g = a(79169),
                h = a(18740),
                m = a(89102),
                y = a.n(m);
            let p = (0, r.PA)((e) => {
                let { navigationId: t } = e,
                    { genres: a } = (0, g.Pjs)(),
                    { contentScrollRef: r, setContentScrollRef: m } = (0,
                    g.gKY)(),
                    p = (0, g.W6M)();
                return ((0, l.useEffect)(
                    () => () => {
                        a.reset();
                    },
                    [a, t],
                ),
                a.isNotFound && (0, s.notFound)(),
                (0, g.Jzs)(a.isResolved),
                t && a.isNeededToLoad && (0, l.use)(a.getData(t)),
                a.isRejected)
                    ? (0, i.jsx)(d.w, {})
                    : (0, i.jsxs)(u.hO, {
                          scrollElement: r,
                          outerTitle: a.title,
                          children: [
                              (0, i.jsx)(h.Y9, {
                                  variant: h.Vw.TEXT,
                                  withForwardControl: !1,
                                  withBackwardControl: p.canBack,
                                  children: (0, i.jsx)(o.Heading, {
                                      variant: "h2",
                                      weight: "bold",
                                      size: "xl",
                                      lineClamp: 1,
                                      children: a.title,
                                  }),
                              }),
                              (0, i.jsx)(n.N, {
                                  className: y().root,
                                  containerClassName: y().content,
                                  ref: m,
                                  children: (0, i.jsx)("div", {
                                      className: y().list,
                                      children: a.items.map((e) =>
                                          (0, i.jsx)(
                                              c.G4,
                                              {
                                                  tag: e.tag,
                                                  title: e.title,
                                                  subGenres: e.subGenres,
                                              },
                                              e.tag,
                                          ),
                                      ),
                                  }),
                              }),
                          ],
                      });
            });
        },
        75414: (e, t, a) => {
            "use strict";
            a.d(t, { FavoriteTracksPage: () => d });
            var i = a(33008),
                r = a(97531),
                s = a(66268),
                l = a(79169),
                n = a(35233);
            let o = (0, r.PA)(() => (0, i.jsx)(n.M, {})),
                d = (0, r.PA)(() => {
                    let { favoriteTracks: e } = (0, l.Pjs)(),
                        t = (0, l.ZpR)(e.playlistUrl);
                    if (
                        ((0, s.useEffect)(
                            () => () => {
                                e.reset();
                            },
                            [e],
                        ),
                        (0, s.useEffect)(() => {
                            e.playlistUrl && t();
                        }, [e.playlistUrl, t]),
                        e.isNeededToLoad && (0, s.use)(e.getPlaylistUrl()),
                        e.isRejected)
                    )
                        return (0, i.jsx)(o, {});
                });
        },
        75926: (e, t, a) => {
            "use strict";
            a.d(t, { PostNotFoundPage: () => l });
            var i = a(33008),
                r = a(97531),
                s = a(35233);
            let l = (0, r.PA)(() => (0, i.jsx)(s.M, {}));
        },
        79145: (e, t, a) => {
            "use strict";
            a.d(t, { CommunicationsInitializer: () => l });
            var i = a(97531),
                r = a(66268),
                s = a(79169);
            let l = (0, i.PA)(() => {
                let { user: e, redAlert: t, communication: a } = (0, s.Pjs)();
                (0, r.useEffect)(() => {
                    e.isAuthorized &&
                        Promise.allSettled([a.getData(), t.getData()]);
                }, [t, a, e.isAuthorized]);
            });
        },
        79242: (e, t, a) => {
            "use strict";
            a.d(t, { AdvertProvider: () => u });
            var i = a(33008),
                r = a(97531),
                s = a(66268),
                l = a(53555),
                n = a(71171),
                o = a(79169);
            let d = null,
                u = (0, r.PA)((e) => {
                    let { children: t } = e,
                        {
                            advert: a,
                            experiments: r,
                            user: u,
                            location: c,
                        } = (0, o.Pjs)(),
                        g = (0, o.UlF)();
                    return (!d &&
                        u.isAuthorized &&
                        r.checkExperiment(
                            o.zal.WebNextAudioVideoAdvert,
                            "on",
                        ) &&
                        (d = new o.vaf({
                            logger: g,
                            videoSlotId: n.so.SLOT,
                            videoElementId: n.so.VIDEO,
                        })),
                    (0, s.useEffect)(() => {
                        null == d || d.init(c.tld);
                    }, [c.tld]),
                    (0, s.useEffect)(() => {
                        if (
                            !r.checkExperiment(
                                o.zal.WebNextAudioVideoAdvert,
                                "on",
                            ) ||
                            !u.isAuthorized
                        )
                            return;
                        let e =
                            null == d
                                ? void 0
                                : d.state.isAdvertPlaying.onChange((e) => {
                                      if ((a.setAdvertShown(e), e)) {
                                          var t, i;
                                          a.setType(
                                              (null == d ||
                                              null == (t = d.state.advertData)
                                                  ? void 0
                                                  : t.type) || null,
                                          ),
                                              a.setData(
                                                  (null == d ||
                                                  null ==
                                                      (i = d.state.advertData)
                                                      ? void 0
                                                      : i.data) || null,
                                              );
                                      } else a.reset();
                                  });
                        return () => {
                            null == e || e();
                        };
                    }, [a, r, u.isAuthorized]),
                    (0, s.useEffect)(() => {
                        let e;
                        if (a.isAdvertPlaybackCreated) {
                            var t;
                            e =
                                null == d || null == (t = d.audioAdvertPlayback)
                                    ? void 0
                                    : t.state.playerState.event.onChange(
                                          (e) => {
                                              if (a.isAdvertShown) {
                                                  if (
                                                      (e === l.Iu.END &&
                                                          (a.setAdvertShown(!1),
                                                          null == d ||
                                                              d.state.setDefaultState()),
                                                      e === l.Iu.PLAYING)
                                                  )
                                                      return void a.setAdvertPlaying(
                                                          !0,
                                                      );
                                                  if (
                                                      e === l.Iu.END ||
                                                      e === l.Iu.PAUSED
                                                  )
                                                      return void a.setAdvertPlaying(
                                                          !1,
                                                      );
                                              }
                                          },
                                      );
                        }
                        return () => {
                            null == e || e();
                        };
                    }, [a, a.isAdvertPlaybackCreated]),
                    (0, s.useEffect)(
                        () => () => {
                            a.reset();
                        },
                        [a],
                    ),
                    r.checkExperiment(o.zal.WebNextAudioVideoAdvert, "on") &&
                        u.isAuthorized)
                        ? (0, i.jsx)(o.p8J.Provider, { value: d, children: t })
                        : t;
                });
        },
        80233: (e) => {
            e.exports = {
                root: "KidsEditorialPlaylistsPage_root__HeHqc",
                scrollContainer:
                    "KidsEditorialPlaylistsPage_scrollContainer__Hy6HY",
                important: "KidsEditorialPlaylistsPage_important__283cd",
                footer: "KidsEditorialPlaylistsPage_footer___UaP5",
                item: "KidsEditorialPlaylistsPage_item__0wBk2",
                content: "KidsEditorialPlaylistsPage_content__6wWkP",
            };
        },
        81821: (e, t, a) => {
            "use strict";
            a.d(t, { mK: () => c, mW: () => g });
            var i = a(66268),
                r = a(79169),
                s = a(38025),
                l = a(29318),
                n = a(41028),
                o = a(48509),
                d = a(44078),
                u = a(61744);
            let c = n.gK
                    .model("ContinueListen", {
                        track: n.gK.maybe(d.vj),
                        trackIndex: n.gK.maybe(n.gK.number),
                        contextType: n.gK.maybeNull(
                            n.gK.enumeration(Object.values(o.K)),
                        ),
                        contextId: n.gK.maybeNull(
                            n.gK.union(n.gK.string, n.gK.number),
                        ),
                        albumDuration: n.gK.maybe(n.gK.number),
                        albumStreamProgress: n.gK.optional(u.B9, {
                            endPositionSec: 0,
                        }),
                        trackTempStreamProgress: n.gK.optional(u.B9, {
                            endPositionSec: 0,
                        }),
                    })
                    .actions((e) => ({
                        saveTrack: (t) => {
                            let {
                                contextType: a,
                                contextId: i,
                                track: r,
                                isDefaultTrack: s,
                            } = t;
                            (s && e.track) ||
                                ((e.contextType = a),
                                (e.contextId = i),
                                (e.track = (0, n.wg)((0, l.HO)(r))));
                        },
                        saveTrackIndex: (t) => {
                            e.trackIndex = t;
                        },
                        saveAlbumDuration: (t) => {
                            e.albumDuration = t;
                        },
                    })),
                g = (0, a(97531).PA)(() => {
                    ((e) => {
                        var t;
                        let { sonataState: a, continueListen: l } = (0,
                        r.Pjs)();
                        (0, i.useEffect)(() => {
                            var t, i, r, n, o, d, u, c;
                            if (
                                !e ||
                                (!(null == (t = a.entityMeta)
                                    ? void 0
                                    : t.isPodcast) &&
                                    !(null == (i = a.entityMeta)
                                        ? void 0
                                        : i.isAudiobook))
                            )
                                return;
                            let g = e.state.queueState.index.value;
                            e.state.queueState.order.value.length > 0 &&
                                "number" == typeof g &&
                                l.saveTrackIndex(g);
                            let h =
                                null == (r = e.state.currentContext.value)
                                    ? void 0
                                    : r.data.meta;
                            if (
                                h &&
                                a.contextType &&
                                a.contextId &&
                                (l.saveTrack({
                                    contextType: a.contextType,
                                    contextId: a.contextId,
                                    track: a.entityMeta,
                                }),
                                a.entityMeta.isAudiobook)
                            ) {
                                if ("volumes" in h && h.volumes) {
                                    let e,
                                        t = ((e, t) => {
                                            let a = !0;
                                            return (0, s.A)(e).reduce(
                                                (e, i) => {
                                                    if (!i.durationMs) return e;
                                                    if (i.id === t) {
                                                        var r;
                                                        return (
                                                            (a = !1),
                                                            e +
                                                                ((null ==
                                                                (r =
                                                                    i.streamProgress)
                                                                    ? void 0
                                                                    : r.endPositionSec) ||
                                                                    0)
                                                        );
                                                    }
                                                    return a
                                                        ? e + i.durationMs / 1e3
                                                        : e;
                                                },
                                                0,
                                            );
                                        })(h.volumes, a.entityMeta.id);
                                    "durationSec" in h && (e = h.durationSec),
                                        l.saveAlbumDuration(e),
                                        null ==
                                            (d = l.trackTempStreamProgress) ||
                                            d.updateEndPositionSec(
                                                (null == (o = l.track) ||
                                                null == (n = o.streamProgress)
                                                    ? void 0
                                                    : n.endPositionSec) || 0,
                                            ),
                                        null == (u = l.albumStreamProgress) ||
                                            u.updateEndPositionSec(t);
                                }
                                "listeningFinished" in h &&
                                    (null == (c = l.albumStreamProgress) ||
                                        c.updateEverFinished(
                                            h.listeningFinished || !1,
                                        ));
                            }
                        }, [
                            null == (t = a.entityMeta) ? void 0 : t.id,
                            a.entityMeta,
                            a.contextType,
                            a.contextId,
                            e,
                            l,
                        ]);
                    })((0, r.eGp)());
                });
        },
        83001: (e, t, a) => {
            "use strict";
            a.d(t, { uA: () => o.PlaylistPersonalPage, Hj: () => n });
            var i = a(41028),
                r = a(61979),
                s = a(79169),
                l = a(59615);
            let n = i.gK
                .compose(
                    i.gK.model("PlaylistPersonalPage", {
                        errorStatusCode: i.gK.maybeNull(i.gK.number),
                        playlistUuid: i.gK.maybe(i.gK.string),
                        isReady: i.gK.optional(i.gK.boolean, !1),
                        dummyCoverUrl: i.gK.maybe(i.gK.string),
                        dummyDescription: i.gK.maybe(i.gK.string),
                        title: i.gK.maybe(i.gK.string),
                    }),
                    l.XT,
                )
                .views((e) => ({
                    getUrl(t) {
                        if (!e.playlistUuid) return "";
                        let { href: a } = (0, s.uvd)(
                            "/playlists/:playlistUuid",
                            {
                                params: { playlistUuid: e.playlistUuid },
                                query: t,
                            },
                        );
                        return a;
                    },
                    get url() {
                        if (!e.playlistUuid) return "";
                        let { href: t } = (0, s.uvd)(
                            "/playlists/:playlistUuid",
                            { params: { playlistUuid: e.playlistUuid } },
                        );
                        return t;
                    },
                    get isNotFound() {
                        let t =
                            e.errorStatusCode === r.X1.NOT_FOUND ||
                            e.errorStatusCode === r.X1.BAD_REQUEST;
                        return e.loadingState === s.GuX.REJECT && t;
                    },
                }))
                .actions((e) => ({
                    getPlaylistPersonalDetails: (0, i.L3)(function* (t) {
                        if (!(0, i._n)(e)) return;
                        let { playlistsResource: a, modelActionsLogger: l } =
                            (0, i._$)(e);
                        if (e.loadingState !== s.GuX.PENDING)
                            try {
                                var n, o;
                                e.loadingState = s.GuX.PENDING;
                                let i = yield a.getPlaylistPersonal({
                                    playlistId: t,
                                });
                                if (
                                    (null == (n = i.error)
                                        ? void 0
                                        : n.name) === "no-such-playlist"
                                ) {
                                    (e.errorStatusCode = r.X1.NOT_FOUND),
                                        (e.loadingState = s.GuX.REJECT);
                                    return;
                                }
                                (e.isReady = i.ready),
                                    (e.playlistUuid = i.data.playlistUuid),
                                    (e.dummyCoverUrl =
                                        null == (o = i.data.dummyCover)
                                            ? void 0
                                            : o.uri),
                                    (e.dummyDescription =
                                        i.data.dummyDescription),
                                    (e.title = i.data.title),
                                    e.loadingState !== s.GuX.IDLE &&
                                        (e.loadingState = s.GuX.RESOLVE);
                            } catch (t) {
                                l.error(t),
                                    t instanceof r.GX &&
                                        (t.statusCode === r.X1.NOT_FOUND ||
                                            t.statusCode ===
                                                r.X1.BAD_REQUEST) &&
                                        (e.errorStatusCode = r.X1.NOT_FOUND),
                                    e.loadingState !== s.GuX.IDLE &&
                                        (e.loadingState = s.GuX.REJECT);
                            }
                    }),
                    reset() {
                        (e.loadingState = s.GuX.IDLE),
                            (e.errorStatusCode = null),
                            (e.isReady = !1),
                            (e.playlistUuid = void 0),
                            (e.dummyCoverUrl = void 0),
                            (e.dummyDescription = void 0),
                            (e.title = void 0);
                    },
                }));
            a(49077), a(33008), a(35233);
            var o = a(95985);
        },
        83673: (e) => {
            e.exports = {
                root: "Genre_root__80dlk",
                link: "Genre_link__Wewaq",
                linkTitle: "Genre_linkTitle__ORAsw",
                list: "Genre_list__C2Pxf",
            };
        },
        84031: (e, t, a) => {
            "use strict";
            a.d(t, { KidsNotFoundPage: () => o });
            var i = a(33008),
                r = a(97531),
                s = a(66268),
                l = a(35233),
                n = a(79169);
            let o = (0, r.PA)(() => {
                let { kids: e } = (0, n.Pjs)();
                return (
                    (0, s.useEffect)(
                        () => () => {
                            e.landing.reset();
                        },
                        [e.landing],
                    ),
                    (0, i.jsx)(l.M, {})
                );
            });
        },
        84706: (e, t, a) => {
            "use strict";
            a.d(t, {
                SM: () => I.PlaylistPage,
                Pn: () => f,
                Cm: () => k.PlaylistShimmersPage,
            }),
                a(48708);
            var i = a(41028),
                r = a(30293),
                s = a(79169),
                l = (function (e) {
                    return (
                        (e.MAJOR = "Major"),
                        (e.NAME = "Название"),
                        (e.ARTISCS = "Исполнители"),
                        (e.LINK = "Ссылка"),
                        (e.ALBUM_ID = "albumId"),
                        (e.TRACK_ID = "trackId"),
                        e
                    );
                })({}),
                n = (function (e) {
                    return (
                        (e.MAJOR = "major"),
                        (e.NAME = "name"),
                        (e.ARTISCS = "artists"),
                        (e.LINK = "link"),
                        (e.ALBUM_ID = "albumId"),
                        (e.TRACK_ID = "trackId"),
                        e
                    );
                })({});
            let o = i.gK
                .model("EditorFeature", {
                    shouldShowMajor: i.gK.boolean,
                    shouldShowGenre: i.gK.boolean,
                    shouldShowDuplicate: i.gK.boolean,
                    colorMajorMap: i.gK.map(i.gK.string),
                    duplicate: i.gK.map(i.gK.number),
                })
                .views((e) => {
                    let t = {
                        getNumberGroupTrackDuplicated(t) {
                            let { experiments: a } = (0, i.Zn)(e);
                            if (
                                t &&
                                a.checkExperiment(
                                    s.zal.WebEditorsFeatures,
                                    "on",
                                )
                            )
                                return e.duplicate.get(String(t.id));
                        },
                        shouldHighlightDublicatedTrack: (a) =>
                            !!(
                                e.shouldShowDuplicate &&
                                t.getNumberGroupTrackDuplicated(a)
                            ),
                        get sheetDataPlaylist() {
                            var a, o;
                            let { location: t, playlist: s } = (0, i.Zn)(e),
                                d = "https://"
                                    .concat(t.host, ".")
                                    .concat(t.tld),
                                u = {
                                    sheet: "Playlist",
                                    columns: [
                                        { label: l.MAJOR, value: n.MAJOR },
                                        { label: l.NAME, value: n.NAME },
                                        { label: l.ARTISCS, value: n.ARTISCS },
                                        { label: l.LINK, value: n.LINK },
                                        {
                                            label: l.ALBUM_ID,
                                            value: n.ALBUM_ID,
                                        },
                                        {
                                            label: l.TRACK_ID,
                                            value: n.TRACK_ID,
                                        },
                                    ],
                                    content: s.items
                                        .filter((e) => e.data)
                                        .map((e) => {
                                            var t,
                                                a,
                                                i,
                                                s,
                                                l,
                                                n,
                                                o,
                                                u,
                                                c,
                                                g,
                                                h,
                                                m,
                                                y;
                                            let { href: p } = (0,
                                                r.getLinkAttributesBase)(
                                                    null !=
                                                        (u =
                                                            null == (t = e.data)
                                                                ? void 0
                                                                : t.url)
                                                        ? u
                                                        : "",
                                                    { options: { host: d } },
                                                ),
                                                v = (
                                                    null == (a = e.data)
                                                        ? void 0
                                                        : a.url
                                                )
                                                    ? p
                                                    : "";
                                            return {
                                                major:
                                                    null !=
                                                    (c =
                                                        null == (s = e.data) ||
                                                        null == (i = s.major)
                                                            ? void 0
                                                            : i.name)
                                                        ? c
                                                        : "",
                                                name:
                                                    null !=
                                                    (g =
                                                        null == (l = e.data)
                                                            ? void 0
                                                            : l.title)
                                                        ? g
                                                        : "",
                                                artists:
                                                    null !=
                                                    (h =
                                                        null == (n = e.data)
                                                            ? void 0
                                                            : n.artists
                                                                  .map(
                                                                      (e) =>
                                                                          e.name,
                                                                  )
                                                                  .join(", "))
                                                        ? h
                                                        : "",
                                                link: v,
                                                albumId:
                                                    null != (m = e.albumId)
                                                        ? m
                                                        : "",
                                                trackId:
                                                    null !=
                                                    (y =
                                                        null == (o = e.data)
                                                            ? void 0
                                                            : o.id)
                                                        ? y
                                                        : "",
                                            };
                                        }),
                                };
                            return {
                                data: u,
                                settings: {
                                    fileName:
                                        (null == (a = s.meta)
                                            ? void 0
                                            : a.uid) &&
                                        (null == (o = s.meta) ? void 0 : o.kind)
                                            ? "%"
                                                  .concat(s.meta.uid, "%_%")
                                                  .concat(
                                                      s.meta.kind,
                                                      "%_to_text",
                                                  )
                                            : "to_text",
                                },
                            };
                        },
                    };
                    return t;
                })
                .actions((e) => ({
                    exportToExcel: (0, i.L3)(function* () {
                        let { modelActionsLogger: t } = (0, i._$)(e);
                        try {
                            let t = yield Promise.all([
                                    a.e(714),
                                    a.e(8473),
                                    a.e(3592),
                                ]).then(a.t.bind(a, 54540, 23)),
                                { data: i, settings: r } = e.sheetDataPlaylist;
                            if (0 === i.content.length) return s.FlZ.ERROR;
                            return (
                                yield new Promise((e) => {
                                    t.default([i], r, () => e());
                                }),
                                s.FlZ.OK
                            );
                        } catch (e) {
                            return t.error(e), s.FlZ.ERROR;
                        }
                    }),
                    getAllPlaylistItems: (0, i.L3)(function* (t) {
                        let { batchSize: a } = t,
                            { playlist: r } = (0, i.Zn)(e),
                            s = r.items.length - 1;
                        for (let e = 0; e < s; e += a)
                            yield r.getTracksByRange({
                                startIndex: e,
                                endIndex: Math.min(e + a, s),
                            });
                    }),
                    getColorForMajor(t) {
                        let a = e.colorMajorMap.get(t);
                        if (a) return a;
                        let i = (0, s.KkH)(t),
                            r = "hsl(".concat(i, ", 50%, 50%)");
                        return e.colorMajorMap.set(t, r), r;
                    },
                    getDuplicates(t) {
                        let a = new Map();
                        t.forEach((e) => {
                            let t = a.get(e.id) || 0;
                            a.set(e.id, t + 1);
                        });
                        let i = 1;
                        a.forEach((t, a) => {
                            t > 1 && (e.duplicate.set(String(a), i), i++);
                        });
                    },
                    toggleShouldShowMajor() {
                        e.shouldShowMajor = !e.shouldShowMajor;
                    },
                    toggleShouldShowGenre() {
                        e.shouldShowGenre = !e.shouldShowGenre;
                    },
                    toggleShouldShowDuplicate() {
                        e.shouldShowDuplicate = !e.shouldShowDuplicate;
                    },
                    reset() {
                        (e.shouldShowDuplicate = !1),
                            (e.shouldShowGenre = !1),
                            (e.shouldShowMajor = !1),
                            (e.colorMajorMap = (0, i.wg)({})),
                            (e.duplicate = (0, i.wg)({}));
                    },
                }));
            var d = a(29318),
                u = a(61979),
                c = a(73508),
                g = a(46369),
                h = a(45242),
                m = a(44078),
                y = a(25911),
                p = a(59615),
                v = a(2865);
            let S = (e) => e.map((e) => (0, v.li)(e.id, e.albumId || void 0)),
                P = (e) => {
                    var t, a, r;
                    let l = null == (t = e.tracks) ? void 0 : t.map(g.Qy),
                        n = (null == (a = e.tracks) ? void 0 : a.length)
                            ? null == (r = e.tracks)
                                ? void 0
                                : r.map((e, t) =>
                                      ((e, t) => {
                                          let [a, r] = e.split(":");
                                          return (0, i.wg)({
                                              id: a || "",
                                              albumId: r || "",
                                              key: "".concat(a, "-").concat(t),
                                              data: null,
                                              loadingState: s.GuX.IDLE,
                                          });
                                      })(e, t),
                                  )
                            : [];
                    return {
                        id: e.id,
                        name: e.name,
                        tracks: (0, i.wg)(n),
                        unloadedTracks: (0, i.wg)(l),
                    };
                },
                E = i.gK
                    .compose(
                        i.gK.model("PlaylistPageFilters", {
                            items: i.gK.maybeNull(i.gK.array(g.S9)),
                            activeFilter: i.gK.maybe(i.gK.string),
                            activeFilterName: i.gK.maybeNull(i.gK.string),
                            shouldSendEventOnTabOpened: i.gK.boolean,
                            shouldSendEventOnTabLoaded: i.gK.boolean,
                        }),
                        p.XT,
                        p.pl,
                    )
                    .views((e) => {
                        let t = {
                            get isShimmerVisible() {
                                return e.isRejected || e.isLoading;
                            },
                            get activeFilterIndex() {
                                var a;
                                let t =
                                    null == (a = e.items)
                                        ? void 0
                                        : a.findIndex(
                                              (t) => t.id === e.activeFilter,
                                          );
                                return t && t > -1 ? t : 0;
                            },
                            get analyticsParamsActiveFilterIndex() {
                                return t.activeFilterIndex + 1;
                            },
                        };
                        return t;
                    })
                    .actions((e) => {
                        let t = {
                            getFilters: (0, i.L3)(function* () {
                                var a, r;
                                let {
                                        filtersResource: l,
                                        modelActionsLogger: n,
                                    } = (0, i._$)(e),
                                    { sonataState: o, playlist: d } = (0, i.Zn)(
                                        e,
                                    );
                                if (
                                    e.isLoading ||
                                    !(null == (a = d.items) ? void 0 : a.length)
                                )
                                    return;
                                let u =
                                    d.items.map((e) =>
                                        String((0, c.V)(e.id, e.albumId)),
                                    ) || [];
                                try {
                                    e.loadingState = s.GuX.PENDING;
                                    let a = yield l.getTracksFilters({
                                        trackIds: u,
                                    });
                                    (e.items = (0, i.wg)(
                                        ((e) => {
                                            let t = e.filters.map(P);
                                            if (t.length < 3) return [];
                                            let a = t.find(
                                                (e) => e.id === g.Q1.ALL,
                                            );
                                            if (!a) return [];
                                            let i = t.filter(
                                                (e) => e.tracks.length >= 8,
                                            );
                                            return i.length < 2
                                                ? []
                                                : [a].concat(i.slice(0, 7));
                                        })(a),
                                    )),
                                        t.setActiveFilter(o.playlistFilter),
                                        t.getFilterName(
                                            o.playlistFilter || g.Q1.ALL,
                                        );
                                    let n =
                                        null == (r = e.items)
                                            ? void 0
                                            : r.find(
                                                  (t) =>
                                                      t.id === e.activeFilter,
                                              );
                                    n &&
                                        (d.setItems(n.tracks),
                                        o.setUnloadedEntitiesData(S(d.items))),
                                        (e.loadingState = s.GuX.RESOLVE);
                                } catch (t) {
                                    n.error(t), (e.loadingState = s.GuX.REJECT);
                                }
                            }),
                            getFilterName: (0, i.L3)(function* (t) {
                                let {
                                    filtersResource: a,
                                    modelActionsLogger: r,
                                } = (0, i._$)(e);
                                try {
                                    e.activeFilterName = (yield a.getFilterName(
                                        { filterId: t },
                                    )).name;
                                } catch (e) {
                                    r.error(e);
                                }
                            }),
                            handleFilterClick(a) {
                                if (!(0, i._n)(e)) return;
                                let { sonataState: r, playlist: s } = (0, i.Zn)(
                                    e,
                                );
                                t.setActiveFilter(a.id),
                                    t.getFilterName(a.id),
                                    s.setItems(
                                        e.activeFilter
                                            ? a.tracks
                                            : s.initialItems,
                                    ),
                                    r.setUnloadedEntitiesData(S(s.items)),
                                    t.setShouldSendEventOnTabOpened(!0);
                            },
                            setActiveFilter(t) {
                                t !== g.Q1.ALL
                                    ? (e.activeFilter = t)
                                    : (e.activeFilter = void 0);
                            },
                            setShouldSendEventOnTabOpened(t) {
                                e.shouldSendEventOnTabOpened = t;
                            },
                            setShouldSendEventOnTabLoaded(t) {
                                e.shouldSendEventOnTabLoaded = t;
                            },
                            reset() {
                                e.destroyItems([e.items]),
                                    (e.loadingState = s.GuX.IDLE),
                                    (e.activeFilter = void 0),
                                    (e.activeFilterName = null),
                                    (e.shouldSendEventOnTabOpened = !0),
                                    (e.shouldSendEventOnTabLoaded = !0);
                            },
                        };
                        return t;
                    }),
                b = i.gK
                    .compose(
                        i.gK.model("PlaylistPageSearch", {
                            errorStatusCode: i.gK.maybeNull(i.gK.number),
                            text: i.gK.string,
                            playlistTrackIds: i.gK.maybeNull(
                                i.gK.array(i.gK.string),
                            ),
                            suggestedTrackIds: i.gK.maybeNull(
                                i.gK.array(i.gK.string),
                            ),
                            additionTrackInProggress: i.gK.maybeNull(
                                i.gK.string,
                            ),
                            tracks: i.gK.maybeNull(i.gK.array(m.vj)),
                            isFocused: i.gK.optional(i.gK.boolean, !1),
                        }),
                        p.XT,
                    )
                    .views((e) => ({
                        get isLoading() {
                            return (
                                e.isNeededToLoad ||
                                e.loadingState === s.GuX.PENDING
                            );
                        },
                        get hasText() {
                            return !!e.text.length;
                        },
                        get suggestedTracks() {
                            var t;
                            return null == (t = e.suggestedTrackIds)
                                ? void 0
                                : t.map((t) => {
                                      var a;
                                      return (
                                          (null == (a = e.tracks)
                                              ? void 0
                                              : a.find((e) => e.id === t)) ||
                                          null
                                      );
                                  });
                        },
                        get playlistTracks() {
                            let t = [...(e.playlistTrackIds || [])];
                            return (
                                e.additionTrackInProggress &&
                                    t.unshift(e.additionTrackInProggress),
                                null == t
                                    ? void 0
                                    : t.map((t) => {
                                          var a;
                                          return (
                                              (null == (a = e.tracks)
                                                  ? void 0
                                                  : a.find((e) => {
                                                        var a;
                                                        return (
                                                            ((null ==
                                                            (a = e.mainAlbum)
                                                                ? void 0
                                                                : a.id) &&
                                                            t.includes(":")
                                                                ? ""
                                                                      .concat(
                                                                          e.id,
                                                                          ":",
                                                                      )
                                                                      .concat(
                                                                          e
                                                                              .mainAlbum
                                                                              .id,
                                                                      )
                                                                : e.id) === t
                                                        );
                                                    })) || null
                                          );
                                      })
                            );
                        },
                    }))
                    .actions((e) => {
                        let t = {
                            getTracksMeta: (0, i.L3)(function* () {
                                let {
                                        tracksResource: t,
                                        modelActionsLogger: a,
                                    } = (0, i._$)(e),
                                    r = [...(e.playlistTrackIds || [])].concat(
                                        e.suggestedTrackIds || [],
                                    );
                                try {
                                    let a = yield t.getTracksMeta({
                                        trackIds: r,
                                        removeDuplicates: !0,
                                        withProgress: !0,
                                    });
                                    (e.tracks = (0, i.wg)(
                                        null == a
                                            ? void 0
                                            : a.map((e) => (0, m.vU)(e)),
                                    )),
                                        e.loadingState !== s.GuX.IDLE &&
                                            (e.loadingState = s.GuX.RESOLVE);
                                } catch (e) {
                                    a.error(e);
                                }
                                return null;
                            }),
                            getTracks: (0, i.L3)(function* (a) {
                                let { uid: r, kind: l } = a,
                                    {
                                        searchPlaylistResource: n,
                                        modelActionsLogger: o,
                                    } = (0, i._$)(e);
                                if (
                                    e.loadingState === s.GuX.PENDING ||
                                    !e.hasText ||
                                    !(0, i._n)(e)
                                )
                                    return;
                                let { playlist: d } = (0, i.Zn)(e);
                                try {
                                    var c, g;
                                    let a;
                                    e.loadingState = s.GuX.PENDING;
                                    let {
                                            playlistTrackIds: o = [],
                                            suggestedTrackIds: u = [],
                                        } = yield n.getTrackIds({
                                            uid: r,
                                            kind: l,
                                            part: e.text,
                                        }),
                                        h =
                                            ((a = d.items),
                                            o.map((e) => {
                                                let t = a.find(
                                                    (t) => String(t.id) === e,
                                                );
                                                return (
                                                    null == t
                                                        ? void 0
                                                        : t.albumId
                                                )
                                                    ? ""
                                                          .concat(e, ":")
                                                          .concat(t.albumId)
                                                    : e;
                                            }));
                                    (e.playlistTrackIds = (0, i.wg)(h)),
                                        (e.suggestedTrackIds = (0, i.wg)(u)),
                                        ((null == (c = e.playlistTrackIds)
                                            ? void 0
                                            : c.length) || 0) +
                                            ((null == (g = e.suggestedTrackIds)
                                                ? void 0
                                                : g.length) || 0) >
                                        0
                                            ? t.getTracksMeta()
                                            : (e.loadingState = s.GuX.RESOLVE);
                                } catch (t) {
                                    o.error(t),
                                        t instanceof u.GX &&
                                            (t.statusCode === u.X1.NOT_FOUND ||
                                                t.statusCode ===
                                                    u.X1.BAD_REQUEST) &&
                                            (e.errorStatusCode =
                                                u.X1.NOT_FOUND),
                                        e.loadingState !== s.GuX.IDLE &&
                                            (e.loadingState = s.GuX.REJECT);
                                }
                            }),
                            setText(t) {
                                e.text = t;
                            },
                            setIdleState() {
                                e.loadingState = s.GuX.IDLE;
                            },
                            setAdditionTrackAnimation(t) {
                                e.additionTrackInProggress = t;
                            },
                            setFocus() {
                                e.isFocused = !0;
                            },
                            removeFocus() {
                                e.isFocused = !1;
                            },
                            replaceAdditionTrackInProggress() {
                                if (e.additionTrackInProggress) {
                                    var t, a;
                                    null == (t = e.playlistTrackIds) ||
                                        t.unshift(e.additionTrackInProggress),
                                        (e.suggestedTrackIds = (0, i.wg)(
                                            null == (a = e.suggestedTrackIds)
                                                ? void 0
                                                : a.filter(
                                                      (t) =>
                                                          t !==
                                                          e.additionTrackInProggress,
                                                  ),
                                        )),
                                        (e.additionTrackInProggress = null);
                                }
                            },
                            resetAdditionTrackAnimation() {
                                e.additionTrackInProggress = null;
                            },
                            reset() {
                                (e.playlistTrackIds = null),
                                    (e.suggestedTrackIds = null),
                                    (e.additionTrackInProggress = null),
                                    (e.tracks = null),
                                    (e.loadingState = s.GuX.IDLE),
                                    (e.isFocused = !1);
                            },
                        };
                        return t;
                    }),
                f = i.gK
                    .compose(
                        i.gK.model("PlaylistPage", {
                            uuid: i.gK.maybeNull(i.gK.string),
                            meta: i.gK.maybeNull(h.BL),
                            items: i.gK.array(g.PZ),
                            errorStatusCode: i.gK.maybeNull(i.gK.number),
                            similarPlaylists: i.gK.array(h.IP),
                            initialItems: i.gK.array(g.PZ),
                            shouldShowTrailerOnboarding: i.gK.maybeNull(
                                i.gK.boolean,
                            ),
                            editorFeature: o,
                            search: b,
                            filters: E,
                        }),
                        p.pl,
                        p.XT,
                    )
                    .views((e) => {
                        let t = {
                            getUrl(t) {
                                if (!e.uuid) return "";
                                let { href: a } = (0, s.uvd)(
                                    "/playlists/:playlistUuid",
                                    {
                                        params: { playlistUuid: e.uuid },
                                        query: t,
                                    },
                                );
                                return a;
                            },
                            get isLoading() {
                                return (
                                    e.isNeededToLoad ||
                                    e.loadingState === s.GuX.PENDING
                                );
                            },
                            get isDisabled() {
                                var a;
                                return (
                                    e.isResolved &&
                                    (0 === e.items.length ||
                                        !(null == (a = e.meta)
                                            ? void 0
                                            : a.isAvailable))
                                );
                            },
                            get isNotFound() {
                                return (
                                    e.isRejected &&
                                    e.errorStatusCode === u.X1.NOT_FOUND
                                );
                            },
                            get hasSimilarPlaylists() {
                                return (
                                    t.isLoading || e.similarPlaylists.length > 0
                                );
                            },
                            get isEmptyPlaylist() {
                                return e.isResolved && 0 === e.items.length;
                            },
                            get contextMeta() {
                                var r, l, n, o, d, g, h, m, p, v;
                                return {
                                    isAvailable:
                                        null == (r = e.meta)
                                            ? void 0
                                            : r.isAvailable,
                                    id: e.meta.id,
                                    uid: null == (l = e.meta) ? void 0 : l.uid,
                                    uuid: e.meta.uuid,
                                    kind:
                                        null == (n = e.meta) ? void 0 : n.kind,
                                    title:
                                        null == (o = e.meta) ? void 0 : o.title,
                                    coverUri:
                                        null == (d = e.meta)
                                            ? void 0
                                            : d.coverUri,
                                    likesCount:
                                        null == (g = e.meta)
                                            ? void 0
                                            : g.likesCount,
                                    averageColor:
                                        null == (h = e.meta)
                                            ? void 0
                                            : h.averageColor,
                                    owner:
                                        null == (m = e.meta) ? void 0 : m.owner,
                                    description:
                                        null == (p = e.meta)
                                            ? void 0
                                            : p.description,
                                    modified:
                                        null == (v = e.meta)
                                            ? void 0
                                            : v.modified,
                                };
                            },
                            get isDragAndDropEnabled() {
                                var S;
                                if (!(0, i._n)(e)) return !1;
                                let { ugcUploadCenter: t } = (0, i.Zn)(e);
                                return !!(
                                    (null == (S = e.meta)
                                        ? void 0
                                        : S.canUserChange) &&
                                    (e.items.length > 1 ||
                                        t.getUploadingTracksByPlaylistKind(
                                            e.meta.kind,
                                        ).length > 0)
                                );
                            },
                            get itemsKeys() {
                                return e.items.map((e) => e.key);
                            },
                            get isFavouritePlaylist() {
                                var P;
                                return (
                                    (null == (P = e.meta) ? void 0 : P.kind) ===
                                    y.ji.LIKE
                                );
                            },
                            get enableVariousAutoFlow() {
                                return !!e.filters.activeFilter;
                            },
                            get trackIds() {
                                return e.initialItems.map((e) =>
                                    String((0, c.V)(e.id, e.albumId)),
                                );
                            },
                            get isRewind2024Playlist() {
                                var E;
                                return (
                                    (null == (E = e.meta)
                                        ? void 0
                                        : E.generatedPlaylistType) ===
                                    "rewind2024"
                                );
                            },
                            get areAllTracksUploaded() {
                                return e.items.every(
                                    (e) => e.loadingState === s.GuX.RESOLVE,
                                );
                            },
                            get shouldShowEmptyBlock() {
                                var b, f;
                                if (!(0, i._n)(e)) return !1;
                                let { ugcUploadCenter: a } = (0, i.Zn)(e),
                                    r = !!(null == (b = e.meta)
                                        ? void 0
                                        : b.isOwnPlaylist),
                                    s = !!(
                                        (null == (f = e.meta)
                                            ? void 0
                                            : f.kind) &&
                                        a.getUploadingTracksByPlaylistKind(
                                            e.meta.kind,
                                        ).length
                                    ),
                                    l = !!e.search.hasText;
                                return t.isEmptyPlaylist && r && !s && !l;
                            },
                            get virtualListItemsCount() {
                                var I, k;
                                if (e.search.hasText) return 0;
                                return null !=
                                    (k =
                                        null == (I = e.items)
                                            ? void 0
                                            : I.length)
                                    ? k
                                    : 0;
                            },
                            get isFiltersAvailable() {
                                var _;
                                return !!(
                                    t.isFavouritePlaylist &&
                                    (null == (_ = e.meta)
                                        ? void 0
                                        : _.isOwnPlaylist)
                                );
                            },
                            get analyticsParams() {
                                return {
                                    objectId: e.uuid || void 0,
                                    tabId: e.filters.activeFilter,
                                    tabPos: e.filters
                                        .analyticsParamsActiveFilterIndex,
                                };
                            },
                        };
                        return t;
                    })
                    .actions((e) => {
                        let t = {
                            getTracksByRange: (0, i.L3)(function* (t) {
                                var a, r;
                                let { startIndex: l, endIndex: n } = t,
                                    {
                                        tracksResource: o,
                                        modelActionsLogger: d,
                                    } = (0, i._$)(e);
                                if (
                                    !(null == (a = e.meta) ? void 0 : a.uid) ||
                                    !(null == (r = e.meta) ? void 0 : r.kind)
                                )
                                    return null;
                                (l = Math.max(0, l)),
                                    (n = Math.min(n, e.items.length));
                                let u = ((e, t) => {
                                    let { startIndex: a, endIndex: i } = t,
                                        r = [];
                                    for (let t = a; t <= i; t++) {
                                        var l, n;
                                        ((null == (l = e[t])
                                            ? void 0
                                            : l.loadingState) === s.GuX.IDLE ||
                                            (null == (n = e[t])
                                                ? void 0
                                                : n.loadingState) ===
                                                s.GuX.REJECT) &&
                                            r.push(t);
                                    }
                                    return r;
                                })(e.items, { startIndex: l, endIndex: n });
                                try {
                                    let t,
                                        a =
                                            ((t = e.items),
                                            u.map((e) => {
                                                let a = t[e];
                                                return (
                                                    null == a
                                                        ? void 0
                                                        : a.albumId
                                                )
                                                    ? ""
                                                          .concat(a.id, ":")
                                                          .concat(a.albumId)
                                                    : String(
                                                          null == a
                                                              ? void 0
                                                              : a.id,
                                                      );
                                            }));
                                    if (!a.length) return null;
                                    u.forEach((t) => {
                                        let a = e.items[t];
                                        a && (a.loadingState = s.GuX.PENDING);
                                    });
                                    let i = yield o.getTracksMeta({
                                        trackIds: a,
                                        withProgress: !0,
                                    });
                                    u.forEach((t, a) => {
                                        let r = null == i ? void 0 : i[a];
                                        if (e.items[t] && r) {
                                            var l, n;
                                            e.items[t] = {
                                                id: r.id,
                                                albumId:
                                                    (null == (n = r.albums) ||
                                                    null == (l = n[0])
                                                        ? void 0
                                                        : l.id) || null,
                                                key: ""
                                                    .concat(r.id, "-")
                                                    .concat(t),
                                                data: (0, m.vU)(r),
                                                loadingState: s.GuX.RESOLVE,
                                            };
                                        }
                                    });
                                } catch (t) {
                                    d.error(t),
                                        u.forEach((t) => {
                                            let a = e.items[t];
                                            a &&
                                                (a.loadingState = s.GuX.REJECT);
                                        });
                                }
                                return null;
                            }),
                            updateData: (0, i.L3)(function* (a) {
                                var r;
                                if (
                                    (null == a ? void 0 : a.error) ===
                                    "not-found"
                                )
                                    return (
                                        (e.errorStatusCode = u.X1.NOT_FOUND),
                                        (e.loadingState = s.GuX.REJECT),
                                        null
                                    );
                                (e.similarPlaylists = (0, i.wg)(
                                    null == (r = a.similarPlaylists)
                                        ? void 0
                                        : r.map(h.Ew),
                                )),
                                    (e.meta = (0, h.ZC)(a)),
                                    (e.items = (0, i.wg)(
                                        a.tracks.map((e, t) => ({
                                            id: String(e.id),
                                            albumId: e.albumId || null,
                                            key: "".concat(e.id, "-").concat(t),
                                            loadingState: s.GuX.IDLE,
                                        })),
                                    )),
                                    (e.initialItems = (0, d.HO)(e.items));
                                let {
                                    sonataState: l,
                                    playlist: n,
                                    experiments: o,
                                } = (0, i.Zn)(e);
                                return (
                                    l.setUnloadedEntitiesData(S(e.items)),
                                    (null == o
                                        ? void 0
                                        : o.checkExperiment(
                                              s.zal.WebEditorsFeatures,
                                              "on",
                                          )) &&
                                        n.editorFeature.getDuplicates(e.items),
                                    yield t.getTracksByRange({
                                        startIndex: 0,
                                        endIndex: 10,
                                    })
                                );
                            }),
                            getPlaylistByUserIdAndKind: (0, i.L3)(
                                function* (a) {
                                    let {
                                            userId: r,
                                            playlistKind: l,
                                            resumeStream: n = !1,
                                            trackMetaType: o,
                                            preloadedPlaylist: d,
                                        } = a,
                                        {
                                            usersResource: c,
                                            modelActionsLogger: g,
                                        } = (0, i._$)(e);
                                    if (e.loadingState !== s.GuX.PENDING)
                                        try {
                                            e.loadingState = s.GuX.PENDING;
                                            let a = d;
                                            if (
                                                (a ||
                                                    (a =
                                                        yield c.getPlaylistWithTracksIds(
                                                            {
                                                                userId: r,
                                                                playlistKind: l,
                                                                resumeStream: n,
                                                                trackMetaType:
                                                                    o,
                                                            },
                                                        )),
                                                (e.uuid =
                                                    null == a
                                                        ? void 0
                                                        : a.playlistUuid),
                                                "string" !=
                                                    typeof a.playlistUuid)
                                            ) {
                                                (e.errorStatusCode =
                                                    u.X1.NOT_FOUND),
                                                    (e.loadingState =
                                                        s.GuX.REJECT);
                                                return;
                                            }
                                            yield t.updateData(a),
                                                (e.loadingState =
                                                    s.GuX.RESOLVE);
                                        } catch (t) {
                                            g.error(t),
                                                t instanceof u.GX &&
                                                    (t.statusCode ===
                                                        u.X1.NOT_FOUND ||
                                                        t.statusCode ===
                                                            u.X1.BAD_REQUEST) &&
                                                    (e.errorStatusCode =
                                                        u.X1.NOT_FOUND),
                                                (e.loadingState = s.GuX.REJECT);
                                        }
                                },
                            ),
                            getPlaylistByUuid: (0, i.L3)(function* (a) {
                                let {
                                        playlistUuid: r,
                                        richTracks: l = !1,
                                        resumeStream: n = !1,
                                        preloadedPlaylist: o,
                                    } = a,
                                    {
                                        playlistResource: d,
                                        modelActionsLogger: c,
                                    } = (0, i._$)(e);
                                if (
                                    ((e.uuid = r),
                                    e.loadingState !== s.GuX.PENDING)
                                )
                                    try {
                                        e.loadingState = s.GuX.PENDING;
                                        let a = o;
                                        a ||
                                            (a = yield d.getPlaylist({
                                                playlistUuid: r,
                                                resumeStream: n,
                                                richTracks: l,
                                            })),
                                            yield t.updateData(a),
                                            e.loadingState !== s.GuX.IDLE &&
                                                (e.loadingState =
                                                    s.GuX.RESOLVE);
                                    } catch (t) {
                                        c.error(t),
                                            t instanceof u.GX &&
                                                (t.statusCode ===
                                                    u.X1.NOT_FOUND ||
                                                    t.statusCode ===
                                                        u.X1.BAD_REQUEST) &&
                                                (e.errorStatusCode =
                                                    u.X1.NOT_FOUND),
                                            e.loadingState !== s.GuX.IDLE &&
                                                (e.loadingState = s.GuX.REJECT);
                                    }
                            }),
                            updatePlaylistTrackByUuid: (0, i.L3)(function* (a) {
                                let {
                                        playlistUuid: r,
                                        richTracks: l = !1,
                                        resumeStream: n = !1,
                                    } = a,
                                    {
                                        playlistResource: o,
                                        modelActionsLogger: d,
                                    } = (0, i._$)(e);
                                e.uuid = r;
                                try {
                                    let a = yield o.getPlaylist({
                                            playlistUuid: r,
                                            resumeStream: n,
                                            richTracks: l,
                                        }),
                                        d = [];
                                    if (
                                        ((e.items = (0, i.wg)(
                                            a.tracks.map((t, a) => {
                                                var i, r;
                                                let l = String(t.id),
                                                    n = t.albumId || null;
                                                return l ===
                                                    (null == (i = e.items[a])
                                                        ? void 0
                                                        : i.id) &&
                                                    n ===
                                                        (null ==
                                                        (r = e.items[a])
                                                            ? void 0
                                                            : r.albumId)
                                                    ? e.items[a]
                                                    : (d.push(a),
                                                      {
                                                          id: String(t.id),
                                                          albumId:
                                                              t.albumId || null,
                                                          key: ""
                                                              .concat(t.id, "-")
                                                              .concat(a),
                                                          loadingState:
                                                              s.GuX.IDLE,
                                                      });
                                            }),
                                        )),
                                        e.meta &&
                                            ((e.meta.modified = a.modified),
                                            (e.meta.revision = a.revision),
                                            d.length))
                                    ) {
                                        let e = Math.min(...d),
                                            a = Math.max(...d);
                                        t.getTracksByRange({
                                            startIndex: e,
                                            endIndex: a,
                                        });
                                    }
                                    if (
                                        (e.loadingState !== s.GuX.IDLE &&
                                            (e.loadingState = s.GuX.RESOLVE),
                                        (0, i._n)(e))
                                    ) {
                                        let { sonataState: t } = (0, i.Zn)(e);
                                        t.setUnloadedEntitiesData(S(e.items));
                                    }
                                } catch (t) {
                                    d.error(t),
                                        t instanceof u.GX &&
                                            (t.statusCode === u.X1.NOT_FOUND ||
                                                t.statusCode ===
                                                    u.X1.BAD_REQUEST) &&
                                            (e.errorStatusCode =
                                                u.X1.NOT_FOUND),
                                        e.loadingState !== s.GuX.IDLE &&
                                            (e.loadingState = s.GuX.REJECT);
                                }
                            }),
                            moveTrack(t, a) {
                                let r = (0, d.HO)(e.items[t]);
                                if (
                                    !(t < 0) &&
                                    !(a < 0) &&
                                    !(t >= e.items.length) &&
                                    !(a >= e.items.length) &&
                                    r &&
                                    (e.items.splice(t, 1),
                                    e.items.splice(a, 0, r),
                                    (0, i._n)(e))
                                ) {
                                    let { sonataState: t } = (0, i.Zn)(e);
                                    t.setUnloadedEntitiesData(S(e.items));
                                }
                            },
                            removeTracksFromItems(t, a) {
                                if ((e.items.splice(t, a), (0, i._n)(e))) {
                                    let { sonataState: t } = (0, i.Zn)(e);
                                    t.setUnloadedEntitiesData(S(e.items));
                                }
                            },
                            setItems(t) {
                                e.items = (0, i.wg)((0, d.HO)(t));
                            },
                            setShouldShowTrailerOnboarding(t) {
                                e.shouldShowTrailerOnboarding = t;
                            },
                            reset() {
                                let { sonataState: t } = (0, i.Zn)(e);
                                t.resetUnloadedEntitiesData(),
                                    (e.uuid = null),
                                    (e.loadingState = s.GuX.IDLE),
                                    (e.errorStatusCode = null),
                                    (e.shouldShowTrailerOnboarding = null),
                                    e.search.setText(""),
                                    e.search.reset(),
                                    e.filters.reset(),
                                    e.destroyItems([
                                        e.meta,
                                        e.items,
                                        e.initialItems,
                                        e.similarPlaylists,
                                    ]);
                            },
                            refresh() {
                                var a, i;
                                (null == (a = e.meta) ? void 0 : a.uuid) &&
                                    t.getPlaylistByUuid({
                                        playlistUuid:
                                            null == (i = e.meta)
                                                ? void 0
                                                : i.uuid,
                                        resumeStream: !1,
                                    });
                            },
                            refreshTracks() {
                                var a, i;
                                (null == (a = e.meta) ? void 0 : a.uuid) &&
                                    t.updatePlaylistTrackByUuid({
                                        playlistUuid:
                                            null == (i = e.meta)
                                                ? void 0
                                                : i.uuid,
                                        resumeStream: !1,
                                    });
                            },
                        };
                        return t;
                    });
            a(138);
            var I = a(84684),
                k = a(68300);
        },
        84936: (e, t, a) => {
            "use strict";
            a.d(t, { TagNotFoundPage: () => l });
            var i = a(33008),
                r = a(97531),
                s = a(35233);
            let l = (0, r.PA)(() => (0, i.jsx)(s.M, {}));
        },
        85554: (e, t, a) => {
            "use strict";
            a.d(t, { W: () => n });
            var i = a(66268),
                r = a(42213),
                s = a(53555),
                l = a(79169);
            let n = (e) => {
                let {
                        isEnabled: t,
                        intervalMs: a,
                        modal: n,
                        playbackId: o,
                        sonataState: d,
                        isPaywallOpen: u,
                    } = e,
                    c = (0, i.useRef)(new Date()),
                    g = (0, l.eGp)(),
                    h = (0, r.c)(() => {
                        c.current = new Date();
                    }),
                    m = (0, r.c)(() => {
                        c.current.getTime() <
                            Date.now() - (null != a ? a : 18e5) &&
                            !u &&
                            (n.open(), h());
                    });
                (0, i.useEffect)(() => {
                    if (!t) return;
                    let e =
                        null == g
                            ? void 0
                            : g.getState(o).playerState.status.onChange((e) => {
                                  e === s.MT.ENDED && m();
                              });
                    return () => {
                        null == e || e();
                    };
                }, [t, g, m, o]),
                    (0, i.useEffect)(() => {
                        t && n.isOpened && (null == g || g.pause(o));
                    }, [t, n.isOpened, g, d.status, o]),
                    (0, i.useEffect)(() => {
                        if (!t) return;
                        let e = new AbortController();
                        return (
                            window.addEventListener("mousemove", h, {
                                signal: e.signal,
                            }),
                            window.addEventListener("keydown", h, {
                                signal: e.signal,
                            }),
                            window.addEventListener("touchstart", h, {
                                signal: e.signal,
                            }),
                            () => {
                                e.abort();
                            }
                        );
                    }, [t, h]);
            };
        },
        86631: (e, t, a) => {
            "use strict";
            a.d(t, { SlamProvider: () => y });
            var i = a(33008),
                r = a(97531),
                s = a(66268),
                l = a(96560),
                n = a(98369),
                o = a(28999),
                d = a(55845),
                u = a(85897),
                c = a(49444),
                g = a(88190),
                h = a(79169);
            let m = !0,
                y = (0, r.PA)((e) => {
                    var t, a, r;
                    let { children: y } = e,
                        { slam: p, user: v, experiments: S } = (0, h.Pjs)(),
                        P = (0, h.jRO)(),
                        E = (0, h.NFA)(),
                        b = E.get(h.U2_),
                        f = (0, h.gQL)(),
                        { notify: I } = (0, h.lkh)(),
                        k = (0, c.j)(),
                        _ = (0, s.useCallback)(
                            (e) => {
                                p.setNetworkStatus(e);
                            },
                            [p],
                        ),
                        T = (0, s.useCallback)(
                            (e) => {
                                let { id: t, state: a } = e;
                                p.setTrack(t, a),
                                    a.loadingState === u.DT.DOWNLOAD_FAILED &&
                                        I(
                                            (0, i.jsx)(g.i, {
                                                message: (0, i.jsx)(l.A, {
                                                    id: "offline.track-download-error",
                                                }),
                                            }),
                                            { containerId: h.uQT.ERROR },
                                        );
                            },
                            [I, p],
                        ),
                        C = (0, s.useCallback)(
                            (e) => {
                                p.setTracks(e);
                            },
                            [p],
                        );
                    return (
                        v.account.data.uid &&
                            v.hasPlus &&
                            P.init({
                                userConfig: { uid: v.account.data.uid },
                                resources: {
                                    tracksResource: E.get(h.Ooh),
                                    getFileInfoResource: E.get(h.qTR),
                                    availabilityResource: E.get(h.$5W),
                                    albumsResource: E.get(h.tzI),
                                },
                                downloaderVariables: {
                                    maxConcurrentDownloads: 5,
                                    getQuality: () =>
                                        (0, n.i)({
                                            productQuality:
                                                null == f
                                                    ? void 0
                                                    : f.quality.value,
                                        }),
                                },
                                featureFlags: { entities: !0 },
                                tracksControllerVariables: {
                                    requestTrackChunkSize: 100,
                                },
                                trackDownloadTaskParams: {
                                    secretKey: E.get(h.twC).player.secretKey,
                                    transport: d.o.ENCRAW,
                                    variables: {
                                        chunkSize: 1048576,
                                        coverSize: 1e3,
                                        codecs: o.iy,
                                    },
                                },
                            }),
                        (0, s.useEffect)(() => {
                            if (m) {
                                var e;
                                null == (e = P.tracksController) ||
                                    e.getTracksCount().then((e) => {
                                        let t = (0, h.f2y)(e);
                                        t &&
                                            k.count(
                                                { [h.xQR.TRACKS_COUNT]: t },
                                                h.l6e,
                                            );
                                    }),
                                    (m = !1);
                            }
                        }, [k, P.tracksController]),
                        (0, s.useEffect)(() => {
                            if (
                                void 0 !== v.puid &&
                                !S.checkExperiment(
                                    h.zal.WebNextOfflineDegradation,
                                    "default",
                                )
                            ) {
                                var e, t;
                                let a =
                                        null ==
                                        (e = S.getExperiment(
                                            h.zal.WebNextOfflineDegradation,
                                        ))
                                            ? void 0
                                            : e.group,
                                    i = ""
                                        .concat(h.cYZ.OfflineDegradation, "_")
                                        .concat(v.puid),
                                    r = b.get(i);
                                a &&
                                    a !== r &&
                                    (null == (t = P.tracksController) ||
                                        t.clearAll(),
                                    b.set(i, a));
                            }
                        }, [S, b, P, v.puid]),
                        (0, s.useEffect)(() => {
                            var e, t, a;
                            return (
                                null == (e = P.store) ||
                                    e.tracks.events.on(u.je.ENTITY_CHANGED, T),
                                null == (t = P.store) ||
                                    t.tracks.events.on(u.je.STATE_CHANGED, C),
                                null == (a = P.tracksController) ||
                                    a.initTracksState(),
                                () => {
                                    var e, t;
                                    null == (e = P.store) ||
                                        e.tracks.events.off(
                                            u.je.ENTITY_CHANGED,
                                            T,
                                        ),
                                        null == (t = P.store) ||
                                            t.tracks.events.off(
                                                u.je.STATE_CHANGED,
                                                C,
                                            );
                                }
                            );
                        }, [
                            T,
                            C,
                            null == (t = P.store) ? void 0 : t.tracks.events,
                            P.tracksController,
                        ]),
                        (0, s.useEffect)(() => {
                            var e;
                            return (
                                null == (e = P.network) || e.subscribe(_),
                                () => {
                                    var e;
                                    null == (e = P.network) || e.unsubscribe(_);
                                }
                            );
                        }, [
                            _,
                            P.network,
                            null == (a = P.network) ? void 0 : a.subscribe,
                            null == (r = P.network) ? void 0 : r.unsubscribe,
                        ]),
                        (0, s.useEffect)(() => {
                            let e = (0, h.gHp)(b);
                            p.setOfflineMode(e);
                        }, [b, p]),
                        (0, i.jsx)(h.h5g.Provider, {
                            value: P.artistsController,
                            children: (0, i.jsx)(h.mDy.Provider, {
                                value: P.playlistsController,
                                children: y,
                            }),
                        })
                    );
                });
        },
        87145: (e, t, a) => {
            "use strict";
            a.d(t, { E: () => l });
            var i = a(66268),
                r = a(2865),
                s = a(79169);
            let l = (e) => {
                let {
                        controller: t,
                        sonataState: a,
                        playbackId: l,
                        groupId: n,
                    } = e,
                    o = (0, s.eGp)(),
                    d = (0, s.NFA)(),
                    u = (0, r.d0)(),
                    c = d.get(s.ooW);
                (0, i.useEffect)(
                    () => (
                        null == t ||
                            t.addShortcutsListener(
                                n,
                                s.lbr.DECREASE_VOLUME,
                                async () => {
                                    let e = await (null == o
                                        ? void 0
                                        : o.decreaseExponentVolume(0.05, l));
                                    c.set(s.cYZ.YmPlayerVolume, e, {
                                        expires: 365,
                                    });
                                },
                            ),
                        null == t ||
                            t.addShortcutsListener(
                                n,
                                s.lbr.INCREASE_VOLUME,
                                async () => {
                                    let e = await (null == o
                                        ? void 0
                                        : o.increaseExponentVolume(0.05, l));
                                    c.set(s.cYZ.YmPlayerVolume, e, {
                                        expires: 365,
                                    });
                                },
                            ),
                        null == t ||
                            t.addShortcutsListener(
                                n,
                                s.lbr.TOGGLE_MUTE,
                                async () => {
                                    let e =
                                        null == o
                                            ? void 0
                                            : o.getState(l).playerState
                                                  .exponentVolume.value;
                                    void 0 !== e && (await u(a, e, l));
                                },
                            ),
                        () => {
                            null == t ||
                                t.removeShortcutsListener(
                                    n,
                                    s.lbr.DECREASE_VOLUME,
                                ),
                                null == t ||
                                    t.removeShortcutsListener(
                                        n,
                                        s.lbr.INCREASE_VOLUME,
                                    ),
                                null == t ||
                                    t.removeShortcutsListener(
                                        n,
                                        s.lbr.TOGGLE_MUTE,
                                    );
                        }
                    ),
                    [t, l, o, c, u, a, n],
                ),
                    (0, i.useEffect)(() => {
                        if (!a.isGenerativeContext)
                            return (
                                null == t ||
                                    t.addShortcutsListener(
                                        n,
                                        s.lbr.MOVE_BACKWARD,
                                        async () => {
                                            var e;
                                            (null == o ||
                                            null ==
                                                (e =
                                                    o.getState(l).currentContext
                                                        .value)
                                                ? void 0
                                                : e.availableActions
                                                      .moveBackward.value) &&
                                                (await o.moveBackward(l));
                                        },
                                    ),
                                null == t ||
                                    t.addShortcutsListener(
                                        n,
                                        s.lbr.MOVE_FORWARD,
                                        async () => {
                                            var e;
                                            (null == o ||
                                            null ==
                                                (e =
                                                    o.getState(l).currentContext
                                                        .value)
                                                ? void 0
                                                : e.availableActions.moveForward
                                                      .value) &&
                                                (await (null == o
                                                    ? void 0
                                                    : o.moveForward(l)));
                                        },
                                    ),
                                null == t ||
                                    t.addShortcutsListener(
                                        n,
                                        s.lbr.SLIDE_BACKWARD,
                                        async () => {
                                            (null == o
                                                ? void 0
                                                : o.getState(l).playerState
                                                      .progress.value
                                                      .duration) &&
                                                (await (null == o
                                                    ? void 0
                                                    : o.slideBackward(2, l)));
                                        },
                                    ),
                                null == t ||
                                    t.addShortcutsListener(
                                        n,
                                        s.lbr.SLIDE_FORWARD,
                                        async () => {
                                            (null == o
                                                ? void 0
                                                : o.getState(l).playerState
                                                      .progress.value
                                                      .duration) &&
                                                (await (null == o
                                                    ? void 0
                                                    : o.slideForward(2, l)));
                                        },
                                    ),
                                () => {
                                    null == t ||
                                        t.removeShortcutsListener(
                                            n,
                                            s.lbr.MOVE_FORWARD,
                                        ),
                                        null == t ||
                                            t.removeShortcutsListener(
                                                n,
                                                s.lbr.MOVE_BACKWARD,
                                            ),
                                        null == t ||
                                            t.removeShortcutsListener(
                                                n,
                                                s.lbr.SLIDE_BACKWARD,
                                            ),
                                        null == t ||
                                            t.removeShortcutsListener(
                                                n,
                                                s.lbr.SLIDE_FORWARD,
                                            );
                                }
                            );
                    }, [t, o, c, a.isGenerativeContext, l, n]);
            };
        },
        89102: (e) => {
            e.exports = {
                root: "GenresPage_root__LhP_S",
                shimmerTitle: "GenresPage_shimmerTitle__4j8uH",
                content: "GenresPage_content__yhKrQ",
                list: "GenresPage_list__l2Cuc",
            };
        },
        90157: (e, t, a) => {
            "use strict";
            a.d(t, { KidsEditorialPlaylistsPage: () => E });
            var i = a(33008),
                r = a(85896),
                s = a(97531),
                l = a(17846),
                n = a(66268),
                o = a(73827),
                d = a(18064),
                u = a(42213),
                c = a(42314),
                g = a(77868),
                h = a(83888),
                m = a(64143),
                y = a(45242),
                p = a(79169),
                v = a(18740),
                S = a(80233),
                P = a.n(S);
            let E = (0, s.PA)((e) => {
                var t, a, s;
                let { id: S } = e,
                    {
                        kids: { kidsEditorialPlaylistSubpage: E },
                        settings: { isMobile: b },
                    } = (0, p.Pjs)(),
                    f = (0, p.W6M)(),
                    { contentScrollRef: I, setContentScrollRef: k } = (0,
                    p.gKY)(),
                    { formatMessage: _ } = (0, o.A)(),
                    T = (0, u.c)((e) => {
                        E.getPlaylists({ page: e, pageSize: 20 });
                    });
                E.isNotFound && (0, l.notFound)(),
                    (0, n.useEffect)(
                        () => () => {
                            E.reset();
                        },
                        [E],
                    );
                let C = (0, c.L)(() => ({
                    Footer: () =>
                        (0, i.jsx)(v.A, {
                            children: (0, i.jsx)(v.wi, {
                                className: P().footer,
                            }),
                        }),
                }));
                if (
                    ((0, p.Jzs)(E.isResolved),
                    E.isNeededToLoad &&
                        (0, n.use)(E.getData({ id: S, page: 0, pageSize: 20 })),
                    E.isSomethingWrong)
                )
                    return (0, i.jsx)(h.w, {});
                let D = E.isLoading
                    ? 20
                    : null !=
                        (a =
                            null == E || null == (t = E.playlists)
                                ? void 0
                                : t.length)
                      ? a
                      : 0;
                return (0, i.jsx)(p.nVz, {
                    pageId: p._Q$.KIDS_EDITORIAL_PLAYLISTS,
                    children: (0, i.jsx)(m.hO, {
                        scrollElement: I,
                        outerTitle: E.title,
                        children: (0, i.jsxs)("div", {
                            className: P().root,
                            ...(0, d.Am)(d.Xk.kids.KIDS_EDITORIAL_PLAYLISTS),
                            children: [
                                (0, i.jsx)(v.Y9, {
                                    variant: v.Vw.TEXT,
                                    withForwardControl: !1,
                                    withBackwardControl: f.canBack,
                                    children: (0, i.jsx)(g.Heading, {
                                        variant: "h2",
                                        weight: "bold",
                                        size: "xl",
                                        lineClamp: 1,
                                        children: E.title,
                                    }),
                                }),
                                (0, i.jsx)(v.$$, {
                                    context: {
                                        listAriaLabel: _(
                                            { id: "mixes.playlists-list" },
                                            { genreName: E.title || "" },
                                        ),
                                    },
                                    className: (0, r.$)(
                                        P().scrollContainer,
                                        P().important,
                                    ),
                                    customComponents: C,
                                    itemContentCallback: (e) => {
                                        var t, a;
                                        let r =
                                                null == E ||
                                                null == (a = E.playlists) ||
                                                null == (t = a[e])
                                                    ? void 0
                                                    : t.data,
                                            s = _(
                                                {
                                                    id: "loading-messages.entity-is-loading",
                                                },
                                                {
                                                    entityName: _({
                                                        id: "entity-names.playlist",
                                                    }),
                                                },
                                            );
                                        return r
                                            ? (0, i.jsx)(
                                                  y.B6,
                                                  {
                                                      playlist: r,
                                                      contentLinesCount: 3,
                                                  },
                                                  r.key,
                                              )
                                            : (0, i.jsx)(v.Vt, {
                                                  isActive: !0,
                                                  "aria-label": s,
                                              });
                                    },
                                    initialItemCount: D,
                                    totalCount: D,
                                    onGetDataByPage: T,
                                    pageSize: 20,
                                    totalRequests:
                                        null != (s = E.requests) ? s : 0,
                                    listClassName: P().content,
                                    itemClassName: P().item,
                                    handleRef: k,
                                    isMobileLayout: b,
                                    useWindowScroll: b,
                                }),
                            ],
                        }),
                    }),
                });
            });
        },
        91173: (e) => {
            e.exports = {
                root: "KidsPage_root__yycsJ",
                content: "KidsPage_content__08pPR",
                header: "KidsPage_header__2Gk2l",
                landing: "KidsPage_landing__3QZZj",
                landing_onlyWizard: "KidsPage_landing_onlyWizard__xKyDo",
                footer: "KidsPage_footer__p7SVD",
                error: "KidsPage_error__qa7Qo",
            };
        },
        93813: (e, t, a) => {
            "use strict";
            a.d(t, { BuySubscriptionInitializer: () => l });
            var i = a(97531),
                r = a(66268),
                s = a(79169);
            let l = (0, i.PA)(() => {
                let { user: e } = (0, s.Pjs)(),
                    { hasFreeUserAccess: t } = (0, s.XCI)(),
                    a = (0, s.jwr)(),
                    i = (0, s.pFh)("music", t),
                    {
                        payment: { environment: l },
                    } = (0, s.NFA)().get(s.twC),
                    n = (0, r.useRef)(new Date()),
                    o = (0, r.useCallback)(async () => {
                        let t =
                            "production" === l ? e.account.data.uid : void 0;
                        try {
                            await i.getData({
                                uid: t,
                                page: a.page,
                                places: a.places,
                                widgetServiceName: a.widgetServiceName,
                            });
                        } catch (e) {}
                        n.current = new Date();
                    }, [i, l, e, a]),
                    d = (0, r.useCallback)(async () => {
                        let e = n.current.getTime() < Date.now() - 6e5;
                        "visible" === document.visibilityState &&
                            e &&
                            a.shouldFetchOffers &&
                            (await o());
                    }, [o, a.shouldFetchOffers]);
                (0, r.useEffect)(() => {
                    if (!t) return;
                    let e = new AbortController();
                    return (
                        window.addEventListener("focus", d, {
                            signal: e.signal,
                        }),
                        () => {
                            e.abort();
                        }
                    );
                }, [t, d]);
            });
        },
        94269: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { StoreProvider: () => tA });
            var i,
                r,
                s = a(33008),
                l = a(97531),
                n = a(41028),
                o = a(17846),
                d = a(66268);
            a(30293);
            var u = a(79169),
                c = a(43090),
                g = a(10663),
                h = a(53555),
                m = a(70235);
            a(8584);
            var y = a(12898),
                p = a(52732),
                v = a(537),
                S = a(59615);
            let P = n.gK
                    .compose(
                        n.gK.model("UpcomingAlbums", {
                            items: n.gK.maybeNull(n.gK.array(p.VH)),
                        }),
                        S.pl,
                        S.XT,
                    )
                    .actions((e) => ({
                        reset() {
                            (e.loadingState = u.GuX.IDLE),
                                e.destroyItems([e.items]);
                        },
                    })),
                E = n.gK
                    .compose(
                        n.gK.model("CollectionAlbumsPage", {
                            sort: n.gK.maybeNull(v.wY),
                            items: n.gK.array(n.gK.maybeNull(p.JC)),
                            pager: n.gK.maybeNull(S.jd),
                            alreadyRequestedPages: n.gK.map(n.gK.number),
                            pendingPages: n.gK.map(n.gK.number),
                            requestsCount: n.gK.maybeNull(n.gK.number),
                            upcomingAlbums: P,
                        }),
                        S.pl,
                        S.XT,
                    )
                    .views((e) => {
                        let t = {
                            get isAlbumsLoading() {
                                return (
                                    e.isNeededToLoad ||
                                    (e.loadingState === u.GuX.PENDING &&
                                        0 === e.items.length)
                                );
                            },
                            get isLoading() {
                                return (
                                    t.isAlbumsLoading ||
                                    e.upcomingAlbums.isNeededToLoad ||
                                    e.upcomingAlbums.isLoading
                                );
                            },
                            get isUpcomingAlbumsLoading() {
                                return (
                                    e.upcomingAlbums.isNeededToLoad ||
                                    e.upcomingAlbums.isLoading
                                );
                            },
                            get isUpcomingAlbumsEmpty() {
                                return (
                                    !t.isUpcomingAlbumsLoading &&
                                    (!e.upcomingAlbums.items ||
                                        0 === e.upcomingAlbums.items.length)
                                );
                            },
                            get isAlbumsEmpty() {
                                var a;
                                return (
                                    !t.isAlbumsLoading &&
                                    (!e.items ||
                                        (null == (a = e.items)
                                            ? void 0
                                            : a.length) === 0)
                                );
                            },
                        };
                        return t;
                    })
                    .actions((e) => ({
                        getData: (0, n.L3)(function* (t) {
                            let {
                                    userId: a,
                                    page: i = 0,
                                    pageSize: r = 20,
                                    sortBy: s,
                                    sortOrder: l,
                                    metaType: o,
                                } = t,
                                { usersResource: d, modelActionsLogger: c } =
                                    (0, n._$)(e);
                            if (
                                !(
                                    e.loadingState === u.GuX.PENDING &&
                                    e.pendingPages.has("".concat(i))
                                ) &&
                                !e.alreadyRequestedPages.has("".concat(i))
                            ) {
                                "number" == typeof i &&
                                    e.alreadyRequestedPages.set(
                                        "".concat(i),
                                        i,
                                    ),
                                    (e.sort = null),
                                    (0, v.WG)(s) &&
                                        (0, v.hl)(l) &&
                                        (e.sort = (0, n.wg)({
                                            sortBy: s,
                                            sortOrder: l,
                                        }));
                                try {
                                    var g, h, m;
                                    (e.loadingState = u.GuX.PENDING),
                                        e.pendingPages.set("".concat(i), i);
                                    let t = yield d.getLikedAlbums({
                                            userId: a,
                                            page: i,
                                            pageSize: r,
                                            sortBy: s,
                                            sortOrder: l,
                                            metaType: o,
                                        }),
                                        c = {
                                            page: i,
                                            perPage: r,
                                            total: t.pager.total,
                                        };
                                    0 === e.items.length &&
                                        (e.items = (0, n.wg)(
                                            Array.from(
                                                { length: c.total },
                                                () => null,
                                            ),
                                        ));
                                    let y =
                                        null !=
                                        (h =
                                            null == (g = t.albums)
                                                ? void 0
                                                : g.map((e) => {
                                                      let { album: t } = e;
                                                      return (0, p.pp)(t);
                                                  }))
                                            ? h
                                            : [];
                                    (0, u.Iyy)({
                                        items: e.items,
                                        mappedRawItems: y,
                                        page: i,
                                        pageSize: r,
                                    }),
                                        (e.pager = c),
                                        (e.requestsCount =
                                            (null != (m = e.requestsCount)
                                                ? m
                                                : 0) + 1),
                                        e.loadingState !== u.GuX.IDLE &&
                                            (e.loadingState = u.GuX.RESOLVE);
                                } catch (t) {
                                    c.error(t), (e.loadingState = u.GuX.REJECT);
                                } finally {
                                    e.pendingPages.delete("".concat(i));
                                }
                            }
                        }),
                        getPresaves: (0, n.L3)(function* (t) {
                            let { userId: a } = t,
                                { usersResource: i, modelActionsLogger: r } =
                                    (0, n._$)(e);
                            if (!e.upcomingAlbums.isLoading)
                                try {
                                    var s;
                                    e.upcomingAlbums.loadingState =
                                        u.GuX.PENDING;
                                    let t = yield i.getPresaves({
                                        userId: a,
                                        includeReleased: !1,
                                        includeUpcoming: !0,
                                    });
                                    (e.upcomingAlbums.items = (0, n.wg)(
                                        null == (s = t.upcomingAlbums)
                                            ? void 0
                                            : s.map(p.lO),
                                    )),
                                        e.upcomingAlbumsLoadingState !==
                                            u.GuX.IDLE &&
                                            (e.upcomingAlbums.loadingState =
                                                u.GuX.RESOLVE);
                                } catch (t) {
                                    r.error(t),
                                        e.upcomingAlbums.isNeededToLoad ||
                                            (e.upcomingAlbums.loadingState =
                                                u.GuX.REJECT);
                                }
                        }),
                        reset() {
                            (e.loadingState = u.GuX.IDLE),
                                e.pendingPages.clear(),
                                e.alreadyRequestedPages.clear(),
                                e.upcomingAlbums.reset(),
                                e.destroyItems([e.items, e.sort, e.pager]);
                        },
                    }));
            var b = a(90317),
                f = a(70879);
            let I = n.gK
                    .compose(
                        n.gK.model("TopArtists", { items: n.gK.array(b.GV) }),
                        S.pl,
                        S.XT,
                    )
                    .actions((e) => ({
                        reset() {
                            (e.loadingState = u.GuX.IDLE),
                                e.destroyItems([e.items]);
                        },
                    })),
                k = n.gK
                    .compose(
                        n.gK.model("CollectionArtistsPage", {
                            sort: n.gK.maybeNull(v.wY),
                            items: n.gK.array(n.gK.maybeNull(f.PK)),
                            pager: n.gK.maybeNull(S.jd),
                            alreadyRequestedPages: n.gK.map(n.gK.number),
                            pendingPages: n.gK.map(n.gK.number),
                            requests: n.gK.maybeNull(n.gK.number),
                            topArtists: I,
                        }),
                        S.pl,
                        S.XT,
                    )
                    .views((e) => ({
                        get isLoading() {
                            return (
                                e.isNeededToLoad ||
                                e.loadingState === u.GuX.PENDING
                            );
                        },
                        get isLoadingTopArtists() {
                            return (
                                e.topArtists.isNeededToLoad ||
                                e.topArtists.isLoading
                            );
                        },
                    }))
                    .actions((e) => ({
                        getDataTopArtists: (0, n.L3)(function* () {
                            let { personalResource: t, modelActionsLogger: a } =
                                (0, n._$)(e);
                            try {
                                var i, r;
                                e.topArtists.loadingState = u.GuX.PENDING;
                                let a = yield t.getTopArtists();
                                (e.topArtists.items = (0, n.wg)(
                                    null !=
                                        (r =
                                            null == (i = a.artists)
                                                ? void 0
                                                : i.map((e) => (0, b.MX)(e)))
                                        ? r
                                        : [],
                                )),
                                    (e.topArtists.loadingState = u.GuX.RESOLVE);
                            } catch (t) {
                                a.error(t),
                                    (e.topArtists.loadingState = u.GuX.REJECT);
                            }
                        }),
                        getData: (0, n.L3)(function* (t) {
                            let {
                                    userId: a,
                                    page: i = 0,
                                    pageSize: r = 20,
                                    sortBy: s,
                                    sortOrder: l,
                                } = t,
                                { usersResource: o, modelActionsLogger: d } =
                                    (0, n._$)(e);
                            if (
                                !(
                                    e.loadingState === u.GuX.PENDING &&
                                    e.pendingPages.has("".concat(i))
                                ) &&
                                !e.alreadyRequestedPages.has("".concat(i))
                            ) {
                                "number" == typeof i &&
                                    e.alreadyRequestedPages.set(
                                        "".concat(i),
                                        i,
                                    ),
                                    (e.sort = null),
                                    (0, v.WG)(s) &&
                                        (0, v.hl)(l) &&
                                        (e.sort = (0, n.wg)({
                                            sortBy: s,
                                            sortOrder: l,
                                        }));
                                try {
                                    var c, g, h;
                                    (e.loadingState = u.GuX.PENDING),
                                        e.pendingPages.set("".concat(i), i);
                                    let t = yield o.getLikedArtists({
                                            userId: a,
                                            page: i,
                                            pageSize: r,
                                            sortBy: s,
                                            sortOrder: l,
                                        }),
                                        d = {
                                            page: i,
                                            perPage: r,
                                            total: t.pager.total,
                                        };
                                    0 === e.items.length &&
                                        (e.items = (0, n.wg)(
                                            Array.from(
                                                { length: d.total },
                                                () => null,
                                            ),
                                        )),
                                        (e.loadingState = u.GuX.RESOLVE);
                                    let m =
                                        null !=
                                        (g =
                                            null == (c = t.artists)
                                                ? void 0
                                                : c.map(f.dM))
                                            ? g
                                            : [];
                                    (0, u.Iyy)({
                                        items: e.items,
                                        mappedRawItems: m,
                                        page: i,
                                        pageSize: r,
                                    }),
                                        (e.pager = d),
                                        (e.requests =
                                            (null != (h = e.requests) ? h : 0) +
                                            1),
                                        e.loadingState !== u.GuX.IDLE &&
                                            (e.loadingState = u.GuX.RESOLVE);
                                } catch (t) {
                                    d.error(t), (e.loadingState = u.GuX.REJECT);
                                } finally {
                                    e.pendingPages.delete("".concat(i));
                                }
                            }
                        }),
                        reset() {
                            (e.loadingState = u.GuX.IDLE),
                                e.pendingPages.clear(),
                                e.alreadyRequestedPages.clear(),
                                e.topArtists.reset(),
                                e.destroyItems([e.items, e.sort, e.pager]);
                        },
                    }));
            var _ = a(64641);
            let T = n.gK
                    .compose(
                        n.gK.model("CollectionClipsPageWillLike", {
                            clips: n.gK.maybeNull(n.gK.array(_.kv)),
                        }),
                        S.XT,
                        S.pl,
                    )
                    .views((e) => ({
                        get isShimmerVisible() {
                            return e.isLoading || e.isRejected;
                        },
                        get isEmpty() {
                            var t;
                            return (
                                e.isResolved &&
                                (!e.clips ||
                                    (null == (t = e.clips)
                                        ? void 0
                                        : t.length) === 0)
                            );
                        },
                    }))
                    .actions((e) => ({
                        getData: (0, n.L3)(function* () {
                            let { clipsResource: t, modelActionsLogger: a } =
                                (0, n._$)(e);
                            try {
                                e.loadingState = u.GuX.PENDING;
                                let a = yield t.getClipsWillLike({
                                    page: 0,
                                    pageSize: 50,
                                });
                                a.clips &&
                                    (e.clips = (0, n.wg)(a.clips.map(_.i$))),
                                    e.loadingState !== u.GuX.IDLE &&
                                        (e.loadingState = u.GuX.RESOLVE);
                            } catch (t) {
                                a.error(t),
                                    e.loadingState !== u.GuX.IDLE &&
                                        (e.loadingState = u.GuX.REJECT);
                            }
                        }),
                        reset() {
                            (e.loadingState = u.GuX.IDLE),
                                e.destroyItems([e.clips]);
                        },
                    })),
                C = n.gK
                    .compose(
                        n.gK.model("CollectionClipsPage", {
                            items: n.gK.array(n.gK.maybeNull(_.kv)),
                            pager: n.gK.maybeNull(S.jd),
                            alreadyRequestedPages: n.gK.map(n.gK.number),
                            pendingPages: n.gK.map(n.gK.number),
                            clipsWillLike: T,
                        }),
                        S.XT,
                        S.pl,
                    )
                    .views((e) => ({
                        get isEmpty() {
                            return (
                                e.isResolved &&
                                (!e.pager || 0 === e.pager.total)
                            );
                        },
                        get isLoaded() {
                            return e.isResolved || e.isRejected;
                        },
                    }))
                    .actions((e) => ({
                        setInitialShimmer() {
                            e.items = (0, n.wg)(
                                Array.from({ length: 20 }, () => null),
                            );
                        },
                        getData: (0, n.L3)(function* (t) {
                            var a;
                            let {
                                    userId: i,
                                    page: r = 0,
                                    pageSize: s = 20,
                                } = t,
                                { usersResource: l, modelActionsLogger: o } =
                                    (0, n._$)(e);
                            if (
                                !(
                                    (e.pager &&
                                        e.items.length >=
                                            (null == (a = e.pager)
                                                ? void 0
                                                : a.total)) ||
                                    (e.loadingState === u.GuX.PENDING &&
                                        e.pendingPages.has(r.toString()))
                                ) &&
                                !e.alreadyRequestedPages.has(r.toString())
                            ) {
                                "number" == typeof r &&
                                    e.alreadyRequestedPages.set(
                                        r.toString(),
                                        r,
                                    );
                                try {
                                    (e.loadingState = u.GuX.PENDING),
                                        e.pendingPages.set(r.toString(), r);
                                    let t = yield l.getLikedClips({
                                            userId: i,
                                            page: r,
                                            pageSize: s,
                                        }),
                                        a = {
                                            page: r,
                                            perPage: s,
                                            total: t.pager.total,
                                        };
                                    if (t.clips) {
                                        let i = t.clips.map(_.i$);
                                        (0, u.Iyy)({
                                            items: e.items,
                                            mappedRawItems: i,
                                            page: r,
                                            pageSize: s,
                                        }),
                                            (e.items = (0, n.wg)(
                                                e.items.slice(0, a.total),
                                            ));
                                    }
                                    (e.pager = a),
                                        (e.loadingState = u.GuX.RESOLVE);
                                } catch (t) {
                                    o.error(t), (e.loadingState = u.GuX.REJECT);
                                } finally {
                                    e.pendingPages.delete(r.toString());
                                }
                            }
                        }),
                        reset() {
                            (e.loadingState = u.GuX.IDLE),
                                (e.pager = null),
                                e.alreadyRequestedPages.clear(),
                                e.pendingPages.clear(),
                                e.destroyItems([e.items]),
                                e.clipsWillLike.reset();
                        },
                    })),
                D = n.gK
                    .compose(
                        n.gK.model("CollectionNonMusicPage", {
                            items: n.gK.array(n.gK.maybeNull(p.JC)),
                            pager: n.gK.maybeNull(S.jd),
                            alreadyRequestedPages: n.gK.map(n.gK.number),
                            pendingPages: n.gK.map(n.gK.number),
                            requestsCount: n.gK.maybeNull(n.gK.number),
                        }),
                        S.XT,
                    )
                    .views((e) => ({
                        get isLoading() {
                            return (
                                e.isNeededToLoad ||
                                (e.loadingState === u.GuX.PENDING &&
                                    0 === e.items.length)
                            );
                        },
                        get isEmptyItems() {
                            var t;
                            return !!(
                                !(null == (t = e.items) ? void 0 : t.length) &&
                                e.requestsCount
                            );
                        },
                    }))
                    .actions((e) => ({
                        getData: (0, n.L3)(function* (t) {
                            let {
                                    userId: a,
                                    page: i = 0,
                                    pageSize: r = 20,
                                    metaType: s,
                                } = t,
                                { usersResource: l, modelActionsLogger: o } =
                                    (0, n._$)(e);
                            if (
                                !(
                                    e.loadingState === u.GuX.PENDING &&
                                    e.pendingPages.has("".concat(i))
                                ) &&
                                !e.alreadyRequestedPages.has("".concat(i))
                            ) {
                                "number" == typeof i &&
                                    e.alreadyRequestedPages.set(
                                        "".concat(i),
                                        i,
                                    );
                                try {
                                    var d, c, g;
                                    (e.loadingState = u.GuX.PENDING),
                                        e.pendingPages.set("".concat(i), i);
                                    let t = yield l.getLikedAlbums({
                                            userId: a,
                                            page: i,
                                            pageSize: r,
                                            metaType: s,
                                        }),
                                        o = {
                                            page: i,
                                            perPage: r,
                                            total: t.pager.total,
                                        };
                                    0 === e.items.length &&
                                        (e.items = (0, n.wg)(
                                            Array.from(
                                                { length: o.total },
                                                () => null,
                                            ),
                                        ));
                                    let h =
                                        null !=
                                        (c =
                                            null == (d = t.albums)
                                                ? void 0
                                                : d.map((e) => {
                                                      let { album: t } = e;
                                                      return (0, p.pp)(t);
                                                  }))
                                            ? c
                                            : [];
                                    (0, u.Iyy)({
                                        items: e.items,
                                        mappedRawItems: h,
                                        page: i,
                                        pageSize: r,
                                    }),
                                        (e.pager = o),
                                        (e.requestsCount =
                                            (null != (g = e.requestsCount)
                                                ? g
                                                : 0) + 1),
                                        e.loadingState !== u.GuX.IDLE &&
                                            (e.loadingState = u.GuX.RESOLVE);
                                } catch (t) {
                                    o.error(t), (e.loadingState = u.GuX.REJECT);
                                } finally {
                                    e.pendingPages.delete("".concat(i));
                                }
                            }
                        }),
                        reset() {
                            (e.loadingState = u.GuX.IDLE),
                                (e.items = (0, n.wg)([])),
                                e.pendingPages.clear(),
                                (e.pager = null),
                                e.alreadyRequestedPages.clear(),
                                (e.requestsCount = 0);
                        },
                    }));
            var A = a(45242),
                L = a(25911);
            let N = n.gK
                    .compose(
                        n.gK.model("CollectionPlaylistsCreatedPage", {
                            sort: n.gK.maybeNull(v.wY),
                            items: n.gK.array(n.gK.maybeNull(L.Zq)),
                            pager: n.gK.maybeNull(S.jd),
                            alreadyRequestedPages: n.gK.map(n.gK.number),
                            pendingPages: n.gK.map(n.gK.number),
                            kinds: n.gK.array(n.gK.number),
                            requests: n.gK.maybeNull(n.gK.number),
                        }),
                        S.XT,
                    )
                    .views((e) => ({
                        get isLoading() {
                            return (
                                e.isNeededToLoad ||
                                e.loadingState === u.GuX.PENDING
                            );
                        },
                        get isEmpty() {
                            return (
                                e.isResolved &&
                                (!e.pager || 0 === e.pager.total)
                            );
                        },
                    }))
                    .actions((e) => {
                        let t = {
                            getKinds: (0, n.L3)(function* (t) {
                                let a = [],
                                    { usersResource: i } = (0, n._$)(e);
                                (a = yield i.getPlaylistsKinds({
                                    userId: t,
                                    addPlaylistWithLikes: !0,
                                })),
                                    (e.kinds = (0, n.wg)(a));
                            }),
                            getData: (0, n.L3)(function* (a) {
                                let {
                                        userId: i,
                                        page: r = 0,
                                        pageSize: s = 20,
                                        withLikesCount: l,
                                    } = a,
                                    {
                                        usersResource: o,
                                        modelActionsLogger: d,
                                    } = (0, n._$)(e);
                                if (
                                    !(
                                        e.loadingState === u.GuX.PENDING &&
                                        e.pendingPages.has("".concat(r))
                                    ) &&
                                    !e.alreadyRequestedPages.has("".concat(r))
                                ) {
                                    "number" == typeof r &&
                                        e.alreadyRequestedPages.set(
                                            "".concat(r),
                                            r,
                                        );
                                    try {
                                        var c;
                                        e.isResolved ||
                                            (e.loadingState = u.GuX.PENDING),
                                            e.pendingPages.set("".concat(r), r),
                                            0 === e.kinds.length &&
                                                (yield t.getKinds(i));
                                        let a = r * s,
                                            d = e.kinds.slice(a, a + s),
                                            g = yield o.getPlaylistsByKinds({
                                                userId: i,
                                                kinds: d,
                                                withLikesCount: l,
                                                withTracks: !0,
                                            });
                                        e.requests =
                                            (null != (c = e.requests) ? c : 0) +
                                            1;
                                        let h = {
                                            page: r,
                                            perPage: s,
                                            total: e.kinds.length,
                                        };
                                        0 === e.items.length &&
                                            (e.items = (0, n.wg)(
                                                Array.from(
                                                    { length: h.total },
                                                    () => null,
                                                ),
                                            ));
                                        let m = g.map(A.pd);
                                        (0, u.Iyy)({
                                            items: e.items,
                                            mappedRawItems: m,
                                            page: r,
                                            pageSize: s,
                                        }),
                                            (e.pager = h),
                                            (e.loadingState = u.GuX.RESOLVE);
                                    } catch (t) {
                                        d.error(t),
                                            (e.loadingState = u.GuX.REJECT);
                                    } finally {
                                        e.pendingPages.delete("".concat(r));
                                    }
                                }
                            }),
                            reset() {
                                (e.loadingState = u.GuX.IDLE),
                                    (e.sort = null),
                                    (e.items = (0, n.wg)([])),
                                    (e.pager = null),
                                    e.alreadyRequestedPages.clear(),
                                    e.pendingPages.clear(),
                                    (e.kinds = (0, n.wg)([])),
                                    (e.requests = null);
                            },
                        };
                        return t;
                    }),
                R = n.gK
                    .compose(
                        n.gK.model("CollectionPlaylistsLikedPage", {
                            sort: n.gK.maybeNull(v.wY),
                            items: n.gK.array(n.gK.maybeNull(L.$o)),
                            pager: n.gK.maybeNull(S.jd),
                            alreadyRequestedPages: n.gK.map(n.gK.number),
                            pendingPages: n.gK.map(n.gK.number),
                            requests: n.gK.maybeNull(n.gK.number),
                        }),
                        S.XT,
                    )
                    .views((e) => ({
                        get isLoading() {
                            return (
                                e.isNeededToLoad ||
                                e.loadingState === u.GuX.PENDING
                            );
                        },
                        get isEmpty() {
                            return (
                                e.isResolved &&
                                (!e.pager || 0 === e.pager.total)
                            );
                        },
                    }))
                    .actions((e) => ({
                        getData: (0, n.L3)(function* (t) {
                            let {
                                userId: a,
                                page: i = 0,
                                pageSize: r = 20,
                                sortBy: s,
                                sortOrder: l,
                                playlistMetaType: o,
                                withTracks: d,
                            } = t;
                            if (
                                (e.loadingState === u.GuX.PENDING &&
                                    e.pendingPages.has("".concat(i))) ||
                                e.alreadyRequestedPages.has("".concat(i))
                            )
                                return;
                            "number" == typeof i &&
                                e.alreadyRequestedPages.set("".concat(i), i);
                            let { usersResource: c, modelActionsLogger: g } =
                                (0, n._$)(e);
                            (e.sort = null),
                                (0, v.WG)(s) &&
                                    (0, v.hl)(l) &&
                                    (e.sort = (0, n.wg)({
                                        sortBy: s,
                                        sortOrder: l,
                                    }));
                            try {
                                var h;
                                (e.loadingState = u.GuX.PENDING),
                                    e.pendingPages.set("".concat(i), i);
                                let { likedPlaylists: t, pager: g } =
                                    yield c.getLikedPlaylists({
                                        userId: a,
                                        page: i,
                                        pageSize: r,
                                        sortBy: s,
                                        sortOrder: l,
                                        playlistMetaType: o,
                                        withTracks: d,
                                    });
                                (e.requests =
                                    (null != (h = e.requests) ? h : 0) + 1),
                                    0 === e.items.length &&
                                        (e.items = (0, n.wg)(
                                            Array.from(
                                                { length: g.total },
                                                () => null,
                                            ),
                                        ));
                                let m = t.map((e) => {
                                    let { playlist: t } = e;
                                    return (0, L.jX)(t);
                                });
                                (0, u.Iyy)({
                                    items: e.items,
                                    mappedRawItems: m,
                                    page: i,
                                    pageSize: r,
                                }),
                                    (e.pager = g),
                                    (e.loadingState = u.GuX.RESOLVE);
                            } catch (t) {
                                g.error(t),
                                    "number" == typeof i &&
                                        e.alreadyRequestedPages.delete(
                                            "".concat(i),
                                        ),
                                    (e.requests =
                                        "number" == typeof e.requests
                                            ? e.requests - 1
                                            : 0),
                                    (e.loadingState = u.GuX.REJECT);
                            } finally {
                                e.pendingPages.delete("".concat(i));
                            }
                        }),
                        reset() {
                            (e.loadingState = u.GuX.IDLE),
                                (e.sort = null),
                                (e.items = (0, n.wg)([])),
                                (e.pager = null),
                                e.alreadyRequestedPages.clear(),
                                e.pendingPages.clear(),
                                (e.requests = null);
                        },
                    })),
                w = n.gK
                    .model("CollectionPlaylists", {
                        playlistsLiked: R,
                        playlistsCreated: N,
                        activeTabIndex: n.gK.number,
                        tabs: n.gK.array(n.gK.number),
                        tabIndexElement: n.gK.maybe(n.gK.string),
                    })
                    .views((e) => ({
                        get isLikedTabActive() {
                            return e.activeTabIndex === m.a.LIKED;
                        },
                        get isCreatedTabActive() {
                            return e.activeTabIndex === m.a.CREATED;
                        },
                        get activePlaylistsModel() {
                            switch (e.activeTabIndex) {
                                case m.a.CREATED:
                                    return e.playlistsCreated;
                                case m.a.LIKED:
                                    return e.playlistsLiked;
                                default:
                                    return e.playlistsCreated;
                            }
                        },
                        get isEmptyLikedTab() {
                            var t;
                            return (
                                (null == (t = e.playlistsLiked.pager)
                                    ? void 0
                                    : t.total) === 0
                            );
                        },
                    }))
                    .actions((e) => ({
                        setActiveTabIndex(t) {
                            e.activeTabIndex = t;
                        },
                        setTabIndexElement(t) {
                            e.tabIndexElement = t;
                        },
                        reset() {
                            e.playlistsLiked.reset(),
                                e.playlistsCreated.reset(),
                                (e.activeTabIndex = m.a.CREATED);
                        },
                    }));
            var x = a(44078);
            let O = (e) =>
                    (0, n.wg)({
                        type: e.type,
                        track: (0, x.vU)(e.track),
                        album: e.album && (0, p.pp)(e.album),
                    }),
                G = (e) =>
                    (0, n.wg)({
                        type: e.type,
                        album: e.album && (0, p.pp)(e.album),
                        playlist: e.playlist && (0, A.ZC)(e.playlist),
                        track: (0, x.vU)(e.track),
                    }),
                M = n.gK.model("ShelfLikedItem", {
                    type: n.gK.string,
                    track: x.vj,
                    album: n.gK.maybe(p.JC),
                });
            n.gK.model("ShelfNewEpisodesItem", {
                type: n.gK.string,
                playlist: n.gK.maybe(A.BL),
                track: x.vj,
            });
            let K = n.gK.model("ShelfRecentlyPlayedItem", {
                    type: n.gK.string,
                    album: n.gK.maybe(p.JC),
                    playlist: n.gK.maybe(A.IP),
                    track: x.vj,
                }),
                F = n.gK
                    .compose(
                        n.gK.model("CollectionShelfLiked", {
                            title: n.gK.maybeNull(n.gK.string),
                            typeForFrom: n.gK.maybeNull(n.gK.string),
                            entities: n.gK.maybeNull(n.gK.array(M)),
                            pager: n.gK.maybeNull(S.jd),
                        }),
                        S.XT,
                    )
                    .views((e) => ({
                        get isLoading() {
                            return (
                                e.isNeededToLoad ||
                                e.loadingState === u.GuX.PENDING
                            );
                        },
                        get isEmpty() {
                            var t;
                            return (
                                e.isResolved &&
                                (null == (t = e.entities)
                                    ? void 0
                                    : t.length) === 0
                            );
                        },
                    }))
                    .actions((e) => ({
                        getData: (0, n.L3)(function* () {
                            let { nonMusicResource: t, modelActionsLogger: a } =
                                (0, n._$)(e);
                            if (e.loadingState !== u.GuX.PENDING)
                                try {
                                    var i, r;
                                    e.loadingState = u.GuX.PENDING;
                                    let a = yield t.getShelfLiked();
                                    (e.title = a.title),
                                        (e.typeForFrom =
                                            null != (i = a.typeForFrom)
                                                ? i
                                                : null),
                                        (e.pager =
                                            null != (r = a.pager) ? r : null),
                                        (e.entities = (0, n.wg)(
                                            a.entities ? a.entities.map(O) : [],
                                        )),
                                        (e.loadingState = u.GuX.RESOLVE);
                                } catch (t) {
                                    a.error(t), (e.loadingState = u.GuX.REJECT);
                                }
                        }),
                        reset() {
                            (e.entities = null),
                                (e.title = null),
                                (e.typeForFrom = null),
                                (e.pager = null),
                                (e.loadingState = u.GuX.IDLE);
                        },
                    })),
                X = n.gK
                    .compose(
                        n.gK.model("CollectionShelfNewEpisodes", {
                            title: n.gK.maybeNull(n.gK.string),
                            typeForFrom: n.gK.maybeNull(n.gK.string),
                            playlist: n.gK.maybeNull(A.BL),
                            tracks: n.gK.maybeNull(n.gK.array(x.vj)),
                        }),
                        S.XT,
                    )
                    .views((e) => ({
                        get withPlaylist() {
                            return !!(
                                e.playlist &&
                                e.playlist.kind &&
                                e.playlist.isAvailable &&
                                e.playlist.uuid
                            );
                        },
                        get isLoading() {
                            return (
                                e.isNeededToLoad ||
                                e.loadingState === u.GuX.PENDING
                            );
                        },
                        get isEmpty() {
                            return (
                                e.isResolved &&
                                (!e.tracks || 0 === e.tracks.length)
                            );
                        },
                    }))
                    .actions((e) => ({
                        getData: (0, n.L3)(function* () {
                            let { nonMusicResource: t, modelActionsLogger: a } =
                                (0, n._$)(e);
                            if (e.loadingState !== u.GuX.PENDING)
                                try {
                                    var i;
                                    e.loadingState = u.GuX.PENDING;
                                    let a = yield t.getNewEpisodes();
                                    e.title = a.title;
                                    let r = a.blocks[0];
                                    (null == r ? void 0 : r.typeForFrom) &&
                                        (e.typeForFrom = r.typeForFrom),
                                        (null == r ||
                                        null == (i = r.entities[0])
                                            ? void 0
                                            : i.playlist) &&
                                            (e.playlist = (0, A.ZC)(
                                                r.entities[0].playlist,
                                            )),
                                        (null == r ? void 0 : r.entities) &&
                                            (e.tracks = (0, n.wg)(
                                                r.entities
                                                    .filter((e) => e.track)
                                                    .map((e) =>
                                                        (0, x.vU)(e.track),
                                                    ),
                                            )),
                                        (e.loadingState = u.GuX.RESOLVE);
                                } catch (t) {
                                    a.error(t), (e.loadingState = u.GuX.REJECT);
                                }
                        }),
                        reset() {
                            (e.title = null),
                                (e.playlist = null),
                                (e.typeForFrom = null),
                                (e.tracks = null),
                                (e.loadingState = u.GuX.IDLE);
                        },
                    })),
                j = n.gK
                    .compose(
                        n.gK.model("CollectionShelfRecentlyPlayed", {
                            title: n.gK.maybeNull(n.gK.string),
                            typeForFrom: n.gK.maybeNull(n.gK.string),
                            entities: n.gK.maybeNull(n.gK.array(K)),
                            pager: n.gK.maybeNull(S.jd),
                        }),
                        S.XT,
                    )
                    .views((e) => ({
                        get isLoading() {
                            return (
                                e.isNeededToLoad ||
                                e.loadingState === u.GuX.PENDING
                            );
                        },
                        get isEmpty() {
                            return !!(
                                e.isResolved &&
                                e.entities &&
                                0 === e.entities.length
                            );
                        },
                    }))
                    .actions((e) => ({
                        getData: (0, n.L3)(function* () {
                            let { nonMusicResource: t, modelActionsLogger: a } =
                                (0, n._$)(e);
                            if (e.loadingState !== u.GuX.PENDING)
                                try {
                                    var i, r;
                                    e.loadingState = u.GuX.PENDING;
                                    let a = yield t.getShelfRecentlyPlayed();
                                    (e.title = a.title),
                                        (e.typeForFrom =
                                            null != (i = a.typeForFrom)
                                                ? i
                                                : null),
                                        (e.pager =
                                            null != (r = a.pager) ? r : null),
                                        (e.entities = (0, n.wg)(
                                            a.entities.map(G),
                                        )),
                                        (e.loadingState = u.GuX.RESOLVE);
                                } catch (t) {
                                    a.error(t), (e.loadingState = u.GuX.REJECT);
                                }
                        }),
                        reset() {
                            (e.entities = null),
                                (e.title = null),
                                (e.typeForFrom = null),
                                (e.pager = null),
                                (e.loadingState = u.GuX.IDLE);
                        },
                    })),
                U = n.gK
                    .model("CollectionShelfPage", {
                        recentlyPlayed: j,
                        newEpisodes: X,
                        liked: F,
                    })
                    .views((e) => ({
                        get isLoading() {
                            return (
                                e.recentlyPlayed.isLoading && e.liked.isLoading
                            );
                        },
                        get isRejected() {
                            return (
                                e.recentlyPlayed.isRejected &&
                                e.liked.isRejected
                            );
                        },
                        get isResolved() {
                            return (
                                e.recentlyPlayed.isResolved &&
                                e.liked.isResolved
                            );
                        },
                        get isIdle() {
                            return (
                                e.recentlyPlayed.loadingState === u.GuX.IDLE &&
                                e.liked.loadingState === u.GuX.IDLE
                            );
                        },
                        get hasRecentlyPlayed() {
                            var t;
                            return (
                                e.recentlyPlayed.isLoading ||
                                ((null == (t = e.recentlyPlayed.entities)
                                    ? void 0
                                    : t.length) || 0) > 0
                            );
                        },
                        get hasLiked() {
                            var a;
                            return (
                                e.liked.isLoading ||
                                ((null == (a = e.liked.entities)
                                    ? void 0
                                    : a.length) || 0) > 0
                            );
                        },
                    }))
                    .actions((e) => ({
                        reset() {
                            e.recentlyPlayed.reset(), e.liked.reset();
                        },
                    })),
                B = n.gK
                    .compose(
                        n.gK.model("CollectionDislikesPageArtists", {
                            items: n.gK.maybeNull(n.gK.array(f.PK)),
                        }),
                        S.XT,
                    )
                    .views((e) => {
                        let t = {
                            get isLoading() {
                                return (
                                    e.isNeededToLoad ||
                                    e.loadingState === u.GuX.PENDING
                                );
                            },
                            get isEmpty() {
                                var a;
                                return (
                                    !t.isLoading &&
                                    (null == (a = e.items)
                                        ? void 0
                                        : a.length) === 0
                                );
                            },
                        };
                        return t;
                    })
                    .actions((e) => ({
                        getData: (0, n.L3)(function* () {
                            let { usersResource: t, modelActionsLogger: a } =
                                (0, n._$)(e);
                            if (!(0, n._n)(e)) return null;
                            let { user: i } = (0, n.Zn)(e);
                            if (e.loadingState === u.GuX.PENDING) return null;
                            if (
                                ((e.loadingState = u.GuX.PENDING),
                                i.account.data.uid)
                            )
                                try {
                                    let a = yield t.getDislikedArtists({
                                        userId: i.account.data.uid,
                                    });
                                    return (
                                        (e.items = (0, n.wg)(
                                            (a || []).map(f.dM),
                                        )),
                                        e.loadingState !== u.GuX.IDLE &&
                                            (e.loadingState = u.GuX.RESOLVE),
                                        a
                                    );
                                } catch (t) {
                                    a.error(t),
                                        e.loadingState !== u.GuX.IDLE &&
                                            (e.loadingState = u.GuX.REJECT);
                                }
                            return (e.loadingState = u.GuX.REJECT), null;
                        }),
                        reset() {
                            (e.loadingState = u.GuX.IDLE), (e.items = null);
                        },
                    }));
            var V = a(73508),
                q = a(2865);
            let Y = n.gK.model("CollectionDislikesPageTracksItem", {
                    id: n.gK.string,
                    loadingState: n.gK.enumeration(Object.values(u.GuX)),
                    data: n.gK.maybeNull(x.vj),
                }),
                W = n.gK
                    .compose(
                        n.gK.model("CollectionDislikesPageTracks", {
                            items: n.gK.maybeNull(n.gK.array(Y)),
                        }),
                        S.XT,
                    )
                    .views((e) => {
                        let t = {
                            get isLoading() {
                                return (
                                    e.isNeededToLoad ||
                                    e.loadingState === u.GuX.PENDING
                                );
                            },
                            get isEmpty() {
                                var a;
                                return (
                                    !t.isLoading &&
                                    (null == (a = e.items)
                                        ? void 0
                                        : a.length) === 0
                                );
                            },
                            get sonataEntitiesData() {
                                var i, r;
                                return null !=
                                    (r =
                                        null == (i = e.items)
                                            ? void 0
                                            : i.map((e) => (0, q.li)(e.id)))
                                    ? r
                                    : [];
                            },
                        };
                        return t;
                    })
                    .actions((e) => ({
                        getData: (0, n.L3)(function* () {
                            let { usersResource: t, modelActionsLogger: a } =
                                    (0, n._$)(e),
                                { user: i } = (0, n.Zn)(e);
                            if (
                                i.account.data.uid &&
                                e.loadingState !== u.GuX.PENDING
                            ) {
                                e.loadingState = u.GuX.PENDING;
                                try {
                                    let {
                                            library: { tracks: a },
                                        } = yield t.getDislikedTracks({
                                            userId: i.account.data.uid,
                                        }),
                                        r = a.map((e) => {
                                            let { id: t, albumId: a } = e;
                                            return {
                                                id: String((0, V.V)(t, a)),
                                                loadingState: u.GuX.IDLE,
                                            };
                                        });
                                    (e.items = (0, n.wg)(r)),
                                        (e.loadingState = u.GuX.RESOLVE);
                                } catch (t) {
                                    a.error(t),
                                        e.loadingState !== u.GuX.IDLE &&
                                            (e.loadingState = u.GuX.REJECT);
                                }
                            }
                        }),
                        getTracksByRange: (0, n.L3)(function* (t, a) {
                            var i;
                            let { tracksResource: r, modelActionsLogger: s } =
                                (0, n._$)(e);
                            if (!(null == (i = e.items) ? void 0 : i.length))
                                return null;
                            (t = Math.max(0, t)),
                                (a = Math.min(a, e.items.length));
                            let l = ((e, t, a) => {
                                let i = [];
                                for (let l = t; l <= a; l++) {
                                    var r, s;
                                    ((null == (r = e[l])
                                        ? void 0
                                        : r.loadingState) === u.GuX.IDLE ||
                                        (null == (s = e[l])
                                            ? void 0
                                            : s.loadingState) ===
                                            u.GuX.REJECT) &&
                                        i.push(l);
                                }
                                return i;
                            })(e.items, t, a);
                            try {
                                let t,
                                    a =
                                        ((t = e.items),
                                        l.map((e) => {
                                            let a = t[e];
                                            return String(
                                                null == a ? void 0 : a.id,
                                            );
                                        }));
                                if (!a.length) return null;
                                l.forEach((t) => {
                                    var a;
                                    let i =
                                        null == (a = e.items) ? void 0 : a[t];
                                    i && (i.loadingState = u.GuX.PENDING);
                                });
                                let i = yield r.getTracksMeta({
                                    trackIds: a,
                                    withProgress: !0,
                                });
                                l.forEach((t, a) => {
                                    var r;
                                    let s = null == i ? void 0 : i[a];
                                    (null == (r = e.items) ? void 0 : r[t]) &&
                                        s &&
                                        (e.items[t] = {
                                            id: String(s.id),
                                            data: (0, x.vU)(s),
                                            loadingState: u.GuX.RESOLVE,
                                        });
                                });
                            } catch (t) {
                                s.error(t),
                                    l.forEach((t) => {
                                        var a;
                                        let i =
                                            null == (a = e.items)
                                                ? void 0
                                                : a[t];
                                        i && (i.loadingState = u.GuX.REJECT);
                                    });
                            }
                            return null;
                        }),
                        reset() {
                            (e.loadingState = u.GuX.IDLE), (e.items = null);
                        },
                    })),
                z = n.gK
                    .model("CollectionDislikesPage", { artists: B, tracks: W })
                    .views((e) => ({
                        get isNeededToLoad() {
                            return (
                                e.tracks.isNeededToLoad &&
                                e.artists.isNeededToLoad
                            );
                        },
                        get isLoading() {
                            return e.tracks.isLoading && e.artists.isLoading;
                        },
                        get isResolved() {
                            return e.tracks.isResolved && e.artists.isResolved;
                        },
                    }))
                    .actions((e) => ({
                        reset() {
                            e.artists.reset(), e.tracks.reset();
                        },
                    }));
            var H = a(56732);
            let Q = n.gK
                    .model("CollectionKidsAlbumsPage", {
                        pagesLoader: (0, S.Ij)(p.JC),
                    })
                    .views((e) => {
                        let t = {
                            get isShimmerVisible() {
                                return !e.pagesLoader.isSomePageResolved;
                            },
                            get isNeededToLoad() {
                                return e.pagesLoader.isNeedToMakeInitialRequest;
                            },
                            get isRejected() {
                                return e.pagesLoader.isInitialRequestRejected;
                            },
                            get isEmpty() {
                                return e.pagesLoader.isEmpty;
                            },
                            get isResolved() {
                                return e.pagesLoader.isSomePageResolved;
                            },
                            get requestsCount() {
                                return e.pagesLoader.requestsCount;
                            },
                            get items() {
                                var a;
                                return null != (a = e.pagesLoader.items)
                                    ? a
                                    : [];
                            },
                            get shouldShowContent() {
                                return t.isShimmerVisible || t.items.length > 0;
                            },
                            get loadedItems() {
                                var i, r;
                                return null !=
                                    (r =
                                        null == (i = e.pagesLoader.items)
                                            ? void 0
                                            : i.filter((e) => null !== e))
                                    ? r
                                    : [];
                            },
                        };
                        return t;
                    })
                    .actions((e) => ({
                        getData: (0, n.L3)(function* (t) {
                            let { pageSize: a = H.c, page: i = 0 } = t,
                                {
                                    landingBlocksResource: r,
                                    modelActionsLogger: s,
                                } = (0, n._$)(e);
                            if (e.pagesLoader.isPageNeedToLoad(i))
                                try {
                                    e.pagesLoader.setPageState(
                                        i,
                                        u.GuX.PENDING,
                                    );
                                    let t =
                                            yield r.getCollectionKidsAlbumsLiked(
                                                { page: i, pageSize: a },
                                            ),
                                        s = t.items.map(
                                            (e) => (0, y.vj)(e.data).data,
                                        );
                                    e.pagesLoader.setItems(s, {
                                        page: i,
                                        pager: t.pager,
                                    });
                                } catch (t) {
                                    s.error(t),
                                        e.pagesLoader.setItems(null, {
                                            responseStatus: u.FlZ.ERROR,
                                            page: i,
                                        });
                                }
                        }),
                        reset() {
                            e.pagesLoader.reset();
                        },
                    })),
                $ = n.gK
                    .model("CollectionKidsPlaylistsPage", {
                        pagesLoader: (0, S.Ij)(A.IP),
                    })
                    .views((e) => {
                        let t = {
                            get isShimmerVisible() {
                                return !e.pagesLoader.isSomePageResolved;
                            },
                            get isNeededToLoad() {
                                return e.pagesLoader.isNeedToMakeInitialRequest;
                            },
                            get isRejected() {
                                return e.pagesLoader.isInitialRequestRejected;
                            },
                            get isEmpty() {
                                return e.pagesLoader.isEmpty;
                            },
                            get isResolved() {
                                return e.pagesLoader.isSomePageResolved;
                            },
                            get requestsCount() {
                                return e.pagesLoader.requestsCount;
                            },
                            get items() {
                                var a;
                                return null != (a = e.pagesLoader.items)
                                    ? a
                                    : [];
                            },
                            get shouldShowContent() {
                                return t.isShimmerVisible || t.items.length > 0;
                            },
                            get loadedItems() {
                                var i, r;
                                return null !=
                                    (r =
                                        null == (i = e.pagesLoader.items)
                                            ? void 0
                                            : i.filter((e) => null !== e))
                                    ? r
                                    : [];
                            },
                        };
                        return t;
                    })
                    .actions((e) => ({
                        getData: (0, n.L3)(function* (t) {
                            let { pageSize: a = H.c, page: i = 0 } = t,
                                {
                                    landingBlocksResource: r,
                                    modelActionsLogger: s,
                                } = (0, n._$)(e);
                            if (e.pagesLoader.isPageNeedToLoad(i))
                                try {
                                    e.pagesLoader.setPageState(
                                        i,
                                        u.GuX.PENDING,
                                    );
                                    let t =
                                            yield r.getCollectionKidsPlaylistsLiked(
                                                { page: i, pageSize: a },
                                            ),
                                        s = t.items.map(
                                            (e) => (0, y.dF)(e.data).data,
                                        );
                                    e.pagesLoader.setItems(s, {
                                        page: i,
                                        pager: t.pager,
                                    });
                                } catch (t) {
                                    s.error(t),
                                        e.pagesLoader.setItems(null, {
                                            responseStatus: u.FlZ.ERROR,
                                            page: i,
                                        });
                                }
                        }),
                        reset() {
                            e.pagesLoader.reset();
                        },
                    })),
                J = n.gK
                    .model("CollectionKidsTracksPage", {
                        pagesLoader: (0, S.Ij)(x.vj),
                    })
                    .views((e) => {
                        let t = {
                            get isShimmerVisible() {
                                return !e.pagesLoader.isSomePageResolved;
                            },
                            get isNeededToLoad() {
                                return e.pagesLoader.isNeedToMakeInitialRequest;
                            },
                            get isRejected() {
                                return e.pagesLoader.isInitialRequestRejected;
                            },
                            get isEmpty() {
                                return e.pagesLoader.isEmpty;
                            },
                            get isResolved() {
                                return e.pagesLoader.isSomePageResolved;
                            },
                            get requestsCount() {
                                return e.pagesLoader.requestsCount;
                            },
                            get items() {
                                var a;
                                return null != (a = e.pagesLoader.items)
                                    ? a
                                    : [];
                            },
                            get shouldShowContent() {
                                return t.isShimmerVisible || t.items.length > 0;
                            },
                            get loadedItems() {
                                var i, r;
                                return null !=
                                    (r =
                                        null == (i = e.pagesLoader.items)
                                            ? void 0
                                            : i.filter((e) => null !== e))
                                    ? r
                                    : [];
                            },
                            get sonataEntitiesData() {
                                return t.loadedItems.map(x.$b);
                            },
                        };
                        return t;
                    })
                    .actions((e) => ({
                        getData: (0, n.L3)(function* (t) {
                            let { pageSize: a = H.c, page: i = 0 } = t,
                                {
                                    landingBlocksResource: r,
                                    modelActionsLogger: s,
                                } = (0, n._$)(e);
                            if (e.pagesLoader.isPageNeedToLoad(i))
                                try {
                                    e.pagesLoader.setPageState(
                                        i,
                                        u.GuX.PENDING,
                                    );
                                    let t =
                                            yield r.getCollectionKidsTracksLiked(
                                                { page: i, pageSize: a },
                                            ),
                                        s = t.items
                                            .map(y.vI)
                                            .map((e) => e.data);
                                    e.pagesLoader.setItems(s, {
                                        page: i,
                                        pager: t.pager,
                                    });
                                } catch (t) {
                                    s.error(t),
                                        e.pagesLoader.setItems(null, {
                                            responseStatus: u.FlZ.ERROR,
                                            page: i,
                                        });
                                }
                        }),
                        reset() {
                            e.pagesLoader.reset();
                        },
                    })),
                Z = n.gK
                    .model("CollectionKidsPage", {
                        albums: Q,
                        playlists: $,
                        tracks: J,
                    })
                    .views((e) => ({
                        get isNeededToLoad() {
                            return (
                                e.albums.isNeededToLoad &&
                                e.playlists.isNeededToLoad &&
                                e.tracks.isNeededToLoad
                            );
                        },
                        get isRejected() {
                            return (
                                e.albums.isRejected &&
                                e.playlists.isRejected &&
                                e.tracks.isRejected
                            );
                        },
                        get isResolved() {
                            return (
                                e.albums.isResolved &&
                                e.playlists.isResolved &&
                                e.tracks.isResolved
                            );
                        },
                        get shouldShowContent() {
                            return (
                                e.albums.shouldShowContent ||
                                e.playlists.shouldShowContent ||
                                e.tracks.shouldShowContent
                            );
                        },
                    }))
                    .actions((e) => ({
                        reset() {
                            e.albums.reset(),
                                e.playlists.reset(),
                                e.tracks.reset();
                        },
                    })),
                ee = n.gK
                    .compose(
                        n.gK.model("CollectionShelfLikedPage", {
                            pagesLoader: (0, S.Ij)(M),
                            typeForFrom: n.gK.maybeNull(n.gK.string),
                        }),
                        S.pl,
                    )
                    .views((e) => ({
                        get isShimmerVisible() {
                            return !e.pagesLoader.isSomePageResolved;
                        },
                        get isNeededToLoad() {
                            return e.pagesLoader.isNeedToMakeInitialRequest;
                        },
                        get isRejected() {
                            return e.pagesLoader.isInitialRequestRejected;
                        },
                        get isEmpty() {
                            return e.pagesLoader.isEmpty;
                        },
                        get isResolved() {
                            return e.pagesLoader.isSomePageResolved;
                        },
                        get requestsCount() {
                            return e.pagesLoader.requestsCount;
                        },
                        get items() {
                            return e.pagesLoader.items || [];
                        },
                    }))
                    .actions((e) => ({
                        getData: (0, n.L3)(function* (t) {
                            let { pageSize: a = H.c, page: i = 0 } = t,
                                { nonMusicResource: r, modelActionsLogger: s } =
                                    (0, n._$)(e);
                            if (e.pagesLoader.isPageNeedToLoad(i))
                                try {
                                    var l, o;
                                    e.pagesLoader.setPageState(
                                        i,
                                        u.GuX.PENDING,
                                    );
                                    let t = yield r.getShelfLiked({
                                            page: i,
                                            pageSize: a,
                                        }),
                                        s =
                                            (null == (l = t.entities)
                                                ? void 0
                                                : l.map(O)) || [];
                                    e.pagesLoader.setItems(s, {
                                        page: i,
                                        pager: t.pager,
                                    }),
                                        (e.typeForFrom =
                                            null != (o = t.typeForFrom)
                                                ? o
                                                : null);
                                } catch (t) {
                                    s.error(t),
                                        e.pagesLoader.setItems(null, {
                                            responseStatus: u.FlZ.ERROR,
                                            page: i,
                                        });
                                }
                        }),
                        reset() {
                            e.pagesLoader.reset();
                        },
                    })),
                et = n.gK
                    .model("CollectionShelfRecentlyPlayedPage", {
                        pagesLoader: (0, S.Ij)(K),
                        typeForFrom: n.gK.maybeNull(n.gK.string),
                    })
                    .views((e) => ({
                        get isShimmerVisible() {
                            return !e.pagesLoader.isSomePageResolved;
                        },
                        get isNeededToLoad() {
                            return e.pagesLoader.isNeedToMakeInitialRequest;
                        },
                        get isRejected() {
                            return e.pagesLoader.isInitialRequestRejected;
                        },
                        get isEmpty() {
                            return e.pagesLoader.isEmpty;
                        },
                        get isResolved() {
                            return e.pagesLoader.isSomePageResolved;
                        },
                        get requestsCount() {
                            return e.pagesLoader.requestsCount;
                        },
                        get items() {
                            return e.pagesLoader.items || [];
                        },
                    }))
                    .actions((e) => ({
                        getData: (0, n.L3)(function* (t) {
                            let { pageSize: a = H.c, page: i = 0 } = t,
                                { nonMusicResource: r, modelActionsLogger: s } =
                                    (0, n._$)(e);
                            if (e.pagesLoader.isPageNeedToLoad(i))
                                try {
                                    var l, o;
                                    e.pagesLoader.setPageState(
                                        i,
                                        u.GuX.PENDING,
                                    );
                                    let t = yield r.getShelfRecentlyPlayed({
                                            page: i,
                                            pageSize: a,
                                        }),
                                        s =
                                            (null == (l = t.entities)
                                                ? void 0
                                                : l.map(G)) || [];
                                    e.pagesLoader.setItems(s, {
                                        page: i,
                                        pager: t.pager,
                                    }),
                                        (e.typeForFrom =
                                            null != (o = t.typeForFrom)
                                                ? o
                                                : null);
                                } catch (t) {
                                    s.error(t),
                                        e.pagesLoader.setItems(null, {
                                            responseStatus: u.FlZ.ERROR,
                                            page: i,
                                        });
                                }
                        }),
                        reset() {
                            e.pagesLoader.reset(), (e.typeForFrom = null);
                        },
                    })),
                ea = n.gK.model("CollectionPage", {
                    landing: y.Ju,
                    albums: E,
                    playlists: w,
                    artists: k,
                    shelf: U,
                    shelfRecentlyPlayed: et,
                    shelfLiked: ee,
                    nonMusicLiked: D,
                    dislikes: z,
                    kids: Z,
                    clips: C,
                });
            a(69077),
                a(73250),
                a(26389),
                a(98150),
                a(51460),
                a(23144),
                a(4190),
                a(34620),
                a(84674),
                a(36422),
                a(47052),
                a(83708),
                a(94800),
                a(91302),
                a(18696),
                a(45324),
                a(53827),
                a(6949),
                a(24238);
            var ei = a(73437),
                er = a(15840);
            let es = {
                experiments: {
                    loadingState: u.GuX.IDLE,
                    experiments: {},
                    overwrittenExperiments: {},
                },
                disclaimers: {
                    loadingState: u.GuX.IDLE,
                    recentDisclaimersRequestTS: 0,
                },
                user: {
                    account: { loadingState: u.GuX.IDLE, data: {} },
                    settings: { loadingState: u.GuX.IDLE },
                },
                wizard: {
                    loadingState: u.GuX.IDLE,
                    modal: {},
                    savedLikedArtists: [],
                    likedArtists: [],
                    unlikedArtists: [],
                },
                collection: {
                    albums: {
                        loadingState: u.GuX.IDLE,
                        items: [],
                        upcomingAlbums: { loadingState: u.GuX.IDLE },
                    },
                    playlists: {
                        playlistsLiked: { loadingState: u.GuX.IDLE, items: [] },
                        playlistsCreated: {
                            loadingState: u.GuX.IDLE,
                            items: [],
                        },
                        activeTabIndex: m.a.CREATED,
                        tabs: [m.a.CREATED, m.a.LIKED],
                    },
                    artists: {
                        loadingState: u.GuX.IDLE,
                        items: [],
                        topArtists: { loadingState: u.GuX.IDLE, items: [] },
                    },
                    landing: {
                        loadingState: u.GuX.IDLE,
                        tabs: { loadingState: u.GuX.IDLE },
                    },
                    shelf: {
                        recentlyPlayed: { loadingState: u.GuX.IDLE },
                        newEpisodes: { loadingState: u.GuX.IDLE },
                        liked: { loadingState: u.GuX.IDLE },
                    },
                    nonMusicLiked: { loadingState: u.GuX.IDLE, items: [] },
                    dislikes: {
                        artists: { loadingState: u.GuX.IDLE },
                        tracks: { loadingState: u.GuX.IDLE },
                    },
                    kids: {
                        albums: { pagesLoader: {} },
                        playlists: { pagesLoader: {} },
                        tracks: { pagesLoader: {} },
                    },
                    shelfRecentlyPlayed: { pagesLoader: {} },
                    shelfLiked: { pagesLoader: {} },
                    clips: {
                        loadingState: u.GuX.IDLE,
                        clipsWillLike: { loadingState: u.GuX.IDLE },
                    },
                },
                main: {
                    landing: {
                        loadingState: u.GuX.IDLE,
                        tabs: { loadingState: u.GuX.IDLE },
                    },
                },
                nonMusic: {
                    landing: {
                        loadingState: u.GuX.IDLE,
                        tabs: { loadingState: u.GuX.IDLE },
                    },
                    albums: { loadingState: u.GuX.IDLE },
                    categorySubpage: { loadingState: u.GuX.IDLE },
                    categoryPlaylistsSubpage: { loadingState: u.GuX.IDLE },
                },
                kids: {
                    landing: {
                        loadingState: u.GuX.IDLE,
                        tabs: { loadingState: u.GuX.IDLE },
                    },
                    kidsEditorialPlaylistSubpage: { loadingState: u.GuX.IDLE },
                    kidsEditorialAlbumSubpage: { loadingState: u.GuX.IDLE },
                },
                settings: {
                    layout: null,
                    isLandscape: !1,
                    isMobileLandscapeHeight: !1,
                    browserInfo: {
                        name: void 0,
                        version: void 0,
                        OSFamily: void 0,
                        isMobile: !1,
                        isTablet: !1,
                        isTouch: !1,
                        isBrowser: !1,
                        inAppBrowser: !1,
                        hasHuaweiAppGallery: !1,
                    },
                },
                currentClipInfo: {
                    clipLoadingState: u.GuX.IDLE,
                    creditsLoadingState: u.GuX.IDLE,
                    id: null,
                    clip: null,
                    credits: null,
                    modal: {},
                },
                currentTrackInfo: {
                    trackLoadingState: u.GuX.IDLE,
                    creditsLoadingState: u.GuX.IDLE,
                    descriptionLoadingState: u.GuX.IDLE,
                    id: null,
                    albumId: null,
                    isUGC: null,
                    fullTrack: null,
                    credits: null,
                    modal: {},
                },
                trackLyrics: {
                    loadingState: u.GuX.IDLE,
                    lyrics: null,
                    lyricId: null,
                    externalLyricId: null,
                    track: null,
                    modal: {},
                },
                album: {
                    loadingState: u.GuX.IDLE,
                    items: [],
                    meta: null,
                    otherAlbumVersions: [],
                    allTracksUnfinished: !1,
                    donations: { loadingState: u.GuX.IDLE, items: [] },
                    latestGenreAlbums: { loadingState: u.GuX.IDLE, items: [] },
                    otherArtistAlbums: { loadingState: u.GuX.IDLE, items: [] },
                    relatedContent: { loadingState: u.GuX.IDLE, items: [] },
                },
                promolanding: {
                    loadingState: u.GuX.IDLE,
                    items: [],
                    meta: null,
                    allTracksUnfinished: !1,
                    promoCampaign: { loadingState: u.GuX.IDLE, isActive: !1 },
                    state: {
                        contextId: null,
                        contextType: null,
                        entityMeta: null,
                        status: h.MT.IDLE,
                        canMoveBackward: !1,
                        canMoveForward: !1,
                        canSpeed: !1,
                        canChangeRepeatMode: !0,
                        repeatMode: g.pM.NONE,
                        quality: c.e.BALANCED,
                        canShuffle: !0,
                        shuffle: !1,
                    },
                },
                albumCPA: {},
                artist: {
                    loadingState: u.GuX.IDLE,
                    meta: null,
                    landing: {
                        loadingState: u.GuX.IDLE,
                        tabs: { loadingState: u.GuX.IDLE },
                    },
                    popularTracks: [],
                    similarArtists: [],
                    albums: [],
                    discography: [],
                    compilations: [],
                    playlists: [],
                    clips: [],
                    fullTracksListSubpage: { loadingState: u.GuX.IDLE },
                    albumsSubpage: { loadingState: u.GuX.IDLE },
                    concertsSubpage: { loadingState: u.GuX.IDLE },
                    similarArtistsSubPage: { loadingState: u.GuX.IDLE },
                    familiarInfo: { loadingState: u.GuX.IDLE },
                    familiarSubpage: { loadingState: u.GuX.IDLE },
                    clipsSubpage: { pagesLoader: {} },
                    commonSubPage: {},
                    offlineArtist: {
                        loadingState: u.GuX.IDLE,
                        trackIds: { loadingState: u.GuX.IDLE },
                        downloadedTracks: { loadingState: u.GuX.IDLE },
                    },
                    infoLoadingState: { loadingState: u.GuX.IDLE },
                },
                library: {
                    loadingState: u.GuX.IDLE,
                    tracks: {},
                    artists: {},
                    playlists: {},
                    albums: {},
                    clips: {},
                },
                sonataState: {
                    contextId: null,
                    contextType: null,
                    entityMeta: null,
                    status: h.MT.IDLE,
                    canMoveBackward: !1,
                    canMoveForward: !1,
                    canSpeed: !1,
                    canChangeRepeatMode: !0,
                    repeatMode: g.pM.NONE,
                    quality: c.e.BALANCED,
                    canShuffle: !0,
                    shuffle: !1,
                    areCoresRegistered: !1,
                    isVHCoreRegistered: !1,
                    isCrossFadeEnabled: !0,
                },
                playlist: {
                    loadingState: u.GuX.IDLE,
                    meta: null,
                    items: [],
                    initialItems: [],
                    similarPlaylists: [],
                    filters: {
                        loadingState: u.GuX.IDLE,
                        shouldSendEventOnTabOpened: !0,
                        shouldSendEventOnTabLoaded: !0,
                    },
                    editorFeature: {
                        shouldShowDuplicate: !1,
                        shouldShowGenre: !1,
                        shouldShowMajor: !1,
                        colorMajorMap: {},
                        duplicate: {},
                    },
                    search: { loadingState: u.GuX.IDLE, text: "" },
                },
                slides: {
                    userSlidesLoadingState: u.GuX.IDLE,
                    artistSlidesLoadingState: u.GuX.IDLE,
                    podcastSlidesLoadingState: u.GuX.IDLE,
                    specialSlidesLoadingState: u.GuX.IDLE,
                    userItems: [],
                    artistItems: [],
                    podcastItems: [],
                    specialItems: [],
                    isMuted: !1,
                },
                vibe: {
                    loadingState: u.GuX.IDLE,
                    vibeResetLoadingState: u.GuX.IDLE,
                    isApplying: !1,
                },
                search: {
                    searchCorrectedText: null,
                    loadingState: u.GuX.IDLE,
                    results: [],
                    historyPage: { loadingState: u.GuX.IDLE, items: [] },
                    mixes: { loadingState: u.GuX.IDLE, items: [] },
                    landing: {
                        loadingState: u.GuX.IDLE,
                        tabs: { loadingState: u.GuX.IDLE },
                    },
                    history: { loadingState: u.GuX.IDLE },
                },
                vibeSettings: { loadingState: u.GuX.IDLE },
                pinsCollection: { loadingState: u.GuX.IDLE, index: {} },
                genre: {
                    loadingState: u.GuX.IDLE,
                    albumsSubpage: { loadingState: u.GuX.IDLE },
                    artistsSubpage: {
                        loadingState: u.GuX.IDLE,
                        pagesLoader: {},
                    },
                    playlistsSubpage: { loadingState: u.GuX.IDLE },
                },
                genres: { title: null, loadingState: u.GuX.IDLE, items: [] },
                mixes: { loadingState: u.GuX.IDLE, items: [] },
                tag: {
                    tagLoadingState: u.GuX.IDLE,
                    playlistsLoadingState: u.GuX.IDLE,
                    playlistsData: [],
                    playlists: [],
                },
                chart: {
                    tracksSubPage: { loadingState: u.GuX.IDLE, items: [] },
                    podcastsSubPage: { loadingState: u.GuX.IDLE, items: [] },
                },
                post: { loadingState: u.GuX.IDLE },
                landingBlockEntities: { loadingState: u.GuX.IDLE },
                contextMenuPlaylists: { loadingState: u.GuX.IDLE, items: [] },
                musicHistory: { loadingState: u.GuX.IDLE, tabs: null },
                createPlaylist: {},
                location: {},
                disclaimer: { loadingState: u.GuX.IDLE },
                disclaimerModalData: { loadingState: u.GuX.IDLE },
                myMusic: { downloadedTracks: { loadingState: u.GuX.IDLE } },
                trailer: {
                    loadingState: u.GuX.IDLE,
                    withAnimation: !0,
                    shouldAutoStartPlaying: !0,
                    shouldSendEventOnTracksShowed: !0,
                    modal: {},
                    sonataStatusBeforeTrailerStart: h.MT.IDLE,
                    isManuallyPaused: !0,
                    state: {
                        contextId: null,
                        contextType: null,
                        entityMeta: null,
                        status: h.MT.IDLE,
                    },
                },
                communication: { loadingState: u.GuX.IDLE },
                modals: {
                    disclaimerModal: {},
                    shortcutsModal: {},
                    aboutAppModal: {},
                    overviewModal: {},
                    ugcTrackEditModal: { modal: {} },
                    popoverOverPlayer: {},
                    crackdownModal: {},
                    overwrittenExperimentsModal: {},
                    buySubscriptionModal: { isOpened: !0 },
                    promoLandingBuySubscriptionModal: {},
                    clearMemoryModal: {},
                    imageSliderModal: { modal: {} },
                    artistAboutModal: { loadingState: u.GuX.IDLE, modal: {} },
                    discordRpcSettingsModal: {},
                    vibeBehaviorEnhancementsSettingsModal: {},
                    vibeAnimationEnhancementsSettingsModal: {},
                    playerBarEnhancementsSettingsModal: {},
                    windowBehaviorSettingsModal: {},
                    appUpdatesSettingsModal: {},
                    scrobblersSettingsModal: {},
                    downloaderSettingsModal: {},
                    systemSettingsModal: {},
                },
                landing: {
                    loadingState: u.GuX.IDLE,
                    tabs: { loadingState: u.GuX.IDLE },
                },
                fullscreenPlayer: {
                    modal: {},
                    syncLyrics: { loadingState: u.GuX.IDLE },
                    playQueue: {},
                },
                fullscreenVideoPlayer: {
                    modal: {},
                    ids: [],
                    loadingState: u.GuX.IDLE,
                    sonataStatusBeforeClipStart: h.MT.IDLE,
                    withAnimation: !0,
                    state: {
                        contextId: null,
                        contextType: null,
                        entityMeta: null,
                        status: h.MT.IDLE,
                        canMoveBackward: !1,
                        canMoveForward: !1,
                    },
                },
                advert: {
                    data: null,
                    isAdvertPlaying: !0,
                    isAdvertShown: !1,
                    isAdvertPlaybackCreated: !1,
                },
                ugcUploadCenter: {
                    checkProcessingTracksAttempts: 0,
                    notifications: {},
                },
                paymentWidgetModal: {
                    modal: {},
                    target: "",
                    serviceSessionId: "",
                    tariffOfferName: "",
                    offersBatchId: "",
                    offersPositionIds: "",
                    isSilent: !1,
                    status: er.cF.IDLE,
                },
                offers: { music: { loadingState: u.GuX.IDLE } },
                quality: { modal: {} },
                releaseNotes: { modal: {} },
                slam: { networkStatus: {} },
                favoriteTracks: { loadingState: u.GuX.IDLE },
                track: {
                    loadingState: u.GuX.IDLE,
                    withAnimation: !0,
                    shouldSendEventOnPlusButtonShowed: !0,
                },
                familyInvite: {
                    info: { loadingState: u.GuX.IDLE },
                    acceptanceLoadingState: u.GuX.IDLE,
                    modal: {},
                    step: ei._n.INFO,
                },
                continueListen: {},
                playlistPersonal: { loadingState: u.GuX.IDLE },
                redAlert: { loadingState: u.GuX.IDLE },
                shareIframe: { modal: {} },
                paywall: { modal: {} },
                downloadMobileApp: { modal: {} },
                advertBanners: {
                    banners: {
                        topAdvertBanner: {
                            type: u.h8o.EMPTY,
                            noAds: !1,
                            hasError: !1,
                            isShowBanner: !0,
                        },
                        sideAdvertBanner: {
                            type: u.h8o.EMPTY,
                            noAds: !1,
                            hasError: !1,
                            isShowBanner: !0,
                        },
                        brandedPlaylistBanner: {
                            type: u.h8o.EMPTY,
                            noAds: !1,
                            hasError: !1,
                            isShowBanner: !0,
                        },
                        brandedPlayerBanner: {
                            type: u.h8o.EMPTY,
                            noAds: !1,
                            hasError: !1,
                            isShowBanner: !0,
                            modal: {},
                        },
                    },
                },
                label: {
                    loadingState: u.GuX.IDLE,
                    albumsSubpage: { pagesLoader: {}, sort: {} },
                    artistsSubpage: { pagesLoader: {} },
                },
                desktopPaywall: {},
                concerts: {
                    loadingState: u.GuX.IDLE,
                    config: { loadingState: u.GuX.IDLE },
                    landing: {
                        loadingState: u.GuX.IDLE,
                        tabs: { loadingState: u.GuX.IDLE },
                    },
                },
                concert: {
                    loadingState: u.GuX.IDLE,
                    landing: {
                        loadingState: u.GuX.IDLE,
                        tabs: { loadingState: u.GuX.IDLE },
                    },
                },
            };
            var el = a(14795),
                en = a(48301),
                eo = a(45648),
                ed = a(63661),
                eu = a(44958),
                ec = a(61979),
                eg = a(90848);
            let eh = n.gK
                .compose(
                    n.gK.model("FavoriteTracksPage", {
                        playlistUuid: n.gK.maybeNull(n.gK.string),
                        errorStatusCode: n.gK.maybeNull(n.gK.number),
                    }),
                    S.XT,
                )
                .views((e) => ({
                    get playlistUrl() {
                        if (!e.playlistUuid) return "";
                        let { href: t } = (0, u.uvd)(
                            "/playlists/:playlistUuid",
                            { params: { playlistUuid: e.playlistUuid } },
                        );
                        return t;
                    },
                }))
                .actions((e) => ({
                    getPlaylistUrl: (0, n.L3)(function* () {
                        let { landingResource: t, modelActionsLogger: a } = (0,
                        n._$)(e);
                        if (e.loadingState !== u.GuX.PENDING)
                            try {
                                (e.loadingState = u.GuX.PENDING),
                                    (e.playlistUuid = (yield t.getBlock({
                                        source: {
                                            uri: "/landing/block/collection/playlist-with-likes",
                                            countWeb: 8,
                                        },
                                        type: eg.t
                                            .COLLECTION_PLAYLIST_WITH_LIKES,
                                    })).playlist.playlistUuid),
                                    e.loadingState !== u.GuX.IDLE &&
                                        (e.loadingState = u.GuX.RESOLVE);
                            } catch (t) {
                                a.error(t),
                                    t instanceof ec.GX &&
                                        (t.statusCode === ec.X1.NOT_FOUND ||
                                            t.statusCode ===
                                                ec.X1.BAD_REQUEST) &&
                                        (e.errorStatusCode = ec.X1.NOT_FOUND),
                                    e.loadingState !== u.GuX.IDLE &&
                                        (e.loadingState = u.GuX.REJECT);
                            }
                    }),
                    reset() {
                        (e.loadingState = u.GuX.IDLE), (e.playlistUuid = null);
                    },
                }));
            a(75414);
            var em = a(97410),
                ey = a(74259),
                ep = a(17660),
                ev = a(25767);
            let eS = n.gK.model("MainPage", { landing: y.Ju });
            a(95936);
            var eP = a(61475),
                eE = a(12277),
                eb = a(54344);
            let ef = n.gK
                .compose(
                    n.gK.model("MusicHistoryPage", {
                        indexesMap: n.gK.map(n.gK.number),
                        items: n.gK.maybeNull(n.gK.array(eE.UN)),
                        datesMap: n.gK.map(n.gK.boolean),
                        tabs: n.gK.maybeNull(n.gK.array(eE.WW)),
                    }),
                    S.XT,
                )
                .views((e) => {
                    let t = {
                        get isEmpty() {
                            var a;
                            return (
                                (e.isResolved || e.isRejected) &&
                                (null == (a = e.tabs) ? void 0 : a.length) === 0
                            );
                        },
                        get isShimmerVisible() {
                            return (
                                e.isNeededToLoad || e.isLoading || e.isRejected
                            );
                        },
                        get isShimmerActive() {
                            return e.isLoading;
                        },
                        getStartAndEndIndexes(t) {
                            var a, i;
                            let r = t,
                                s = t + 1;
                            return (
                                (null == (a = e.items)
                                    ? void 0
                                    : a
                                          .slice(t - 25 + 1, t)
                                          .some((e) => !e.isResolved)) &&
                                    (r = t - 25 + 1),
                                (null == (i = e.items)
                                    ? void 0
                                    : i
                                          .slice(t, t + 25)
                                          .some((e) => !e.isResolved)) &&
                                    (s = t + 25),
                                [r, s]
                            );
                        },
                        getItemsToLoad(a) {
                            var i, r;
                            let [s, l] = t.getStartAndEndIndexes(a);
                            return null !=
                                (r =
                                    null == (i = e.items)
                                        ? void 0
                                        : i
                                              .slice(s, l)
                                              .filter((e) => !e.isResolved))
                                ? r
                                : [];
                        },
                        isInObservationRange(t) {
                            var a;
                            return (
                                (0 !== t && t % 25 == 0) ||
                                (e.items &&
                                    t ===
                                        (null == (a = e.items)
                                            ? void 0
                                            : a.length) -
                                            1)
                            );
                        },
                        get dates() {
                            var i, r;
                            return null !=
                                (r =
                                    null == (i = e.tabs)
                                        ? void 0
                                        : i.map((e) => e.date))
                                ? r
                                : [];
                        },
                    };
                    return t;
                })
                .actions((e) => {
                    let t = {
                        fillItemsAndIndexes() {
                            var t;
                            let a = 0;
                            (e.items = (0, n.wg)([])),
                                null == (t = e.tabs) ||
                                    t.forEach((t, i) => {
                                        var r;
                                        e.datesMap.set(t.date, !1),
                                            null == (r = t.blocks) ||
                                                r.forEach((t, r) => {
                                                    var s;
                                                    let l = t.id;
                                                    e.indexesMap.set(
                                                        ""
                                                            .concat(i, "_")
                                                            .concat(r, "_")
                                                            .concat(l),
                                                        a,
                                                    ),
                                                        null == (s = e.items) ||
                                                            s.push({
                                                                id: l,
                                                                type: t.type,
                                                                tabIndex: i,
                                                                blockIndex: r,
                                                                trackIndex:
                                                                    null,
                                                                loadingState:
                                                                    a < 25
                                                                        ? u.GuX
                                                                              .RESOLVE
                                                                        : u.GuX
                                                                              .IDLE,
                                                            }),
                                                        ++a,
                                                        t.tracks.forEach(
                                                            (t, s) => {
                                                                var l;
                                                                e.indexesMap.set(
                                                                    ""
                                                                        .concat(
                                                                            i,
                                                                            "_",
                                                                        )
                                                                        .concat(
                                                                            r,
                                                                            "_",
                                                                        )
                                                                        .concat(
                                                                            s,
                                                                            "_",
                                                                        )
                                                                        .concat(
                                                                            t.id,
                                                                        ),
                                                                    a,
                                                                ),
                                                                    null ==
                                                                        (l =
                                                                            e.items) ||
                                                                        l.push({
                                                                            id: t.id,
                                                                            type: t.type,
                                                                            tabIndex:
                                                                                i,
                                                                            blockIndex:
                                                                                r,
                                                                            trackIndex:
                                                                                s,
                                                                            loadingState:
                                                                                a <
                                                                                25
                                                                                    ? u
                                                                                          .GuX
                                                                                          .RESOLVE
                                                                                    : u
                                                                                          .GuX
                                                                                          .IDLE,
                                                                        }),
                                                                    ++a;
                                                            },
                                                        );
                                                });
                                    });
                        },
                        setTrack(t, a) {
                            var i, r, s, l;
                            let {
                                    tabIndex: n,
                                    blockIndex: o,
                                    trackIndex: d,
                                } = t,
                                { fullModel: c } = a.data;
                            if (null === d) return;
                            let g =
                                null == (l = e.tabs) ||
                                null == (s = l[n]) ||
                                null == (r = s.blocks) ||
                                null == (i = r[o])
                                    ? void 0
                                    : i.tracks[d];
                            g &&
                                ((g.data = (0, x.vU)(c)),
                                (g.loadingState = u.GuX.RESOLVE));
                        },
                        setAlbum(t, a) {
                            var i, r, s;
                            let { tabIndex: l, blockIndex: n } = t,
                                { fullModel: o } = a.data,
                                d =
                                    null == (s = e.tabs) ||
                                    null == (r = s[l]) ||
                                    null == (i = r.blocks)
                                        ? void 0
                                        : i[n];
                            (0, eE.z)(d) &&
                                ((d.meta = (0, p.sK)({
                                    album: o.album,
                                    artists: o.artists,
                                })),
                                (d.loadingState = u.GuX.RESOLVE));
                        },
                        setArtist(t, a) {
                            var i, r, s;
                            let { tabIndex: l, blockIndex: n } = t,
                                { fullModel: o } = a.data,
                                d =
                                    null == (s = e.tabs) ||
                                    null == (r = s[l]) ||
                                    null == (i = r.blocks)
                                        ? void 0
                                        : i[n];
                            (0, eE.bg)(d) &&
                                ((d.meta = (0, f.as)({ artist: o.artist })),
                                (d.loadingState = u.GuX.RESOLVE));
                        },
                        setPlaylist(t, a) {
                            var i, r, s;
                            let { tabIndex: l, blockIndex: n } = t,
                                { fullModel: o } = a.data,
                                d =
                                    null == (s = e.tabs) ||
                                    null == (r = s[l]) ||
                                    null == (i = r.blocks)
                                        ? void 0
                                        : i[n];
                            (0, eE.kU)(d) &&
                                ((d.meta = {
                                    ...(0, A.bk)({ playlist: o.playlist }),
                                    tracksCount: o.tracksCount,
                                }),
                                (d.loadingState = u.GuX.RESOLVE));
                        },
                        setVibe(t, a) {
                            var i, r, s;
                            let { tabIndex: l, blockIndex: n } = t,
                                { fullModel: o } = a.data,
                                d =
                                    null == (s = e.tabs) ||
                                    null == (r = s[l]) ||
                                    null == (i = r.blocks)
                                        ? void 0
                                        : i[n];
                            (0, eE.sr)(d) &&
                                ((d.meta = {
                                    ...(0, eb.er)(o.wave),
                                    imageUrl: o.simpleWaveForegroundImageUrl,
                                    backgroundColor:
                                        o.simpleWaveBackgroundColor,
                                }),
                                (d.loadingState = u.GuX.RESOLVE));
                        },
                        getMusicHistory: (0, n.L3)(function* () {
                            let {
                                musicHistoryResource: a,
                                modelActionsLogger: i,
                            } = (0, n._$)(e);
                            if (e.loadingState !== u.GuX.PENDING)
                                try {
                                    e.loadingState = u.GuX.PENDING;
                                    let i = yield a.getMusicHistory({
                                            fullModelsCount: 25,
                                        }),
                                        r = ((e) => {
                                            let t = { historyTabs: [] },
                                                a = 0;
                                            for (let s of e.historyTabs) {
                                                var i, r;
                                                if (a > 1e3) break;
                                                let e = { ...s, items: [] };
                                                for (let t of null !=
                                                (i = s.items)
                                                    ? i
                                                    : []) {
                                                    if (a > 1e3) break;
                                                    let i = {
                                                        ...t,
                                                        tracks: [],
                                                    };
                                                    for (let e of t.tracks) {
                                                        if (a > 1e3) break;
                                                        i.tracks.push(e), ++a;
                                                    }
                                                    null == (r = e.items) ||
                                                        r.push(i);
                                                }
                                                e.items &&
                                                    e.items.length > 0 &&
                                                    t.historyTabs.push(e);
                                            }
                                            return t;
                                        })(i);
                                    (e.tabs = (0, n.wg)(
                                        r.historyTabs.map(eE.Sv),
                                    )),
                                        t.fillItemsAndIndexes(),
                                        (e.loadingState = u.GuX.RESOLVE);
                                } catch (t) {
                                    i.error(t), (e.loadingState = u.GuX.REJECT);
                                }
                        }),
                        getItems: (0, n.L3)(function* (a) {
                            let {
                                musicHistoryResource: i,
                                modelActionsLogger: r,
                            } = (0, n._$)(e);
                            try {
                                let r = e.getItemsToLoad(a);
                                r.forEach((e) => {
                                    e.loadingState = u.GuX.RESOLVE;
                                });
                                let s = yield i.getMusicHistoryItems({
                                        items: r
                                            .map((e) => {
                                                switch (e.type) {
                                                    case eP.D.ARTIST:
                                                    case eP.D.ALBUM:
                                                        return {
                                                            type: e.type,
                                                            data: {
                                                                itemId: {
                                                                    id: e.id,
                                                                },
                                                            },
                                                        };
                                                    case eP.D.PLAYLIST: {
                                                        let [t, a] =
                                                            e.id.split(":");
                                                        return {
                                                            type: e.type,
                                                            data: {
                                                                itemId: {
                                                                    uid: Number(
                                                                        t,
                                                                    ),
                                                                    kind: Number(
                                                                        a,
                                                                    ),
                                                                },
                                                            },
                                                        };
                                                    }
                                                    case eP.D.WAVE:
                                                        return {
                                                            type: e.type,
                                                            data: {
                                                                itemId: {
                                                                    seeds: e.id.split(
                                                                        ",",
                                                                    ),
                                                                },
                                                            },
                                                        };
                                                    case eP.D.TRACK: {
                                                        let [t, a] =
                                                            e.id.split(":");
                                                        return {
                                                            type: e.type,
                                                            data: {
                                                                itemId: {
                                                                    trackId:
                                                                        String(
                                                                            t,
                                                                        ),
                                                                    albumId: a,
                                                                },
                                                            },
                                                        };
                                                    }
                                                    default:
                                                        return null;
                                                }
                                            })
                                            .filter((e) => e),
                                    }),
                                    l = r.reduce((e, t) => {
                                        let a = ""
                                            .concat(t.type, "_")
                                            .concat(t.id);
                                        if (a in e) {
                                            var i;
                                            null == (i = e[a]) || i.push(t);
                                        } else e[a] = [t];
                                        return e;
                                    }, {});
                                s.items.forEach((e) => {
                                    var a;
                                    null ==
                                        (a =
                                            l[
                                                ((e) => {
                                                    switch (e.type) {
                                                        case eP.D.ALBUM:
                                                            return ""
                                                                .concat(
                                                                    e.type,
                                                                    "_",
                                                                )
                                                                .concat(
                                                                    (0, eE.tM)(
                                                                        e,
                                                                    ),
                                                                );
                                                        case eP.D.TRACK:
                                                            return ""
                                                                .concat(
                                                                    e.type,
                                                                    "_",
                                                                )
                                                                .concat(
                                                                    (0, eE.QF)(
                                                                        e,
                                                                    ),
                                                                );
                                                        case eP.D.WAVE:
                                                            return ""
                                                                .concat(
                                                                    e.type,
                                                                    "_",
                                                                )
                                                                .concat(
                                                                    (0, eE.u)(
                                                                        e,
                                                                    ),
                                                                );
                                                        case eP.D.PLAYLIST:
                                                            return ""
                                                                .concat(
                                                                    e.type,
                                                                    "_",
                                                                )
                                                                .concat(
                                                                    (0, eE.uZ)(
                                                                        e,
                                                                    ),
                                                                );
                                                        case eP.D.ARTIST:
                                                            return ""
                                                                .concat(
                                                                    e.type,
                                                                    "_",
                                                                )
                                                                .concat(
                                                                    (0, eE.Hp)(
                                                                        e,
                                                                    ),
                                                                );
                                                    }
                                                })(e)
                                            ]) ||
                                        a.forEach((a) => {
                                            switch (e.type) {
                                                case eP.D.ALBUM:
                                                    t.setAlbum(a, e);
                                                    break;
                                                case eP.D.TRACK:
                                                    t.setTrack(a, e);
                                                    break;
                                                case eP.D.WAVE:
                                                    t.setVibe(a, e);
                                                    break;
                                                case eP.D.PLAYLIST:
                                                    t.setPlaylist(a, e);
                                                    break;
                                                case eP.D.ARTIST:
                                                    t.setArtist(a, e);
                                            }
                                            a.loadingState = u.GuX.RESOLVE;
                                        });
                                });
                            } catch (e) {
                                r.error(e);
                            }
                        }),
                        setDatesMap(t, a) {
                            e.datesMap.set(t, a);
                        },
                        reset() {
                            (e.items = null),
                                (e.tabs = null),
                                e.indexesMap.clear(),
                                e.datesMap.clear(),
                                (e.loadingState = u.GuX.IDLE);
                        },
                    };
                    return t;
                });
            a(35233), a(68941);
            var eI = a(47416);
            let ek = n.gK.model("MyMusicPage", { downloadedTracks: eI.b });
            a(39959);
            var e_ = a(55613),
                eT = a(84706),
                eC = a(83001),
                eD = a(36800),
                eA = a(39535),
                eL = a(21837),
                eN = a(18194),
                eR = a(10462);
            let ew = [
                    eR.n.ARTIST,
                    eR.n.ALBUM,
                    eR.n.TRACK,
                    eR.n.PLAYLIST,
                    eR.n.WAVE,
                    eR.n.PODCAST,
                    eR.n.PODCAST_EPISODE,
                ],
                ex = [
                    eR.n.ALBUM,
                    eR.n.ARTIST,
                    eR.n.PLAYLIST,
                    eR.n.TRACK,
                    eR.n.UGC_TRACK,
                    eR.n.WAVE,
                    eR.n.PODCAST,
                    eR.n.PODCAST_EPISODE,
                    eR.n.CLIP,
                ],
                eO = (e) => {
                    let { wave: t } = e;
                    return (0, n.wg)({
                        title: t.title,
                        description: t.subTitle,
                        seeds: ["".concat(t.id.type, ":").concat(t.id.tag)],
                        backgroundColor: t.color,
                        imageUrl: t.image,
                        agent: (0, eb.KU)(t.agent),
                    });
                },
                eG = (e) => {
                    let { type: t } = e;
                    switch (t) {
                        case eR.n.UGC_TRACK:
                            return { type: t, data: (0, x.or)(e.track) };
                        case eR.n.TRACK:
                            return { type: t, data: (0, x.vU)(e.track) };
                        case eR.n.ARTIST:
                            return { type: t, data: (0, f.dM)(e.artist) };
                        case eR.n.PLAYLIST:
                            return {
                                type: t,
                                data: (0, A.Ew)({ ...e.playlist, artists: [] }),
                            };
                        case eR.n.ALBUM:
                            return { type: t, data: (0, p.pp)(e.album) };
                        case eR.n.WAVE:
                            return { type: t, data: eO(e) };
                        case eR.n.PODCAST:
                            return { type: t, data: (0, p.pp)(e.podcast) };
                        case eR.n.PODCAST_EPISODE:
                            return {
                                type: t,
                                data: (0, x.vU)(e.podcast_episode),
                            };
                        default:
                            return null;
                    }
                };
            var eM = a(11167),
                eK = a(65255),
                eF = a(51551);
            let eX = n.gK
                    .compose(
                        n.gK.model("SearchHistoryPage", {
                            items: n.gK.array(eN.jU),
                        }),
                        S.pl,
                        S.XT,
                    )
                    .actions((e) => ({
                        reset() {
                            e.destroyItems([e.items]);
                        },
                    })),
                ej = n.gK
                    .model("SearchHistory", {
                        loadingState: n.gK.enumeration(Object.values(u.GuX)),
                        shouldUpdateHistory: n.gK.optional(n.gK.boolean, !1),
                    })
                    .views((e) => ({
                        get hasCleared() {
                            return e.loadingState === u.GuX.RESOLVE;
                        },
                    }))
                    .actions((e) => ({
                        setShouldUpdateHistory(t) {
                            e.shouldUpdateHistory = t;
                        },
                        clear: (0, n.L3)(function* () {
                            if (!(0, n._n)(e)) return;
                            let { user: t } = (0, n.Zn)(e),
                                { usersResource: a, modelActionsLogger: i } =
                                    (0, n._$)(e);
                            if (
                                e.loadingState !== u.GuX.PENDING &&
                                t.account.data.uid
                            )
                                try {
                                    (e.loadingState = u.GuX.PENDING),
                                        yield a.clearSearchHistory({
                                            userId: t.account.data.uid,
                                        }),
                                        (e.loadingState = u.GuX.RESOLVE);
                                } catch (t) {
                                    i.error(t), (e.loadingState = u.GuX.REJECT);
                                }
                        }),
                        reset() {
                            e.loadingState = u.GuX.IDLE;
                        },
                    })),
                eU = n.gK
                    .compose(
                        n.gK.model("SearchPage", {
                            searchCorrectedText: n.gK.maybeNull(n.gK.string),
                            searchRequestId: n.gK.optional(n.gK.string, ""),
                            results: n.gK.array(eN.jU),
                            bestResults: n.gK.array(eN.xo),
                            historyPage: eX,
                            mixes: eL.YM,
                            landing: y.Ju,
                            history: ej,
                            filters: n.gK.maybeNull(n.gK.array(eN.k1)),
                        }),
                        S.pl,
                        S.XT,
                    )
                    .views((e) => ({
                        get isHistoryShimmerVisible() {
                            return (
                                e.historyPage.isLoading ||
                                e.historyPage.isRejected
                            );
                        },
                        get isHistoryLoading() {
                            return e.historyPage.isLoading;
                        },
                        get isHistoryReady() {
                            return e.historyPage.isNeededToLoad;
                        },
                        get isEmptyHistory() {
                            return (
                                !e.historyPage.items.length &&
                                e.historyPage.isResolved
                            );
                        },
                        get isShimmerVisible() {
                            return e.isLoading || e.isRejected;
                        },
                        get isEmpty() {
                            return (
                                !e.isLoading &&
                                0 === e.results.length &&
                                0 === e.bestResults.length
                            );
                        },
                    }))
                    .actions((e) => ({
                        getSearchResults: (0, n.L3)(function* (t) {
                            let { text: a, filter: i, withClips: r = !1 } = t,
                                { searchResource: s } = (0, n._$)(e);
                            try {
                                let t;
                                e.loadingState = u.GuX.PENDING;
                                let l = yield s.getInstantMixedSearch({
                                    text: a,
                                    type:
                                        ((t = [...ex]),
                                        i === eA.$.TOP &&
                                            (t = t.filter(
                                                (e) => e !== eR.n.UGC_TRACK,
                                            )),
                                        r ||
                                            (t = t.filter(
                                                (e) => e !== eR.n.CLIP,
                                            )),
                                        t),
                                    filter: i === eA.$.TOP ? void 0 : i,
                                    withLikesCount: !0,
                                    page: 0,
                                    pageSize: 36,
                                    withBestResults: i === eA.$.TOP,
                                });
                                l.misspellResult &&
                                    (e.searchCorrectedText = l.misspellResult),
                                    l.results &&
                                        l.results.length > 0 &&
                                        ((e.results = (0, n.wg)(
                                            l.results
                                                .map((e) => {
                                                    switch (e.type) {
                                                        case eR.n.ALBUM:
                                                            return {
                                                                type: eR.n
                                                                    .ALBUM,
                                                                data: (0, p.pp)(
                                                                    e.album,
                                                                ),
                                                            };
                                                        case eR.n.ARTIST:
                                                            return {
                                                                type: eR.n
                                                                    .ARTIST,
                                                                data: (0, f.dM)(
                                                                    e.artist,
                                                                ),
                                                            };
                                                        case eR.n.PLAYLIST:
                                                            return {
                                                                type: eR.n
                                                                    .PLAYLIST,
                                                                data: (0, A.Ew)(
                                                                    {
                                                                        ...e.playlist,
                                                                        artists:
                                                                            [],
                                                                    },
                                                                ),
                                                            };
                                                        case eR.n.UGC_TRACK:
                                                            return {
                                                                type: eR.n
                                                                    .UGC_TRACK,
                                                                data: (0, x.or)(
                                                                    e.track,
                                                                ),
                                                            };
                                                        case eR.n.TRACK:
                                                            return {
                                                                type: eR.n
                                                                    .TRACK,
                                                                data: (0, x.vU)(
                                                                    e.track,
                                                                ),
                                                            };
                                                        case eR.n.WAVE:
                                                            return {
                                                                type: eR.n.WAVE,
                                                                data: eO(e),
                                                            };
                                                        case eR.n.PODCAST:
                                                            return {
                                                                type: eR.n
                                                                    .PODCAST,
                                                                data: (0, p.pp)(
                                                                    e.podcast,
                                                                ),
                                                            };
                                                        case eR.n.CLIP:
                                                            return {
                                                                type: eR.n.CLIP,
                                                                data: (0, _.i$)(
                                                                    e.clip,
                                                                ),
                                                            };
                                                        case eR.n
                                                            .PODCAST_EPISODE:
                                                            return {
                                                                type: eR.n
                                                                    .PODCAST_EPISODE,
                                                                data: (0, x.vU)(
                                                                    e.podcast_episode,
                                                                ),
                                                            };
                                                    }
                                                })
                                                .filter((e) => e),
                                        )),
                                        (e.searchRequestId =
                                            l.searchRequestId)),
                                    l.bestResults &&
                                        l.bestResults.length > 0 &&
                                        (e.bestResults = (0, n.wg)(
                                            l.bestResults
                                                .map((e) => {
                                                    switch (e.type) {
                                                        case eM.r.ALBUM:
                                                            return {
                                                                type: eM.r
                                                                    .ALBUM,
                                                                data: (0, p.sK)(
                                                                    {
                                                                        album: e
                                                                            .best_result_album
                                                                            .album,
                                                                        artists:
                                                                            e
                                                                                .best_result_album
                                                                                .artists,
                                                                        trailer:
                                                                            e
                                                                                .best_result_album
                                                                                .trailer,
                                                                    },
                                                                ),
                                                            };
                                                        case eM.r.PLAYLIST:
                                                            return {
                                                                type: eM.r
                                                                    .PLAYLIST,
                                                                data: (0, A.bk)(
                                                                    {
                                                                        playlist:
                                                                            e
                                                                                .best_result_playlist
                                                                                .playlist,
                                                                        likesCount:
                                                                            e
                                                                                .best_result_playlist
                                                                                .likesCount,
                                                                        tracksCount:
                                                                            e
                                                                                .best_result_playlist
                                                                                .trackCount,
                                                                        trailer:
                                                                            e
                                                                                .best_result_playlist
                                                                                .trailer,
                                                                    },
                                                                ),
                                                            };
                                                        case eM.r
                                                            .RECENT_RELEASE:
                                                            return {
                                                                type: eM.r
                                                                    .RECENT_RELEASE,
                                                                data: (0, p.sK)(
                                                                    {
                                                                        album: e
                                                                            .best_result_recent_release
                                                                            .album,
                                                                        artists:
                                                                            e
                                                                                .best_result_recent_release
                                                                                .artists,
                                                                        trailer:
                                                                            e
                                                                                .best_result_recent_release
                                                                                .trailer,
                                                                    },
                                                                ),
                                                            };
                                                        case eM.r.WAVE:
                                                            return {
                                                                type: eM.r.WAVE,
                                                                data: (0,
                                                                eb.er)(
                                                                    e.best_result_wave,
                                                                ),
                                                            };
                                                        case eM.r.ARTIST:
                                                            return {
                                                                type: eM.r
                                                                    .ARTIST,
                                                                data: (0, f.as)(
                                                                    {
                                                                        artist: e
                                                                            .best_result_artist
                                                                            .artist,
                                                                        trailer:
                                                                            e
                                                                                .best_result_artist
                                                                                .trailer,
                                                                        likesCount:
                                                                            e
                                                                                .best_result_artist
                                                                                .likesCount,
                                                                    },
                                                                ),
                                                            };
                                                        case eM.r.UPCOMING:
                                                            return {
                                                                type: eM.r
                                                                    .UPCOMING,
                                                                data: (0, p.lO)(
                                                                    e.best_result_upcoming,
                                                                ),
                                                            };
                                                        case eM.r.CONCERT:
                                                            return {
                                                                type: eM.r
                                                                    .CONCERT,
                                                                data: (0,
                                                                eF.oP)(
                                                                    e.best_result_concert,
                                                                ),
                                                            };
                                                        case eM.r.PODCAST:
                                                            return {
                                                                type: eM.r
                                                                    .PODCAST,
                                                                data: (0, p.sK)(
                                                                    {
                                                                        album: e
                                                                            .best_result_podcast
                                                                            .album,
                                                                        likesCount:
                                                                            e
                                                                                .best_result_podcast
                                                                                .likesCount,
                                                                    },
                                                                ),
                                                            };
                                                        case eM.r
                                                            .PODCAST_EPISODE:
                                                            return {
                                                                type: eM.r
                                                                    .PODCAST_EPISODE,
                                                                data: (0, x.vU)(
                                                                    e.best_result_podcast_episode,
                                                                ),
                                                            };
                                                        case eM.r.OVERVIEW:
                                                            return {
                                                                type: eM.r
                                                                    .OVERVIEW,
                                                                data: (0,
                                                                eK.tm)(
                                                                    e.best_result_overview,
                                                                ),
                                                            };
                                                        case eM.r.NON_MUSIC:
                                                            return {
                                                                type: eM.r
                                                                    .NON_MUSIC,
                                                                data: (0, p.sK)(
                                                                    {
                                                                        album: e
                                                                            .best_result_non_music
                                                                            .album,
                                                                        artists:
                                                                            e
                                                                                .best_result_non_music
                                                                                .artists,
                                                                        releaseYear:
                                                                            e
                                                                                .best_result_non_music
                                                                                .releaseYear,
                                                                    },
                                                                ),
                                                            };
                                                        case eM.r.TRACK:
                                                            return {
                                                                type: eM.r
                                                                    .TRACK,
                                                                data: (0, x.vU)(
                                                                    e.best_result_track,
                                                                ),
                                                            };
                                                        case eM.r.CLIP:
                                                            return {
                                                                type: eM.r.CLIP,
                                                                data: (0, _.i$)(
                                                                    e.best_result_clip,
                                                                ),
                                                            };
                                                        case eM.r.BOOK_CHAPTER:
                                                            return {
                                                                type: eM.r
                                                                    .BOOK_CHAPTER,
                                                                data: (0, x.vU)(
                                                                    e.best_result_book_chapter,
                                                                ),
                                                            };
                                                    }
                                                })
                                                .filter((e) => e),
                                        )),
                                    l.filters &&
                                        l.filters.length > 0 &&
                                        (e.filters = (0, n.wg)(l.filters)),
                                    (e.loadingState = u.GuX.RESOLVE);
                            } catch (t) {
                                e.loadingState = u.GuX.REJECT;
                            }
                        }),
                        getHistory: (0, n.L3)(function* (t) {
                            let { userId: a } = t;
                            if (e.historyPage.loadingState === u.GuX.PENDING)
                                return;
                            let { usersResource: i, modelActionsLogger: r } =
                                (0, n._$)(e);
                            try {
                                e.historyPage.loadingState = u.GuX.PENDING;
                                let t = yield i.getSearchHistory({
                                    userId: a,
                                    supportedTypes: ew,
                                });
                                (e.historyPage.items = (0, n.wg)(
                                    t.map(eG).filter((e) => e),
                                )),
                                    (e.historyPage.loadingState =
                                        u.GuX.RESOLVE);
                            } catch (t) {
                                r.error(t),
                                    (e.historyPage.loadingState = u.GuX.REJECT);
                            }
                        }),
                        clearHistory: (0, n.L3)(function* (t) {
                            let { userId: a } = t,
                                { usersResource: i, modelActionsLogger: r } =
                                    (0, n._$)(e);
                            if (e.loadingState !== u.GuX.PENDING)
                                try {
                                    (e.loadingState = u.GuX.PENDING),
                                        yield i.clearSearchHistory({
                                            userId: a,
                                        }),
                                        (e.loadingState = u.GuX.RESOLVE);
                                } catch (t) {
                                    r.error(t), (e.loadingState = u.GuX.REJECT);
                                }
                        }),
                        resetHistoryItems() {
                            e.historyPage.reset();
                        },
                        resetHistoryStateRequest() {
                            (e.historyPage.loadingState = u.GuX.IDLE),
                                e.historyPage.reset();
                        },
                        resetResults() {
                            e.destroyItems([e.results, e.bestResults]);
                        },
                        resetSearchCorrectedText() {
                            e.searchCorrectedText = null;
                        },
                        reset() {
                            (e.searchCorrectedText = null),
                                (e.loadingState = u.GuX.IDLE),
                                (e.filters = null),
                                e.destroyItems([e.results, e.bestResults]);
                        },
                        sendFeedback: (0, n.L3)(function* (t) {
                            let { searchResource: a, modelActionsLogger: i } =
                                (0, n._$)(e);
                            try {
                                yield a.sendFeedback(t);
                            } catch (e) {
                                i.error(e);
                            }
                        }),
                    }));
            a(2488), a(3230), a(15533), a(5762);
            var eB = a(70286),
                eV = a(36396),
                eq = a(26660),
                eY = a(33492);
            let eW = n.gK
                .model("AdvertBanners", {
                    banners: n.gK.model({
                        topAdvertBanner: S.JE,
                        sideAdvertBanner: S.JE,
                        brandedPlaylistBanner: eY.Ab,
                        brandedPlayerBanner: eq.v,
                    }),
                })
                .views((e) => {
                    let t = {
                        get values() {
                            return [
                                e.banners.topAdvertBanner,
                                e.banners.sideAdvertBanner,
                                e.banners.brandedPlaylistBanner,
                            ];
                        },
                        get hasBranding() {
                            return t.values.some(
                                (e) => e.type === u.h8o.BRANDING,
                            );
                        },
                        isVisible(a) {
                            let { experiments: i } = (0, n.Zn)(e);
                            if (
                                i.checkExperiment(u.zal.WebNextDisableAds, "on")
                            )
                                return !1;
                            if (a === u.h8o.EMPTY) return !0;
                            let r = t.values.filter(
                                (e) => e.type !== u.h8o.EMPTY,
                            );
                            return a === u.h8o.DIRECT
                                ? r.every((e) => e.type === u.h8o.DIRECT)
                                : a !== u.h8o.CREATIVE ||
                                      r.every((e) => e.type !== u.h8o.BRANDING);
                        },
                    };
                    return t;
                });
            var ez = a(40238);
            !(function (e) {
                (e.BAR_BELOW = "barBellow"), (e.FULLSCREEN = "fullscreen");
            })(i || (i = {}));
            var eH = a(86823),
                eQ = a(10560);
            let e$ = n.gK.model("CommunicationList", {
                    barBelow: eH.t5,
                    modal: eQ.k8,
                }),
                eJ = n.gK
                    .model("Communication", {
                        loadingState: n.gK.enumeration(Object.values(u.GuX)),
                        list: n.gK.maybe(e$),
                        errorStatusCode: n.gK.maybeNull(n.gK.number),
                    })
                    .views((e) => ({
                        get withTriggersV2() {
                            let { experiments: t } = (0, n.Zn)(e);
                            return t.checkExperiment(
                                u.zal.WebNextTriggersV2,
                                "on",
                            );
                        },
                    }))
                    .actions((e) => {
                        let t = {
                            getData: (0, n.L3)(function* () {
                                    let {
                                        dynamicPagesResource: a,
                                        modelActionsLogger: r,
                                    } = (0, n._$)(e);

                                    return (e.loadingState = u.GuX.RESOLVE);

                            }),
                            // getData: (0, n.L3)(function* () {
                            //     let {
                            //         dynamicPagesResource: a,
                            //         modelActionsLogger: r,
                            //     } = (0, n._$)(e);
                            //     if (
                            //         e.loadingState !== u.GuX.PENDING &&
                            //         e.loadingState !== u.GuX.RESOLVE
                            //     )
                            //         try {
                            //             var s;
                            //             let r;
                            //             if (
                            //                 (((e.loadingState = u.GuX.PENDING),
                            //                 (s = r =
                            //                     e.withTriggersV2
                            //                         ? yield a.getTriggersV2({
                            //                               anchorIds:
                            //                                   Object.values(
                            //                                       ez.v,
                            //                                   ),
                            //                           })
                            //                         : yield a.getTriggers({
                            //                               anchorIds:
                            //                                   Object.values(
                            //                                       ez.v,
                            //                                   ),
                            //                           })) &&
                            //                     s.triggers &&
                            //                     Array.isArray(s.triggers) &&
                            //                     s.triggers.every(
                            //                         (e) =>
                            //                             !!(
                            //                                 e &&
                            //                                 "object" ==
                            //                                     typeof e &&
                            //                                 "anchorId" in e &&
                            //                                 "triggers" in e &&
                            //                                 Array.isArray(
                            //                                     e.triggers,
                            //                                 ) &&
                            //                                 e.triggers.every(
                            //                                     (e) =>
                            //                                         !!(
                            //                                             e &&
                            //                                             "object" ==
                            //                                                 typeof e &&
                            //                                             "screenId" in
                            //                                                 e &&
                            //                                             "feedbackToken" in
                            //                                                 e &&
                            //                                             "data" in
                            //                                                 e &&
                            //                                             "meta" in
                            //                                                 e
                            //                                         ),
                            //                                 )
                            //                             ),
                            //                     ))
                            //                     ? (e.list = ((e) => {
                            //                           let t = [],
                            //                               a = [];
                            //                           return (
                            //                               e.triggers.forEach(
                            //                                   (e) => {
                            //                                       var r;
                            //                                       switch (
                            //                                           null ==
                            //                                           (r =
                            //                                               e
                            //                                                   .triggers[0])
                            //                                               ? void 0
                            //                                               : r
                            //                                                     .meta
                            //                                                     .notificationId
                            //                                       ) {
                            //                                           case i.BAR_BELOW:
                            //                                               return void e.triggers.forEach(
                            //                                                   (
                            //                                                       e,
                            //                                                   ) => {
                            //                                                       t.push(
                            //                                                           (0,
                            //                                                           eH.S3)(
                            //                                                               e,
                            //                                                           ),
                            //                                                       );
                            //                                                   },
                            //                                               );
                            //                                           case i.FULLSCREEN:
                            //                                               return void e.triggers.forEach(
                            //                                                   (
                            //                                                       e,
                            //                                                   ) => {
                            //                                                       a.push(
                            //                                                           (0,
                            //                                                           eQ.fZ)(
                            //                                                               e,
                            //                                                           ),
                            //                                                       );
                            //                                                   },
                            //                                               );
                            //                                       }
                            //                                   },
                            //                               ),
                            //                               (0, n.wg)({
                            //                                   barBelow: {
                            //                                       list: t,
                            //                                   },
                            //                                   modal: {
                            //                                       list: a,
                            //                                   },
                            //                               })
                            //                           );
                            //                       })(r))
                            //                     : r &&
                            //                       r.triggers &&
                            //                       Array.isArray(r.triggers) &&
                            //                       r.triggers.every(
                            //                           (e) =>
                            //                               !!(
                            //                                   e &&
                            //                                   "object" ==
                            //                                       typeof e &&
                            //                                   "anchorId" in e &&
                            //                                   "screenId" in e &&
                            //                                   "div" in e &&
                            //                                   "meta" in e &&
                            //                                   !("triggers" in e)
                            //                               ),
                            //                       ) &&
                            //                       (e.list = ((e) => {
                            //                           let t = [],
                            //                               a = [];
                            //                           return (
                            //                               e.triggers.forEach(
                            //                                   (e) => {
                            //                                       switch (
                            //                                           e.meta
                            //                                               .notificationId
                            //                                       ) {
                            //                                           case i.BAR_BELOW:
                            //                                               t.push(
                            //                                                   (0,
                            //                                                   eH.S3)(
                            //                                                       e,
                            //                                                   ),
                            //                                               );
                            //                                               return;
                            //                                           case i.FULLSCREEN:
                            //                                               a.push(
                            //                                                   (0,
                            //                                                   eQ.fZ)(
                            //                                                       e,
                            //                                                   ),
                            //                                               );
                            //                                               return;
                            //                                       }
                            //                                   },
                            //                               ),
                            //                               (0, n.wg)({
                            //                                   barBelow: {
                            //                                       list: t,
                            //                                   },
                            //                                   modal: {
                            //                                       list: a,
                            //                                   },
                            //                               })
                            //                           );
                            //                       })(r)),
                            //                 e.loadingState !== u.GuX.IDLE &&
                            //                     (e.loadingState =
                            //                         u.GuX.RESOLVE),
                            //                 !e.list)
                            //             )
                            //                 return;
                            //             let { barBelow: l, modal: o } = e.list;
                            //             l.setAnchorId(ez.v.ON_START_BAR_BELOW),
                            //                 l.barBelowItem &&
                            //                     (l.show(),
                            //                     t.shown(
                            //                         l.barBelowItem.anchorId,
                            //                         l.barBelowItem.screenId,
                            //                         l.barBelowItem
                            //                             .feedbackToken,
                            //                     )),
                            //                 o.setAnchorId(
                            //                     ez.v.ON_START_FULLSCREEN,
                            //                 ),
                            //                 o.modalItem &&
                            //                     (o.open(),
                            //                     t.shown(
                            //                         o.modalItem.anchorId,
                            //                         o.modalItem.screenId,
                            //                         o.modalItem.feedbackToken,
                            //                     ));
                            //         } catch (t) {
                            //             r.error(t),
                            //                 t instanceof ec.GX &&
                            //                     (t.statusCode ===
                            //                         ec.X1.NOT_FOUND ||
                            //                         t.statusCode ===
                            //                             ec.X1.BAD_REQUEST) &&
                            //                     (e.errorStatusCode =
                            //                         ec.X1.NOT_FOUND),
                            //                 e.loadingState !== u.GuX.IDLE &&
                            //                     (e.loadingState = u.GuX.REJECT);
                            //         }
                            // }),
                            shown: (0, n.L3)(function* (t, a, i) {
                                let {
                                    dynamicPagesResource: r,
                                    modelActionsLogger: s,
                                } = (0, n._$)(e);
                                try {
                                    e.withTriggersV2 && i
                                        ? yield r.shownV2({
                                              anchorIds: [t],
                                              feedbackToken: i,
                                          })
                                        : yield r.shown({
                                              anchorIds: [t],
                                              screenId: a,
                                          });
                                } catch (e) {
                                    s.error(e);
                                }
                            }),
                            action: (0, n.L3)(function* (t, a, i, r) {
                                let {
                                    dynamicPagesResource: s,
                                    modelActionsLogger: l,
                                } = (0, n._$)(e);
                                try {
                                    e.withTriggersV2 && r
                                        ? yield s.actionV2({
                                              anchorIds: [t],
                                              actionId: i,
                                              feedbackToken: r,
                                          })
                                        : yield s.action({
                                              anchorIds: [t],
                                              screenId: a,
                                              actionId: i,
                                          });
                                } catch (e) {
                                    l.error(e);
                                }
                            }),
                        };
                        return t;
                    });
            var eZ = a(81821),
                e0 = a(43535),
                e1 = a(13552);
            let e3 = n.gK.model("ModalsModel", {
                disclaimerModal: S.qt,
                shortcutsModal: S.qt,
                aboutAppModal: S.qt,
                overviewModal: S.qt,
                ugcTrackEditModal: x.n_,
                popoverOverPlayer: S.qt,
                crackdownModal: S.qt,
                overwrittenExperimentsModal: S.qt,
                buySubscriptionModal: S.qt,
                clearMemoryModal: S.qt,
                imageSliderModal: e1.J,
                promoLandingBuySubscriptionModal: S.qt,
                artistAboutModal: b.Xj,
                discordRpcSettingsModal: S.qt,
                vibeBehaviorEnhancementsSettingsModal: S.qt,
                vibeAnimationEnhancementsSettingsModal: S.qt,
                playerBarEnhancementsSettingsModal: S.qt,
                windowBehaviorSettingsModal: S.qt,
                appUpdatesSettingsModal: S.qt,
                scrobblersSettingsModal: S.qt,
                downloaderSettingsModal: S.qt,
                systemSettingsModal: S.qt,
            });
            var e6 = a(22307),
                e8 = a(44748),
                e9 = a(71171),
                e2 = a(31512),
                e7 = a(96342),
                e5 = a(74726),
                e4 = a(15259),
                te = a(77575),
                tt = a(55329),
                ta = a(85897);
            let ti = n.gK.model("Network", {
                    isOffline: n.gK.optional(n.gK.boolean, !1),
                }),
                tr = n.gK.model("Entity", {
                    progress: n.gK.maybe(n.gK.number),
                    loadingState: n.gK.enumeration(Object.values(ta.DT)),
                }),
                ts = n.gK
                    .model("Slam", {
                        networkStatus: ti,
                        offlineMode: n.gK.optional(n.gK.boolean, !1),
                        tracks: n.gK.map(tr),
                    })
                    .views((e) => {
                        let t = {
                            isTrackDownloaded: (t) => {
                                var a;
                                return (
                                    (null == (a = e.tracks.get(t))
                                        ? void 0
                                        : a.loadingState) === ta.DT.DOWNLOADED
                                );
                            },
                            isTrackDownloading: (t) => {
                                var a;
                                return (
                                    (null == (a = e.tracks.get(t))
                                        ? void 0
                                        : a.loadingState) === ta.DT.DOWNLOADING
                                );
                            },
                            getTrackDownloadingProgress: (t) => {
                                var a, i;
                                return null !=
                                    (i =
                                        null == (a = e.tracks.get(t))
                                            ? void 0
                                            : a.progress)
                                    ? i
                                    : 0;
                            },
                            isPlaylistDownloaded: (e) =>
                                e.every((e) => {
                                    let [a] = (0, V.d)(e);
                                    return !!a && t.isTrackDownloaded(a);
                                }),
                            isPlaylistDownloading: (e) =>
                                e.some((e) => {
                                    let [a] = (0, V.d)(e);
                                    return !!a && t.isTrackDownloading(a);
                                }),
                            getPlaylistDownloadingProgress: (e) =>
                                Math.floor(
                                    (e.reduce((e, a) => {
                                        let [i] = (0, V.d)(a);
                                        return i && t.isTrackDownloaded(i)
                                            ? e + 1
                                            : e;
                                    }, 0) /
                                        e.length) *
                                        100,
                                ),
                            get isOfflineModeEnabled() {
                                if (!(0, n._n)(e)) return !1;
                                return e.offlineMode;
                            },
                        };
                        return t;
                    })
                    .actions((e) => ({
                        setNetworkStatus: (t) => {
                            e.networkStatus = t;
                        },
                        setTrack: (t, a) => {
                            e.tracks.set(t, a);
                        },
                        setTracks: (t) => {
                            e.tracks = (0, n.wg)(t);
                        },
                        setOfflineMode: (t) => {
                            let { localStorage: a } = (0, n._$)(e);
                            (e.offlineMode = t), a.set(u.cYZ.OfflineMode, t);
                        },
                    }));
            var tl = a(82060),
                tn = a(8159),
                to = a(29318);
            !(function (e) {
                (e.PROCESSING = "processing"), (e.PLAYABLE = "playable");
            })(r || (r = {}));
            var td = a(61744),
                tu = a(38261);
            let tc = n.gK.model("UgcUploadCenterNotificationsPairModel", {
                    playlist: L.$o,
                    type: n.gK.enumeration(Object.values(tu.u)),
                }),
                tg = n.gK
                    .model("UgcUploadCenterNotificationsModel", {
                        pairs: n.gK.array(tc),
                    })
                    .views((e) => ({
                        isNotificationExists: (t, a) =>
                            e.pairs.some(
                                (e) => e.playlist.kind === t && e.type === a,
                            ),
                    }))
                    .actions((e) => {
                        let t = {
                            addNotification(t, a) {
                                e.pairs.push({
                                    playlist: (0, to.HO)(t),
                                    type: a,
                                });
                            },
                            addNonexistentNotification(a, i) {
                                e.isNotificationExists(a.kind, i) ||
                                    t.addNotification(a, i);
                            },
                            showAllNotifications() {
                                let t = (0, to.HO)(e.pairs);
                                return (e.pairs = (0, n.wg)([])), t;
                            },
                        };
                        return t;
                    }),
                th = n.gK.model("UgcUploadCenterTrackPlaylistPair", {
                    playlist: L.$o,
                    file: td.vz,
                }),
                tm = n.gK
                    .model("UgcUploadCenterModel", {
                        tracks: n.gK.array(th),
                        notifications: tg,
                        checkProcessingTracksAttempts: n.gK.number,
                    })
                    .views((e) => ({
                        getUploadingTracksByPlaylistKind: (t) =>
                            t
                                ? e.tracks
                                      .filter((e) => e.playlist.kind === t)
                                      .map((e) => e.file)
                                : [],
                        getTracksByLoadingState: (t) =>
                            e.tracks
                                .filter((e) => e.file.loadingState === t)
                                .map((e) => e.file),
                        get idleTracks() {
                            return this.getTracksByLoadingState(td.pK.IDLE);
                        },
                        get preparingTracks() {
                            return this.getTracksByLoadingState(td.pK.PREPARE);
                        },
                        get uploadingTracks() {
                            return this.getTracksByLoadingState(
                                td.pK.UPLOADING,
                            );
                        },
                        get processingTracks() {
                            return this.getTracksByLoadingState(
                                td.pK.PROCESSING,
                            );
                        },
                        get hasTracksInUploadingState() {
                            return (
                                this.preparingTracks.length +
                                    this.uploadingTracks.length >
                                0
                            );
                        },
                        get shouldCheckProcessingTracks() {
                            return (
                                e.checkProcessingTracksAttempts < 25 &&
                                this.processingTracks.length > 0
                            );
                        },
                        getPlaylistByKind(t) {
                            var a;
                            return null ==
                                (a = e.tracks.find(
                                    (e) => e.playlist.kind === t,
                                ))
                                ? void 0
                                : a.playlist;
                        },
                    }))
                    .actions((e) => {
                        let t = {
                            appendFiles(t, a) {
                                if (
                                    (t.forEach((t) => {
                                        if (t.size > 0x19000000)
                                            return void e.notifications.addNonexistentNotification(
                                                a,
                                                tu.u.FILE_TOO_LARGE,
                                            );
                                        let i = td.vz.create({
                                            loadingState: td.pK.IDLE,
                                            playlistKind: a.kind,
                                        });
                                        i.setFile(t);
                                        let r = th.create({
                                            file: i,
                                            playlist: (0, to.HO)(a),
                                        });
                                        e.tracks.unshift(r);
                                    }),
                                    !(0, n._n)(e))
                                )
                                    return;
                                let { playlist: i } = (0, n.Zn)(e);
                                i.search.setText(""),
                                    i.search.reset(),
                                    this.runUploadTracksQueue();
                            },
                            async runUploadTracksQueue() {
                                let a = e.idleTracks;
                                if (a.length && !e.hasTracksInUploadingState) {
                                    let i = a[a.length - 1];
                                    i &&
                                        (await i.runUpload(),
                                        i.loadingState === td.pK.REJECT &&
                                            i.errorReason ===
                                                td.oQ.TOO_MANY_FILES &&
                                            ((e.tracks = (0, n.wg)([])),
                                            t.addNotificationForPlaylistKind(
                                                i.playlistKind,
                                                tu.u.TOO_MANY_FILES,
                                            )),
                                        t.checkNotifications()),
                                        t.setCheckProcessingTracksAttempts(0),
                                        t.runUploadTracksQueue();
                                }
                            },
                            checkProcessingTracks: (0, n.L3)(function* () {
                                let {
                                        tracksResource: a,
                                        modelActionsLogger: i,
                                    } = (0, n._$)(e),
                                    s = [];
                                if (e.checkProcessingTracksAttempts >= 25)
                                    return null;
                                t.setCheckProcessingTracksAttempts(
                                    e.checkProcessingTracksAttempts + 1,
                                );
                                try {
                                    let t = e.processingTracks
                                        .map((e) => e.trackId)
                                        .filter((e) => !!e);
                                    if (!t.length) return null;
                                    let i = yield a.getTracksMeta({
                                        trackIds: t,
                                        withProgress: !0,
                                    });
                                    null == i ||
                                        i.forEach((t) => {
                                            let a = e.tracks.find(
                                                (e) =>
                                                    e.file.trackId === t.id &&
                                                    t.state === r.PLAYABLE,
                                            );
                                            a &&
                                                ((a.file.loadingState =
                                                    td.pK.RESOLVE),
                                                a.file.trackId &&
                                                    s.push(a.file.trackId));
                                        });
                                } catch (e) {
                                    i.error(e);
                                }
                                return (
                                    t.checkNotifications(s),
                                    t.moveTracksFromUploadCenterToPlaylist(),
                                    null
                                );
                            }),
                            moveTracksFromUploadCenterToPlaylist() {
                                var t;
                                if (!(0, n._n)(e)) return;
                                let { playlist: a } = (0, n.Zn)(e);
                                (null == (t = a.meta) ? void 0 : t.kind) &&
                                    e.tracks.find((e) => {
                                        var t;
                                        return (
                                            e.file.loadingState ===
                                                td.pK.RESOLVE &&
                                            e.playlist.kind ===
                                                (null == (t = a.meta)
                                                    ? void 0
                                                    : t.kind)
                                        );
                                    }) &&
                                    a.refreshTracks(),
                                    (e.tracks = (0, n.wg)(
                                        e.tracks.filter(
                                            (e) =>
                                                e.file.loadingState !==
                                                td.pK.RESOLVE,
                                        ),
                                    ));
                            },
                            setCheckProcessingTracksAttempts(t) {
                                e.checkProcessingTracksAttempts = t;
                            },
                            clearCancelledUploads() {
                                e.tracks = (0, n.wg)(
                                    e.tracks.filter(
                                        (e) =>
                                            e.file.loadingState !==
                                            td.pK.CANCELLED,
                                    ),
                                );
                            },
                            checkNotifications(a) {
                                let i = new Set();
                                e.tracks.forEach((e) => i.add(e.playlist.kind)),
                                    i.forEach((i) => {
                                        let r =
                                            e.getUploadingTracksByPlaylistKind(
                                                i,
                                            );
                                        if (
                                            !(
                                                !r.length ||
                                                r.some(
                                                    (e) =>
                                                        e.loadingState !==
                                                            td.pK.RESOLVE &&
                                                        e.loadingState !==
                                                            td.pK.REJECT,
                                                )
                                            )
                                        )
                                            if (
                                                r.some(
                                                    (e) =>
                                                        e.loadingState ===
                                                        td.pK.REJECT,
                                                )
                                            ) {
                                                let s = !0;
                                                if (a && a.length) {
                                                    let t = r
                                                            .map(
                                                                (e) =>
                                                                    e.trackId,
                                                            )
                                                            .filter((e) => e),
                                                        i = (0, tl.A)(
                                                            t,
                                                            a,
                                                            tn.A,
                                                        );
                                                    i.length &&
                                                        (s = i
                                                            .map((t) =>
                                                                e.tracks.find(
                                                                    (e) =>
                                                                        e.file
                                                                            .trackId ===
                                                                        t,
                                                                ),
                                                            )
                                                            .some(
                                                                (e) =>
                                                                    (null == e
                                                                        ? void 0
                                                                        : e.file
                                                                              .loadingState) ===
                                                                    td.pK
                                                                        .REJECT,
                                                            ));
                                                }
                                                s &&
                                                    t.addNotificationForPlaylistKind(
                                                        i,
                                                        tu.u.UNKNOWN_ERROR,
                                                    );
                                            } else
                                                t.addNotificationForPlaylistKind(
                                                    i,
                                                    tu.u.SUCCESS,
                                                );
                                    });
                            },
                            addNotificationForPlaylistKind(t, a) {
                                let i = e.getPlaylistByKind(t);
                                i &&
                                    e.notifications.addNonexistentNotification(
                                        i,
                                        a,
                                    );
                            },
                        };
                        return t;
                    });
            a(73258);
            var ty = a(78597),
                tp = a(52931);
            let tv = (e) => {
                    var t, a;
                    return {
                        id: e.id,
                        type: e.type,
                        title: e.title,
                        description: e.description,
                        details: {
                            text: null == (t = e.details) ? void 0 : t.text,
                            url: null == (a = e.details) ? void 0 : a.url,
                        },
                    };
                },
                tS = n.gK
                    .compose(
                        n.gK.model("Disclaimers", {
                            disclaimers: n.gK.maybe(n.gK.array(S.GV)),
                            recentDisclaimersRequestTS: n.gK.number,
                        }),
                        S.XT,
                    )
                    .actions((e) => {
                        let t = {
                            getDisclaimers: (0, n.L3)(function* () {
                                let {
                                    disclaimersResource: t,
                                    modelActionsLogger: a,
                                } = (0, n._$)(e);
                                if (e.loadingState !== u.GuX.PENDING)
                                    try {
                                        (e.loadingState = u.GuX.PENDING),
                                            (e.recentDisclaimersRequestTS =
                                                Date.now());
                                        let a = yield t.getDisclaimers();
                                        (e.disclaimers = (0, n.wg)(a.map(tv))),
                                            e.loadingState !== u.GuX.IDLE &&
                                                (e.loadingState =
                                                    u.GuX.RESOLVE);
                                    } catch (t) {
                                        a.error(t),
                                            e.loadingState !== u.GuX.IDLE &&
                                                (e.loadingState = u.GuX.REJECT);
                                    }
                            }),
                            getDisclaimerById: (0, n.L3)(function* (a) {
                                var i, r;
                                let s =
                                    null == (i = e.disclaimers)
                                        ? void 0
                                        : i.find((e) => e.id === a);
                                return (
                                    s ||
                                    (Date.now() - e.recentDisclaimersRequestTS >
                                        18e5 && (yield t.getDisclaimers()),
                                    null == (r = e.disclaimers)
                                        ? void 0
                                        : r.find((e) => e.id === a))
                                );
                            }),
                        };
                        return t;
                    }),
                tP = n.gK
                    .model("DesktopPaywallModel")
                    .volatile(() => ({ crackdownTimeoutId: null }))
                    .views((e) => {
                        let t = {
                            get isPaywallOpen() {
                                let { paywall: t } = (0, n.Zn)(e);
                                return t.modal.isOpened;
                            },
                            get intervalMsOnEnter() {
                                var a;
                                let { experiments: t } = (0, n.Zn)(e),
                                    i =
                                        null ==
                                        (a = t.getExperiment(
                                            u.zal.WebNextDesktopPaywallInterval,
                                        ))
                                            ? void 0
                                            : a.value.interval;
                                if (Number.isNaN(i)) return 2592e5;
                                return i;
                            },
                            get intervalMsCrackdown() {
                                var i;
                                let { experiments: t } = (0, n.Zn)(e),
                                    a =
                                        null ==
                                        (i = t.getExperiment(
                                            u.zal
                                                .WebNextPaywallCrackdownInterval,
                                        ))
                                            ? void 0
                                            : i.value.interval;
                                if (Number.isNaN(a)) return 9e5;
                                return a;
                            },
                            get shouldShowOnEnter() {
                                var r, s;
                                let { settings: a } = (0, n.Zn)(e);
                                if (
                                    null == (r = a.browserInfo)
                                        ? void 0
                                        : r.isMobile
                                )
                                    return !1;
                                let { localStorage: i } = (0, n._$)(e),
                                    l =
                                        null ==
                                        (s = i.get(u.cYZ.DesktopPaywall))
                                            ? void 0
                                            : s.lastOnLoadShowDate;
                                if (void 0 === l) return !0;
                                return (
                                    new Date(l).getTime() <
                                    Date.now() - t.intervalMsOnEnter
                                );
                            },
                            get isReadyToShowCrackdown() {
                                if (this.isPaywallOpen) return !1;
                                let {
                                    paymentWidgetModal: t,
                                    modals: { crackdownModal: a },
                                } = (0, n.Zn)(e);
                                if (t.modal.isOpened || a.isOpened) return !1;
                                return !0;
                            },
                        };
                        return t;
                    })
                    .actions((e) => ({
                        showPaywall() {
                            let { paywall: t, settings: a } = (0, n.Zn)(e),
                                { localStorage: i } = (0, n._$)(e);
                            a.isMobile;
                        },
                        clearCrackdownTimeout() {
                            null !== e.crackdownTimeoutId &&
                                (clearTimeout(e.crackdownTimeoutId),
                                (e.crackdownTimeoutId = null));
                        },
                        startCrackdownTimeout() {
                            let {
                                paywall: t,
                                settings: a,
                                experiments: i,
                            } = (0, n.Zn)(e);
                            a.isMobile;
                        },
                    })),
                tE = n.gK.model({
                    text: n.gK.string,
                    buttonText: n.gK.string,
                    href: n.gK.string,
                }),
                tb = n.gK
                    .compose(
                        n.gK.model("RedAlert", { data: n.gK.maybeNull(tE) }),
                        S.XT,
                    )
                    .views((e) => ({
                        get isVisible() {
                            let { settings: t } = (0, n.Zn)(e);
                            return t.layout !== u.u40.Mobile && !!e.data;
                        },
                        get text() {
                            if (null === e.data) throw Error("Missing data");
                            return e.data.text;
                        },
                        get buttonText() {
                            if (null === e.data) throw Error("Missing data");
                            return e.data.buttonText;
                        },
                        get href() {
                            if (null === e.data) throw Error("Missing data");
                            return e.data.href;
                        },
                    }))
                    .actions((e) => ({
                        getData: (0, n.L3)(function* () {
                            if (e.loadingState === u.GuX.PENDING) return;
                            let { user: t } = (0, n.Zn)(e),
                                { redAlertResource: a, modelActionsLogger: i } =
                                    (0, n._$)(e);
                            if (!t.isAuthorized) {
                                e.loadingState = u.GuX.IDLE;
                                return;
                            }
                            e.loadingState = u.GuX.PENDING;
                            try {
                                let t = yield a.getRedAlerts({
                                    service: "music",
                                    client: "music-web",
                                    platform: "web",
                                });
                                (e.data = ((e) => {
                                    let t = e.alerts.find((e) => {
                                        let { id: t } = e;
                                        return "music-grace" === t;
                                    });
                                    return void 0 === t
                                        ? null
                                        : (0, n.wg)({
                                              text: t.texts["bar-text"],
                                              buttonText:
                                                  t.texts["bar-button-text"],
                                              href: t.clickUrl,
                                          });
                                })(t)),
                                    (e.loadingState = u.GuX.RESOLVE);
                            } catch (t) {
                                i.error(t), (e.loadingState = u.GuX.REJECT);
                            }
                        }),
                    }));
            var tf = a(65958),
                tI = a(34944);
            let tk = n.gK.model("Root", {
                    experiments: S.YL,
                    user: tI.Fv,
                    wizard: e4.H,
                    collection: ea,
                    disclaimers: tS,
                    main: eS,
                    settings: S.dA,
                    currentClipInfo: _.$d,
                    currentTrackInfo: x.UU,
                    album: el.MH,
                    promolanding: el.Wh,
                    artist: en.E,
                    library: S.br,
                    sonataState: q.bG,
                    playlist: eT.Pn,
                    albumCPA: el.dx,
                    slides: tf.M1,
                    vibe: e7.D,
                    search: eU,
                    vibeSettings: ty.LL,
                    pinsCollection: e6._1,
                    genre: em.G8,
                    genres: ey.Zt,
                    mixes: eL.YM,
                    myMusic: ek,
                    tag: eB.vV,
                    chart: eo.vB,
                    post: eD.VQ,
                    landingBlockEntities: y.hn,
                    contextMenuPlaylists: N,
                    musicHistory: ef,
                    createPlaylist: L.Co,
                    location: S.FN,
                    nonMusic: e_.rN,
                    disclaimer: tp.WA,
                    disclaimerModalData: tp.WA,
                    communication: eJ,
                    trailer: e2.v,
                    modals: e3,
                    landing: y.Ju,
                    fullscreenPlayer: e9.uZ,
                    fullscreenVideoPlayer: e5.bg,
                    releaseNotes: te._o,
                    trackLyrics: x.DP,
                    ugcUploadCenter: tm,
                    paymentWidgetModal: er.bo,
                    offers: S.Fr,
                    quality: e9.OK,
                    kids: ep.GY,
                    slam: ts,
                    favoriteTracks: eh,
                    advert: e9.kn,
                    track: eV.qQ,
                    continueListen: eZ.mK,
                    playlistPersonal: eC.Hj,
                    familyInvite: ei.J4,
                    redAlert: tb,
                    shareIframe: tt.D,
                    paywall: e8.Sz,
                    downloadMobileApp: e0.A,
                    advertBanners: eW,
                    label: ev.X,
                    desktopPaywall: tP,
                    concerts: eu.cw,
                    concert: ed.Bd,
                }),
                t_ = (e, t) => tk.create(e, t);
            var tT = a(86512);
            let tC = [
                "settings",
                "sonataState",
                "offers",
                "modals",
                "shareIframe",
                "paywall",
                "downloadMobileApp",
                "disclaimerModalData",
                "fullscreenPlayer",
                "fullscreenVideoPlayer",
                "advertBanners",
                "redAlert",
                "communication",
                "desktopPaywall",
            ];
            (0, l.eO)(!1);
            let tD = (e) => {
                    let { nonce: t, snapshotsRef: a } = e;
                    (0, d.useContext)(o.ServerInsertedHTMLContext);
                },
                tA = (e) => {
                    let { children: t, nonce: a } = e,
                        i = (0, d.useRef)([]),
                        r = (0, u.Yx9)(),
                        [l] = (0, d.useState)(() => {
                            var e;
                            return (
                                null == (e = window.__STATE_SNAPSHOT__)
                                    ? void 0
                                    : e.length
                            )
                                ? t_(
                                      window.__STATE_SNAPSHOT__[
                                          window.__STATE_SNAPSHOT__.length - 1
                                      ],
                                      r,
                                  )
                                : t_(es, r);
                        });
                    return (
                        (0, d.useLayoutEffect)(() => {
                            function e() {
                                var e;
                                let t =
                                    null == (e = window.__STATE_SNAPSHOT__)
                                        ? void 0
                                        : e[
                                              window.__STATE_SNAPSHOT__.length -
                                                  1
                                          ];
                                t &&
                                    (0, n.Nh)(
                                        l,
                                        tC.reduce(
                                            (e, t) => ((e[t] = l[t]), e),
                                            (0, tT.A)(t),
                                        ),
                                    ),
                                    delete window.__STATE_SNAPSHOT__;
                            }
                            return (
                                e(),
                                window.addEventListener(
                                    "yMusicStateSnapshotUpdated",
                                    e,
                                ),
                                () =>
                                    window.removeEventListener(
                                        "yMusicStateSnapshotUpdated",
                                        e,
                                    )
                            );
                        }, [l]),
                        (0, s.jsxs)(s.Fragment, {
                            children: [
                                (0, s.jsx)(tD, { nonce: a, snapshotsRef: i }),
                                (0, s.jsx)(u.PdQ.Provider, {
                                    value: l,
                                    children: t,
                                }),
                            ],
                        })
                    );
                };
        },
        94503: (e) => {
            e.exports = {
                root: "ConcertsPage_root__olabl",
                container: "ConcertsPage_container__qS7xA",
                footer: "ConcertsPage_footer__GYRwF",
            };
        },
        95985: (e, t, a) => {
            "use strict";
            a.d(t, { PlaylistPersonalPage: () => d });
            var i = a(33008),
                r = a(97531),
                s = a(17846),
                l = a(66268),
                n = a(79169),
                o = a(49077);
            let d = (0, r.PA)((e) => {
                let { params: t, searchParams: a } = e,
                    { playlistPersonal: r } = (0, n.Pjs)(),
                    d = r.getUrl(a);
                if (
                    ((0, l.useEffect)(() => {
                        r.isNeededToLoad &&
                            r.getPlaylistPersonalDetails(t.playlistId);
                    }, [r.isNeededToLoad, t.playlistId, r]),
                    (0, l.useEffect)(
                        () => () => {
                            r.reset();
                        },
                        [r],
                    ),
                    (0, n.Jzs)(r.isResolved),
                    (r.isNotFound || r.isRejected) && (0, s.notFound)(),
                    r.isResolved && !r.isReady)
                )
                    return (
                        r.dummyDescription || (0, s.notFound)(),
                        (0, i.jsx)(o.PlaylistPersonalDummyPage, {})
                    );
                r.isResolved && r.isReady && (0, s.redirect)(d);
            });
        },
        97097: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { PrefetchDataProvider: () => o });
            var i = a(97531),
                r = a(66268),
                s = a(79169),
                l = a(9332);
            let n = async (e) => {
                    let {
                            experimentsData: t,
                            userAccountData: a,
                            userId: i,
                            store: r,
                            withPins: s = !0,
                        } = e,
                        {
                            user: l,
                            experiments: n,
                            pinsCollection: o,
                            disclaimers: d,
                        } = r;
                    if (
                        (await l.getAbout(a),
                        l.puid && i.setPassportUid(l.puid),
                        await Promise.allSettled([
                            n.getData(t),
                            d.getDisclaimers(),
                        ]),
                        l.isAuthorized)
                    ) {
                        let e = [l.getSettings(), r.library.getData()];
                        s && e.push(o.getData()), await Promise.allSettled(e);
                    }
                },
                o = (0, i.PA)((e) => {
                    let { children: t, ...a } = e,
                        i = (0, s.Pjs)(),
                        o = (0, s.NFA)().get(s.WA$);
                    return (
                        (0, l.setClientSideLayout)(i.settings),
                        i.user.puid && o.setPassportUid(i.user.puid),
                        i.user.account.loadingState === s.GuX.IDLE &&
                            (0, r.use)(n({ store: i, userId: o, ...a })),
                        t
                    );
                });
        },
        97926: (e, t, a) => {
            "use strict";
            a.d(t, { UlitochkaInitializer: () => o });
            var i = a(33008),
                r = a(97531),
                s = a(12707),
                l = a(42213),
                n = a(79169);
            let o = (0, r.PA)((e) => {
                let { nonce: t } = e,
                    { experiments: a } = (0, n.Pjs)(),
                    r = (0, l.c)(() => {
                        window.Ya.ulitochka.init({
                            theme: "light",
                            platform: "desktop",
                            customButtonStyle: {
                                right: 5,
                                top: 60,
                                left: "auto",
                                border: 0,
                                background: "none",
                            },
                            withReactFallbackLoading: !0,
                            disableAnalytics: !0,
                        });
                    });
                if (a.checkExperiment(n.zal.WebNextUlitochka, "on"))
                    return (0, i.jsx)(s.default, {
                        src: "https://yastatic.net/s3/ulitochka/latest/ulitochka.min.js",
                        nonce: null != t ? t : void 0,
                        onLoad: r,
                        async: !0,
                    });
            });
        },
        98154: (e) => {
            e.exports = {
                root: "ChartPodcastsPage_root__J5lnx",
                scrollContainer: "ChartPodcastsPage_scrollContainer__WQTf7",
                important: "ChartPodcastsPage_important__fW45m",
                footer: "ChartPodcastsPage_footer__7ytrT",
                item: "ChartPodcastsPage_item__vGRt8",
                content: "ChartPodcastsPage_content__NcV4M",
            };
        },
        98369: (e, t, a) => {
            "use strict";
            a.d(t, { i: () => l });
            var i = a(493),
                r = a(43459),
                s = a(43090);
            function l(e) {
                let { productQuality: t, entities: a, entity: l } = e,
                    n = !1;
                if (
                    (a && (n = a.some((e) => (0, r.l)(e))),
                    l && (n = (0, r.l)(l)),
                    n)
                )
                    return i.e.SMART_PREVIEW;
                switch (t) {
                    case s.e.HIGH_QUALITY:
                        return i.e.LOSSLESS;
                    case s.e.BALANCED:
                        return i.e.NQ;
                    case s.e.EFFICIENT:
                        return i.e.LQ;
                    case s.e.PREVIEW:
                        return i.e.PREVIEW;
                    default:
                        return i.e.NQ;
                }
            }
        },
        99010: (e, t, a) => {
            "use strict";
            a.r(t), a.d(t, { AnalyticsProvider: () => l });
            var i = a(33008),
                r = a(48551),
                s = a(79169);
            let l = (e) => {
                let { children: t } = e,
                    a = (0, s.UlF)(),
                    l =
                        "on" ===
                        (0, s.NFA)().get(s.ooW).get(s.cYZ.AllowAnalyticsLogs);
                return (0, i.jsx)(r.vZ, {
                    allowAnalyticsLogs: l,
                    evgenUserParam: "evgen",
                    logger: a,
                    children: t,
                });
            };
        },
        99556: (e, t, a) => {
            "use strict";
            a.d(t, { TagPage: () => v });
            var i = a(33008),
                r = a(85896),
                s = a(97531),
                l = a(17846),
                n = a(66268),
                o = a(73827),
                d = a(77868),
                u = a(83888),
                c = a(64143),
                g = a(45242),
                h = a(79169),
                m = a(18740),
                y = a(35050),
                p = a.n(y);
            let v = (0, s.PA)((e) => {
                var t, a, s;
                let { tagId: y } = e,
                    {
                        tag: v,
                        settings: { isMobile: S },
                    } = (0, h.Pjs)(),
                    { formatMessage: P } = (0, o.A)(),
                    { contentScrollRef: E, setContentScrollRef: b } = (0,
                    h.gKY)(),
                    f = (0, h.W6M)();
                y || (0, l.notFound)();
                let I = (0, n.useCallback)(
                    (e) => {
                        v.getPlaylists({ page: e, pageSize: 20 });
                    },
                    [v],
                );
                v.isNotFound && (0, l.notFound)(),
                    (0, n.useEffect)(
                        () => () => {
                            v.reset();
                        },
                        [v],
                    );
                let k = (0, n.useMemo)(
                    () => ({
                        Footer: () =>
                            (0, i.jsx)(m.A, {
                                children: (0, i.jsx)(m.wi, {
                                    className: p().footer,
                                }),
                            }),
                    }),
                    [],
                );
                return ((0, h.Jzs)(v.isResolved),
                v.isNeededToLoad &&
                    (0, n.use)(v.getTag({ id: y, page: 0, pageSize: 20 })),
                v.isSomethingWrong)
                    ? (0, i.jsx)(u.w, {})
                    : (0, i.jsx)(h.nVz, {
                          pageId: h._Q$.TAG,
                          children: (0, i.jsx)(c.hO, {
                              scrollElement: E,
                              outerTitle: v.title,
                              children: (0, i.jsxs)("div", {
                                  className: p().root,
                                  children: [
                                      (0, i.jsx)(m.Y9, {
                                          variant: m.Vw.TEXT,
                                          withForwardControl: !1,
                                          withBackwardControl: f.canBack,
                                          children: (0, i.jsx)(d.Heading, {
                                              variant: "h2",
                                              weight: "bold",
                                              size: "xl",
                                              lineClamp: 1,
                                              children: v.title,
                                          }),
                                      }),
                                      (0, i.jsx)(m.$$, {
                                          className: (0, r.$)(
                                              p().scrollContainer,
                                              p().important,
                                          ),
                                          customComponents: k,
                                          itemContentCallback: (e) => {
                                              var t;
                                              let a =
                                                      null == v ||
                                                      null == (t = v.playlists)
                                                          ? void 0
                                                          : t[e],
                                                  r = P(
                                                      {
                                                          id: "loading-messages.entity-is-loading",
                                                      },
                                                      {
                                                          entityName: P({
                                                              id: "entity-names.playlist",
                                                          }),
                                                      },
                                                  );
                                              return a
                                                  ? (0, i.jsx)(
                                                        g.B6,
                                                        {
                                                            playlist: a,
                                                            contentLinesCount: 3,
                                                        },
                                                        a.key,
                                                    )
                                                  : (0, i.jsx)(m.Vt, {
                                                        "aria-label": r,
                                                    });
                                          },
                                          totalCount:
                                              null !=
                                              (a =
                                                  null == v ||
                                                  null == (t = v.pager)
                                                      ? void 0
                                                      : t.total)
                                                  ? a
                                                  : 0,
                                          onGetDataByPage: I,
                                          pageSize: 20,
                                          totalRequests:
                                              null != (s = v.requests) ? s : 0,
                                          listClassName: p().content,
                                          itemClassName: p().item,
                                          handleRef: b,
                                          context: {
                                              listAriaLabel: P(
                                                  { id: "mixes.albums-list" },
                                                  { genreName: v.title || "" },
                                              ),
                                          },
                                          isMobileLayout: S,
                                          useWindowScroll: S,
                                      }),
                                  ],
                              }),
                          }),
                      });
            });
        },
    },
]);
